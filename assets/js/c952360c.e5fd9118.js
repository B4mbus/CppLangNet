"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[20493],{14064:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),l=(n(67294),n(3905));const r={toc:[]};function o(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Aspects and semantics that are ",(0,l.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,l.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),l=n(86010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(87462),l=n(67294),r=n(86010),o=n(12466),s=n(76775),i=n(91980),c=n(67392),p=n(50012);function u(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:l}}=e;return{value:t,label:n,attributes:a,default:l}}))}function d(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function I(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[o,s]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[i,c]=f({queryString:n,groupId:a}),[u,I]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,p.Nk)(n);return[a,(0,l.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),y=(()=>{const e=i??u;return m({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),I(e)}),[c,I,r]),tabValues:r}}var y=n(72389);const k="tabList__CuJ",g="tabItem_LNqP";function h(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==s&&(u(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},o,{className:(0,r.Z)("tabs__item",g,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=I(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",k)},l.createElement(h,(0,a.Z)({},e,t)),l.createElement(b,(0,a.Z)({},e,t)))}function v(e){const t=(0,y.Z)();return l.createElement(N,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(87462),l=n(67294);const r="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,l.createElement("div",(0,a.Z)({className:r,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),l=n(74866),r=n(85162),o=n(99372),s=n(72412);const i={};function c(e){const t=e.content||{};return a.createElement(l.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(r.Z,{value:n,label:o.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(l.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(r.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(c.simplified)),a.createElement(r.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(c.detailed)))):c.value):a.createElement(r.Z,{value:n,label:o.gJ.get(n),default:0==t},(0,s.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var a=n(67294),l=n(72412);const r={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:r.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:r.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:r.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:r.accessPrivate}},i=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:r.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function p(e){a.useContext(o.z);let t=(0,l.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:r[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:r.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:r.symbolName},t),a.createElement("td",{className:r.symbolDesc},(0,l.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),l=n(44996),r=n(34386),o=n(72412);const s="TooltipContent_Lvru",i="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let u=c||"clamp(250px, 25vw, 800px)";"string"==typeof u&&u.endsWith("vw")&&(u=`clamp(250px, ${u}, 800px)`);const d="function"==typeof n?a.createElement(n):n,m=(t||"").startsWith("/")?(0,l.Z)(t):t,f=t?a.createElement("a",{href:m,target:"_blank",rel:"noreferrer"},p):p;return a.createElement(r.Z,{componentsProps:{tooltip:{style:{maxWidth:u}}},title:a.createElement("span",{className:i},(0,o.Z)(d)),placement:"top",arrow:!0},a.createElement("span",{className:s},f))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>f,U6:()=>d,OS:()=>m});var a=n(67294),l=n(95999);const r="markedText_c6kK",o="since_c1Q3",s="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function u(e){let{children:t,className:n}=e;return a.createElement("span",{className:r+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(u,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(u,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return a.createElement(u,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",a.createElement(l.Z,null,"deprecated")),p.set("deprecated-cpp98",a.createElement(l.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",a.createElement(l.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",a.createElement(l.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",a.createElement(l.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",a.createElement(l.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",a.createElement(l.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",a.createElement(l.Z,null,"deprecated in C++23")),p.set("until-cpp98",a.createElement(l.Z,null,"until C++98")),p.set("until-cpp03",a.createElement(l.Z,null,"until C++03")),p.set("until-cpp11",a.createElement(l.Z,null,"until C++11")),p.set("until-cpp14",a.createElement(l.Z,null,"until C++14")),p.set("until-cpp17",a.createElement(l.Z,null,"until C++17")),p.set("until-cpp20",a.createElement(l.Z,null,"until C++20")),p.set("until-cpp23",a.createElement(l.Z,null,"until C++23")),p.set("since-cpp98",a.createElement(l.Z,null,"since C++98")),p.set("since-cpp03",a.createElement(l.Z,null,"since C++03")),p.set("since-cpp11",a.createElement(l.Z,null,"since C++11")),p.set("since-cpp14",a.createElement(l.Z,null,"since C++14")),p.set("since-cpp17",a.createElement(l.Z,null,"since C++17")),p.set("since-cpp20",a.createElement(l.Z,null,"since C++20")),p.set("since-cpp23",a.createElement(l.Z,null,"since C++23")),p.set("removed-",a.createElement(l.Z,null,"deleted")),p.set("removed-cpp98",a.createElement(l.Z,null,"removed in C++98")),p.set("removed-cpp03",a.createElement(l.Z,null,"removed in C++03")),p.set("removed-cpp11",a.createElement(l.Z,null,"removed in C++11")),p.set("removed-cpp14",a.createElement(l.Z,null,"removed in C++14")),p.set("removed-cpp17",a.createElement(l.Z,null,"removed in C++17")),p.set("removed-cpp20",a.createElement(l.Z,null,"removed in C++20")),p.set("removed-cpp23",a.createElement(l.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},1777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal/since-cpp14",id:"std/algo/ordinary/_codes/equal/since-cpp14",title:"since-cpp14",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal/since-cpp14.mdx",sourceDirName:"std/algo/ordinary/_codes/equal",slug:"/std/algo/ordinary/_codes/equal/since-cpp14",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal/since-cpp14",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal/since-cpp14.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p );\n\n// (3)\ntemplate< class InputIt1, class InputIt2 >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (4)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPredicate p );\n")))}u.isMDXComponent=!0},72022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal/since-cpp17",id:"std/algo/ordinary/_codes/equal/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/equal",slug:"/std/algo/ordinary/_codes/equal/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p );\n\n// (3)\ntemplate< class InputIt1, class InputIt2 >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (4)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPredicate p );\n\n// (5)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 );\n\n// (6)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, BinaryPredicate p );\n\n// (7)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, ForwardIt2 last2 );\n\n// (8)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nbool equal( ExecutionPolicy&& policy,\n            ForwardIt1 first1, ForwardIt1 last1,\n            ForwardIt2 first2, ForwardIt2 last2,\n            BinaryPredicate p );\n")))}u.isMDXComponent=!0},29199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal/since-cpp20",id:"std/algo/ordinary/_codes/equal/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/equal",slug:"/std/algo/ordinary/_codes/equal/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nconstexpr bool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nconstexpr bool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p );\n\n// (3)\ntemplate< class InputIt1, class InputIt2 >\nconstexpr bool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (4)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nconstexpr bool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPredicate p );\n\n// (5)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 );\n\n// (6)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, BinaryPredicate p );\n\n// (7)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool equal( ExecutionPolicy&& policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2, ForwardIt2 last2 );\n\n// (8)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nbool equal( ExecutionPolicy&& policy,\n            ForwardIt1 first1, ForwardIt1 last1,\n            ForwardIt2 first2, ForwardIt2 last2,\n            BinaryPredicate p );\n")))}u.isMDXComponent=!0},59637:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const r={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal/until-cpp14",id:"std/algo/ordinary/_codes/equal/until-cpp14",title:"until-cpp14",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal/until-cpp14.mdx",sourceDirName:"std/algo/ordinary/_codes/equal",slug:"/std/algo/ordinary/_codes/equal/until-cpp14",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal/until-cpp14",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal/until-cpp14.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class BinaryPredicate >\nbool equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p );\n")))}u.isMDXComponent=!0},89481:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>k,default:()=>v,frontMatter:()=>y,metadata:()=>g,toc:()=>b});var a=n(87462),l=n(67294),r=n(3905),o=n(55059),s=n(22307),i=n(99801),c=n(18510),p=n(99372),u=n(14064),d=n(59637),m=n(1777),f=n(72022),I=n(29199);const y={title:"equal algorithm",sidebar_label:"equal(  )",description:"equal algorithm C++ documentation",hide_title:!0,tags:["algorithm","equal"],cppreference_origin_rel:"w/cpp/algorithm/equal"},k=void 0,g={unversionedId:"std/algo/ordinary/equal",id:"std/algo/ordinary/equal",title:"equal algorithm",description:"equal algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/equal.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/equal",permalink:"/CppLangNet/docs/std/algo/ordinary/equal",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/equal.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"equal",permalink:"/CppLangNet/docs/tags/equal"}],version:"current",frontMatter:{title:"equal algorithm",sidebar_label:"equal(  )",description:"equal algorithm C++ documentation",hide_title:!0,tags:["algorithm","equal"],cppreference_origin_rel:"w/cpp/algorithm/equal"},sidebar:"defaultSidebar",previous:{title:"ranges::lexicographical_compare(  )",permalink:"/CppLangNet/docs/std/algo/ranges/lexicographical_compare"},next:{title:"lexicographical_compare(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/lexicographical_compare"}},h={},b=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],N={toc:b};function v(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"stdequal-algorithm"},"std::equal() algorithm"),(0,r.kt)(i.Z,{content:{"since-cpp20":(0,r.kt)(I.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,r.kt)(f.default,{mdxType:"Signature_SinceCpp17"}),"since-cpp14":(0,r.kt)(m.default,{mdxType:"Signature_SinceCpp14"}),"until-cpp14":(0,r.kt)(d.default,{mdxType:"Signature_UntilCpp14"})},mdxType:"SwitchView"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(1 - 2)")," Returns true if the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last1"),") is equal to the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"first2 + (last1 - first1"),")), and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(3 - 4)")," Returns true if the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last1"),") is equal to the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last2"),"), and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(5 - 8)")," Same as ",(0,r.kt)("strong",{parentName:"p"},"(1)"),", but executed according to ",(0,r.kt)("inlineCode",{parentName:"p"},"policy"),"."),(0,r.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,r.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,r.kt)(p.OS,{v:"cpp20",mdxType:"Until"}," ",(0,r.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," ")," ",(0,r.kt)(p.U6,{v:"cpp20",mdxType:"Since"}," ",(0,r.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," ")," is ",(0,r.kt)("code",null,"true"),"."))),(0,r.kt)("p",null,"Two ranges are considered equal if they have the same number of elements and, for every iterator ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," in the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last1"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"*i")," equals ",(0,r.kt)("inlineCode",{parentName:"p"},"*(first2 + (i - first1))"),"."),(0,r.kt)("p",null,"The overloads ",(0,r.kt)("strong",{parentName:"p"},"(1, 3, 5, 7)")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"operator==")," to determine if two elements are equal, whereas overloads ",(0,r.kt)("strong",{parentName:"p"},"(2, 4, 6, 8)")," use the given binary predicate ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),"."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)(o.ZP,{mdxType:"SymbolTable"},(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)(l.Fragment,null," ",(0,r.kt)("code",null,"first1")," ",(0,r.kt)("br",null)," ",(0,r.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first range of elements compare."),(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)(l.Fragment,null," ",(0,r.kt)("code",null,"first2")," ",(0,r.kt)("br",null)," ",(0,r.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second range of elements compare."),(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"policy"),mdxType:"Symbol"},"The execution policy to use. See ",(0,r.kt)("a",{href:"#"},"execution policy")," for details."),(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"p"),mdxType:"Symbol"},(0,r.kt)("p",null,"Binary predicate which returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the elements should be treated as equal."),(0,r.kt)("p",null,"The signature of the function should be equivalent to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool fun(const Type1& a, const Type2& b);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,r.kt)("inlineCode",{parentName:"li"},"const&"),"."),(0,r.kt)("li",{parentName:"ul"},"The function ",(0,r.kt)("strong",{parentName:"li"},"must not")," modify the objects passed to it"),(0,r.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,r.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,r.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,r.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,r.kt)(p.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,r.kt)("code",null,"Type1")," unless for ",(0,r.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,r.kt)("li",{parentName:"ul"},"The types ",(0,r.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,r.kt)("inlineCode",{parentName:"li"},"InputIt1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"InputIt2")," can be dereferenced and then implicitly converted to them.")))),(0,r.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,r.kt)(o.ZP,{mdxType:"SymbolTable"},(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)(l.Fragment,null," ",(0,r.kt)("code",null,"InputIt1")," ",(0,r.kt)("br",null)," ",(0,r.kt)("code",null,"InputIt2")," "),mdxType:"Symbol"},(0,r.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator")),(0,r.kt)(o.mN,{none:!0,noLink:!0,name:(0,r.kt)(l.Fragment,null," ",(0,r.kt)("code",null,"ForwardIt1")," ",(0,r.kt)("br",null)," ",(0,r.kt)("code",null,"ForwardIt2")," "),mdxType:"Symbol"},(0,r.kt)("a",{href:"/docs/named_req/LegacyForwardIterator"},"LegacyForwardIterator"))),(0,r.kt)("h3",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"If the elements in the two ranges are equal, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h3",{id:"complexity"},"Complexity"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(1 - 2)")," At most ",(0,r.kt)("inlineCode",{parentName:"p"},"last1 - first1")," applications of the predicate.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(3 - 4)")," At most ",(0,r.kt)("inlineCode",{parentName:"p"},"min(last1 - first1, last2 - first2)")," applications of the predicate.\nHowever, if ",(0,r.kt)("inlineCode",{parentName:"p"},"InputIt1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"InputIt2")," meet the requirements of ",(0,r.kt)("a",{parentName:"p",href:"/docs/named_req/LegacyRandomAccessIterator"},(0,r.kt)("inlineCode",{parentName:"a"},"LegacyRandomAccessIterator"))," and ",(0,r.kt)("inlineCode",{parentName:"p"},"last1 - first1 != last2 - first2"),", then no applications of the predicate are made (size mismatch is detected without looking at any elements).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"(5 - 8)")," Same, but the complexity is specified as ",(0,r.kt)("strong",{parentName:"p"},"O(x)"),', rather than "At most x".'))),(0,r.kt)("h3",{id:"exceptions"},"Exceptions"),(0,r.kt)("p",null,"The overloads with a template parameter named ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,r.kt)("a",{parentName:"li",href:"#"},(0,r.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,r.kt)("a",{parentName:"li",href:"#"},(0,r.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,r.kt)(c.Z,{title:(0,r.kt)(u.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,r.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,r.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,r.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,r.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"equal (1)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt1, class InputIt2>\nconstexpr //< since C++20\nbool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2)\n{\n    for (; first1 != last1; ++first1, ++first2)\n        if (!(*first1 == *first2))\n            return false;\n\n    return true;\n}\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"equal (2)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt1, class InputIt2, class BinaryPredicate>\n  constexpr //< since C++20\nbool equal(InputIt1 first1, InputIt1 last1,\n    InputIt2 first2, BinaryPredicate p)\n{\n  for (; first1 != last1; ++first1, ++first2)\n    if (!p(*first1, *first2))\n      return false;\n\n  return true;\n}\n"))),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <iomanip>\n#include <iostream>\n#include <string_view>\n\nconstexpr bool is_palindrome(const std::string_view& s)\n{\n    return std::equal(s.cbegin(), s.cbegin() + s.size() / 2, s.crbegin());\n}\n\nvoid test(const std::string_view& s)\n{\n    std::cout << std::quoted(s)\n              << (is_palindrome(s) ? " is" : " is not")\n              << " a palindrome\\n";\n}\n\nint main()\n{\n    test("radar");\n    test("hello");\n}\n'))),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},'"radar" is a palindrome\n"hello" is not a palindrome\n')))))}v.isMDXComponent=!0}}]);