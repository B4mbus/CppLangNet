"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[99128,99111,61912],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),s=n(86010),l=n(12466),i=n(76775),o=n(91980),p=n(67392),c=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[o,p]=g({queryString:n,groupId:a}),[u,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),b=(()=>{const e=o??u;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),f(e)}),[p,f,s]),tabValues:s}}var b=n(72389);const _="tabList__CuJ",k="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==i&&(u(t),o(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,s.Z)("tabs__item",k,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=f(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",_)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(h,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(87462),r=n(67294);const s="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:s,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(67294),r=n(74866),s=n(85162),l=n(99372),i=n(72412);const o={};function p(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,p]=e;return p.value||p.simplified||p.detailed?a.createElement(s.Z,{value:n,label:l.gJ.get(n),default:p.default||0==t},p.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:o.smallTabs},a.createElement(s.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(p.simplified)),a.createElement(s.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(p.detailed)))):p.value):a.createElement(s.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,i.Z)(p))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>p});var a=n(67294),r=n(72412);const s={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:s.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:s.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:s.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:s.accessPrivate}},o=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function p(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:s.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function c(e){a.useContext(l.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const p=(e,t,n)=>!0===e?a.createElement("span",{className:s[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:s.symbolProp},(e=>{const t=o(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),p(e.static,"modStatic","static"),p(e.constexpr,"modConstexpr","constexpr"),p(e.const,"modConst","const"),p(e.volatile,"modVolatile","volatile"),p(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:s.symbolName},t),a.createElement("td",{className:s.symbolDesc},(0,r.Z)(n)))}c.isMDXComponent=!0,p.isMDXComponent=!0,p.Symbol=c},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>g,U6:()=>d,OS:()=>m});var a=n(67294),r=n(95999);const s="markedText_c6kK",l="since_c1Q3",i="until_jXK6",o="removed_A_Kf",p="versionNumber_BiUX",c=new Map;function u(e){let{children:t,className:n}=e;return a.createElement("span",{className:s+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(u,{className:l},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(u,{className:i},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return a.createElement(u,{className:o},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",a.createElement(r.Z,null,"deprecated")),c.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),c.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),c.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),c.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),c.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),c.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),c.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),c.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),c.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),c.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),c.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),c.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),c.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),c.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),c.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),c.set("removed-",a.createElement(r.Z,null,"deleted")),c.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),c.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),c.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),c.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),c.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),c.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),c.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},25301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={},l=void 0,i={unversionedId:"std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed",id:"std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/swap_ranges",slug:"/std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},o={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2,\n  std::sentinel_for<I2> S2\n>\n  requires std::indirectly_swappable<I1, I2>\nconstexpr swap_ranges_result<I1, I2>\n    swap_ranges( I1 first1, S1 last1, I2 first2, S2 last2 );\n\n// (2)\ntemplate<\n  ranges::input_range R1,\n  ranges::input_range R2\n>\n  requires std::indirectly_swappable<ranges::iterator_t<R1>, ranges::iterator_t<R2>>\nconstexpr swap_ranges_result<ranges::borrowed_iterator_t<R1>,\n                             ranges::borrowed_iterator_t<R2>>\n    swap_ranges( R1&& r1, R2&& r2 );\n")))}u.isMDXComponent=!0},24266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={},l=void 0,i={unversionedId:"std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified",id:"std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/swap_ranges",slug:"/std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/swap_ranges/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},o={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr swap_ranges_result<I1, I2>\n    swap_ranges( I1 first1, S1 last1, I2 first2, S2 last2 );\n\n// (2)\nconstexpr swap_ranges_result<ranges::borrowed_iterator_t<R1>,\n                             ranges::borrowed_iterator_t<R2>>\n    swap_ranges( R1&& r1, R2&& r2 );\n")),(0,r.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::input_iterator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::ranges::input_range"))),(0,r.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(1)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::indirectly_swappable<I1, I2>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::indirectly_swappable<ranges::iterator_t<R1>, ranges::iterator_t<R2>>"))))}u.isMDXComponent=!0},8876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>_,frontMatter:()=>u,metadata:()=>m,toc:()=>f});var a=n(87462),r=n(67294),s=n(3905),l=n(55059),i=n(22307),o=n(99801),p=n(25301),c=n(24266);const u={title:"ranges::swap_ranges algorithm",sidebar_label:"ranges::swap_ranges(  )",description:"ranges::swap_ranges algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","swap","swap_ranges"],cppreference_origin_rel:"w/cpp/algorithm/ranges/swap_ranges"},d=void 0,m={unversionedId:"std/algo/ranges/swap_ranges",id:"std/algo/ranges/swap_ranges",title:"ranges::swap_ranges algorithm",description:"ranges::swap_ranges algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/swap_ranges.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/swap_ranges",permalink:"/CppLangNet/docs/std/algo/ranges/swap_ranges",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/swap_ranges.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"swap",permalink:"/CppLangNet/docs/tags/swap"},{label:"swap_ranges",permalink:"/CppLangNet/docs/tags/swap-ranges"}],version:"current",frontMatter:{title:"ranges::swap_ranges algorithm",sidebar_label:"ranges::swap_ranges(  )",description:"ranges::swap_ranges algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","swap","swap_ranges"],cppreference_origin_rel:"w/cpp/algorithm/ranges/swap_ranges"},sidebar:"defaultSidebar",previous:{title:"ranges::replace_copy(  )",permalink:"/CppLangNet/docs/std/algo/ranges/replace_copy"},next:{title:"ranges::rotate(  )",permalink:"/CppLangNet/docs/std/algo/ranges/rotate"}},g={},f=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],b={toc:f};function _(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stdrangesswap_ranges-algorithm"},"std::ranges::swap_ranges() algorithm"),(0,s.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,s.kt)(c.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,s.kt)(p.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,s.kt)("p",null,"With the helper types defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"template< class I1, class I2 >\nusing swap_ranges_result = ranges::in_in_result<I1, I2>;\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")," Given ",(0,s.kt)("strong",{parentName:"p"},"M")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::min(ranges::distance(first1, last1), ranges::distance(first2, last2))"),":"),(0,s.kt)("p",{parentName:"li"},"Exchanges elements between first range [",(0,s.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"first1 + M"),") and second range [",(0,s.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"first2 + M"),") via ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::iter_swap(first1 + i, first2 + i)"),"."),(0,s.kt)("p",{parentName:"li"},"The ranges [",(0,s.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,s.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last2"),") ",(0,s.kt)("strong",{parentName:"p"},"must not")," overlap.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,s.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,s.kt)("inlineCode",{parentName:"p"},"r1")," as the first range, as if using ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::begin(r1)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"first1")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::end(r1)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"last1"),", and similarly for ",(0,s.kt)("inlineCode",{parentName:"p"},"r2"),"."))),(0,s.kt)("p",null,"The function-like entities described on this page are ",(0,s.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,s.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)(l.ZP,{mdxType:"SymbolTable"},(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(r.Fragment,null," ",(0,s.kt)("code",null,"first1")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first range of elements to swap."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(r.Fragment,null," ",(0,s.kt)("code",null,"first2")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second range of elements to swap."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"r1"),mdxType:"Symbol"},"The first range of elements to swap."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"r2"),mdxType:"Symbol"},"The second range of elements to swap.")),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("p",null,"An value of type ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::swap_ranges_result")," initialized as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  first1 + M,\n  first2 + M\n}\n")),(0,s.kt)("p",null,"Where M is the smaller size out of both ranges (",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::min(ranges::distance(first1, last1), ranges::distance(first2, last2))"),")."),(0,s.kt)("h3",{id:"complexity"},"Complexity"),(0,s.kt)("p",null,"Exactly M swaps."),(0,s.kt)("h3",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"(none)")),(0,s.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"swap_ranges(1)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct swap_ranges_fn\n{\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n             std::input_iterator I2, std::sentinel_for<I2> S2>\n    requires std::indirectly_swappable<I1, I2>\n    constexpr ranges::swap_ranges_result<I1, I2>\n        operator()(I1 first1, S1 last1, I2 first2, S2 last2) const\n    {\n        for (; !(first1 == last1 or first2 == last2); ++first1, ++first2)\n            ranges::iter_swap(first1, first2);\n        return {std::move(first1), std::move(first2)};\n    }\n\n    template<ranges::input_range R1, ranges::input_range R2>\n    requires std::indirectly_swappable<ranges::iterator_t<R1>, ranges::iterator_t<R2>>\n    constexpr ranges::swap_ranges_result<ranges::borrowed_iterator_t<R1>,\n                                         ranges::borrowed_iterator_t<R2>>\n        operator()(R1&& r1, R2&& r2) const\n    {\n        return (*this)(ranges::begin(r1), ranges::end(r1),\n                       ranges::begin(r2), ranges::end(r2));\n    }\n};\n\ninline constexpr swap_ranges_fn swap_ranges {};\n"))),(0,s.kt)("h3",{id:"notes"},"Notes"),(0,s.kt)("p",null,"Implementations (e.g. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/microsoft/STL/blob/main/stl/src/vector_algorithms.cpp"},(0,s.kt)("strong",{parentName:"a"},"MSVC STL")),") may enable vectorization when the iterator type models ",(0,s.kt)("a",{parentName:"p",href:"#"},(0,s.kt)("inlineCode",{parentName:"a"},"contiguous_iterator"))," and swapping its value type calls neither non-trivial special member function nor ADL-found swap."),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <list>\n#include <string_view>\n#include <vector>\n\nauto print(std::string_view name, auto const& seq, std::string_view term = \"\\n\")\n{\n    std::cout << name << \" : \";\n    for (const auto& elem : seq)\n        std::cout << elem << ' ';\n    std::cout << term;\n}\n\nint main()\n{\n    std::vector<char> p {'A', 'B', 'C', 'D', 'E'};\n    std::list<char> q {'1', '2', '3', '4', '5', '6'};\n\n    print(\"p\", p);\n    print(\"q\", q, \"\\n\\n\");\n\n    // swap p[0, 2) and q[1, 3):\n    std::ranges::swap_ranges(p.begin(),\n                             p.begin() + 4,\n                             std::ranges::next(q.begin(), 1),\n                             std::ranges::next(q.begin(), 3));\n    print(\"p\", p);\n    print(\"q\", q, \"\\n\\n\");\n\n    // swap p[0, 5) and q[0, 5):\n    std::ranges::swap_ranges(p, q);\n\n    print(\"p\", p);\n    print(\"q\", q);\n}\n"))),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"p : A B C D E\nq : 1 2 3 4 5 6\n\np : 2 3 C D E\nq : 1 A B 4 5 6\n\np : 1 A B 4 5\nq : 2 3 C D E 6\n")))))}_.isMDXComponent=!0}}]);