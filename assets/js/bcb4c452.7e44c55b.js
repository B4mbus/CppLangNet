"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[10461,68278,1753],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),a=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(87462),a=n(67294),l=n(86010),s=n(12466),o=n(76775),i=n(91980),p=n(67392),c=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=u(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[i,p]=f({queryString:n,groupId:r}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),k=(()=>{const e=i??d;return m({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),g(e)}),[p,g,l]),tabValues:l}}var k=n(72389);const b="tabList__CuJ",_="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),r=p[n].value;r!==o&&(d(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:u},s,{className:(0,l.Z)("tabs__item",_,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function h(e){const t=g(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",b)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(N,(0,r.Z)({},e,t)))}function v(e){const t=(0,k.Z)();return a.createElement(h,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(87462),a=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(67294),a=n(74866),l=n(85162),s=n(99372),o=n(72412);const i={};function p(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,p]=e;return p.value||p.simplified||p.detailed?r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:p.default||0==t},p.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:i.smallTabs},r.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(p.simplified)),r.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(p.detailed)))):p.value):r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,o.Z)(p))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>p});var r=n(67294),a=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function p(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function c(e){r.useContext(s.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const p=(e,t,n)=>!0===e?r.createElement("span",{className:l[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),p(e.static,"modStatic","static"),p(e.constexpr,"modConstexpr","constexpr"),p(e.const,"modConst","const"),p(e.volatile,"modVolatile","volatile"),p(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:l.symbolName},t),r.createElement("td",{className:l.symbolDesc},(0,a.Z)(n)))}c.isMDXComponent=!0,p.isMDXComponent=!0,p.Symbol=c},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>f,U6:()=>u,OS:()=>m});var r=n(67294),a=n(95999);const l="markedText_c6kK",s="since_c1Q3",o="until_jXK6",i="removed_A_Kf",p="versionNumber_BiUX",c=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:l+(n?" "+n:"")},t)}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:s},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:o},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",r.createElement(a.Z,null,"deprecated")),c.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),c.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),c.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),c.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),c.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),c.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),c.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),c.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),c.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),c.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),c.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),c.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),c.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),c.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),c.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),c.set("removed-",r.createElement(a.Z,null,"deleted")),c.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),c.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),c.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),c.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),c.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),c.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),c.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},68488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ranges/_codes/transform/since-cpp20-detailed",id:"std/algo/ranges/_codes/transform/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/transform/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/transform",slug:"/std/algo/ranges/_codes/transform/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/transform/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/transform/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n    std::input_iterator I,\n    std::sentinel_for<I> S,\n    std::weakly_incrementable O,\n    std::copy_constructible F,\n    class Proj = std::identity\n>\n    requires std::indirectly_writable<O, std::indirect_result_t<F&, std::projected<I, Proj>>>\nconstexpr unary_transform_result<I, O>\n    transform( I first1, S last1, O result, F op, Proj proj = {} );\n\n// (2)\ntemplate<\n    ranges::input_range R,\n    std::weakly_incrementable O,\n    std::copy_constructible F,\n    class Proj = std::identity\n>\n    requires std::indirectly_writable<O, std::indirect_result_t< F&, std::projected<ranges::iterator_t<R>, Proj>>\nconstexpr unary_transform_result<ranges::borrowed_iterator_t<R>, O>\n    transform( R&& r, O result, F op, Proj proj = {} );\n\n// (3)\ntemplate<\n    std::input_iterator I1, std::sentinel_for<I1> S1,\n    std::input_iterator I2, std::sentinel_for<I2> S2,\n    std::weakly_incrementable O,\n    std::copy_constructible F,\n    class Proj1 = std::identity, class Proj2 = std::identity\n>\n    requires std::indirectly_writable<O,\n                std::indirect_result_t<F&, std::projected<I1, Proj1>, std::projected<I2, Proj2>>>\nconstexpr binary_transform_result<I1, I2, O>\n    transform(\n        I1 first1, S1 last1,\n        I2 first2, S2 last2,\n        O result,\n        F binary_op,\n        Proj1 proj1 = {}, Proj2 proj2 = {}\n    );\n\n// (4)\ntemplate<\n    ranges::input_range R1, ranges::input_range R2,\n    std::weakly_incrementable O,\n    std::copy_constructible F,\n    class Proj1 = std::identity, class Proj2 = std::identity >\nrequires std::indirectly_writable<O,\n             std::indirect_result_t<F&, std::projected<ranges::iterator_t<R1>, Proj1>, std::projected<ranges::iterator_t<R2>, Proj2>>>\nconstexpr binary_transform_result<ranges::borrowed_iterator_t<R1>,\n                                  ranges::borrowed_iterator_t<R2>, O>\n    transform(\n        R1&& r1, R2&& r2,\n        O result,\n        F binary_op,\n        Proj1 proj1 = {}, Proj2 proj2 = {}\n    );\n")))}d.isMDXComponent=!0},16009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ranges/_codes/transform/since-cpp20-simplified",id:"std/algo/ranges/_codes/transform/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/transform/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/transform",slug:"/std/algo/ranges/_codes/transform/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/transform/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/transform/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr unary_transform_result<I, O>\n    transform( I first1, S last1, O result, F op, Proj proj = {} );\n\n// (2)\nconstexpr unary_transform_result<ranges::borrowed_iterator_t<R>, O>\n    transform( R&& r, O result, F op, Proj proj = {} );\n\n// (3)\nconstexpr binary_transform_result<I1, I2, O>\n    transform(\n        I1 first1, S1 last1,\n        I2 first2, S2 last2,\n        O result,\n        F binary_op,\n        Proj1 proj1 = {}, Proj2 proj2 = {}\n    );\n\n// (4)\nconstexpr binary_transform_result<ranges::borrowed_iterator_t<R1>,\n                                  ranges::borrowed_iterator_t<R2>, O>\n    transform(\n        R1&& r1, R2&& r2,\n        O result,\n        F binary_op,\n        Proj1 proj1 = {}, Proj2 proj2 = {}\n    );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::input_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::input_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"O")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::weakly_incrementable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"F")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::copy_constructible"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," template argument has a default type of ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity")," for all overloads."),(0,a.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirectly_writable<O, indirect_result_t<F&, projected<I, Proj>> >")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirectly_writable<O, indirect_result_t<F&, projected<ranges::iterator_t<R>, Proj>>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(3)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirect_result_t<F&, projected<I1, Proj1>, projected<I2, Proj2>>>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(4)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirectly_writable<O, indirect_result_t<F&, projected<ranges::iterator_t<R1>, Proj1>, projected<ranges::iterator_t<R2>, Proj2>>>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommitted here for readability)"))}d.isMDXComponent=!0},46070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>b,frontMatter:()=>d,metadata:()=>m,toc:()=>g});var r=n(87462),a=n(67294),l=n(3905),s=n(55059),o=n(22307),i=n(99801),p=n(68488),c=n(16009);const d={title:"ranges::transform algorithm",sidebar_label:"ranges::transform(  )",description:"ranges::transform algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","transform","map"],cppreference_origin_rel:"w/cpp/algorithm/ranges/transform"},u=void 0,m={unversionedId:"std/algo/ranges/transform",id:"std/algo/ranges/transform",title:"ranges::transform algorithm",description:"ranges::transform algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/transform.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/transform",permalink:"/CppLangNet/docs/std/algo/ranges/transform",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/transform.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"transform",permalink:"/CppLangNet/docs/tags/transform"},{label:"map",permalink:"/CppLangNet/docs/tags/map"}],version:"current",frontMatter:{title:"ranges::transform algorithm",sidebar_label:"ranges::transform(  )",description:"ranges::transform algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","transform","map"],cppreference_origin_rel:"w/cpp/algorithm/ranges/transform"},sidebar:"defaultSidebar",previous:{title:"ranges::move_backward(  )",permalink:"/CppLangNet/docs/std/algo/ranges/move_backward"},next:{title:"ranges::reverse(  )",permalink:"/CppLangNet/docs/std/algo/ranges/reverse"}},f={},g=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],k={toc:g};function b(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdrangestransform-algorithm"},"std::ranges::transform() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":{simplified:(0,l.kt)(c.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,l.kt)(p.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,l.kt)("p",null,"With the helper types defined as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template< class I, class O >\nusing unary_transform_result = ranges::in_out_result<I, O>;\n\ntemplate< class I1, class I2, class O >\nusing binary_transform_result = ranges::in_in_out_result<I1, I2, O>;\n")),(0,l.kt)("p",null,"Applies the given function to a range and stores the result in another range, beginning at ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," The unary operation ",(0,l.kt)("inlineCode",{parentName:"p"},"op")," is applied to the range defined by ",(0,l.kt)("strong",{parentName:"p"},"[ first1; last1 )")," (after projecting with the projection ",(0,l.kt)("inlineCode",{parentName:"p"},"proj"),").")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"p"},"r")," as the source range, as if using ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(3)")," The binary operation ",(0,l.kt)("inlineCode",{parentName:"p"},"binary_op")," is applied to pairs of elements from two ranges:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"One defined by ",(0,l.kt)("strong",{parentName:"li"},"[ first1; last1 )"),"."),(0,l.kt)("li",{parentName:"ul"},"The other defined by ",(0,l.kt)("strong",{parentName:"li"},"[ first2; last2 )")," (after respectively projecting with the projections ",(0,l.kt)("inlineCode",{parentName:"li"},"proj1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"proj2"),")."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(4)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(3)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"p"},"r1")," as the first source range, as if using ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),", and similarly for ",(0,l.kt)("inlineCode",{parentName:"p"},"r2"),"."))),(0,l.kt)("p",null,"The function-like entities described on this page are ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,l.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first range of elements to transform (iterator, sentinel pair)."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"r")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"r1")," "),mdxType:"Symbol"},"The first range of elements to transform (ranges)."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second range of elements to transform (iterator, sentinel pair)."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r2"),mdxType:"Symbol"},"The second range of elements to transform (range)."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"result"),mdxType:"Symbol"},"The beginning of the destination range, may be equal to ",(0,l.kt)("code",null,"first1")," or ",(0,l.kt)("code",null,"first2"),"."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"op")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"binary_op")," "),mdxType:"Symbol"},"Operation to apply to the projected element(s)."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements in the first range."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements in the second range.")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1 - 2)")," Returns a ",(0,l.kt)("inlineCode",{parentName:"li"},"unary_transform_result")," which contains an input iterator equal to ",(0,l.kt)("inlineCode",{parentName:"li"},"last")," and an output iterator to the element past the last element transformed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(3 - 4)")," Returns a ",(0,l.kt)("inlineCode",{parentName:"li"},"binary_transform_result")," contains input iterators to last transformed elements from ranges ",(0,l.kt)("strong",{parentName:"li"},"[ first1; last1 )")," and ",(0,l.kt)("strong",{parentName:"li"},"[ first2; last2 )")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"in1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"in2")," respectively, and the output iterator to the element past the last element transformed as out.")),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1 - 2)")," Exactly ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::distance(first1, last1)")," applications of ",(0,l.kt)("inlineCode",{parentName:"li"},"op")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"proj"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(3 - 4)")," Exactly ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::min(ranges::distance(first1, last1), ranges::distance(first2, last2))")," applications of ",(0,l.kt)("inlineCode",{parentName:"li"},"binary_op")," and projections.")),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"transform(1) and transform(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct transform_fn\n{\n    // First version\n    template<std::input_iterator I, std::sentinel_for<I> S, std::weakly_incrementable O,\n        std::copy_constructible F, class Proj = std::identity>\n            requires std::indirectly_writable<O, std::indirect_result_t<F&, std::projected<I, Proj>>>\n            constexpr ranges::unary_transform_result<I, O>\n            operator()(I first1, S last1, O result, F op, Proj proj = {}) const\n            {\n                for (; first1 != last1; ++first1, (void)++result)\n                    *result = std::invoke(op, std::invoke(proj, *first1));\n\n                return {first1, result};\n            }\n\n    // Second version\n    template<ranges::input_range R, std::weakly_incrementable O,\n        std::copy_constructible F, class Proj = std::identity>\n            requires std::indirectly_writable<O,\n        std::indirect_result_t<F&, std::projected<ranges::iterator_t<R>, Proj>>>\n            constexpr ranges::unary_transform_result<ranges::borrowed_iterator_t<R>, O>\n            operator()(R&& r, O result, F op, Proj proj = {}) const\n            {\n                return (*this)(ranges::begin(r), ranges::end(r), result, std::ref(op), std::ref(proj));\n            }\n\n    // Third version\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n        std::input_iterator I2, std::sentinel_for<I2> S2,\n        std::weakly_incrementable O,\n        std::copy_constructible F,\n        class Proj1 = std::identity, class Proj2 = std::identity>\n            requires std::indirectly_writable<O,\n        std::indirect_result_t<F&,\n        std::projected<I1, Proj1>,\n        std::projected<I2, Proj2>>>\n            constexpr ranges::binary_transform_result<I1, I2, O>\n            operator()(I1 first1, S1 last1, I2 first2, S2 last2, O result,\n                    F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {}) const\n            {\n                for (; first1 != last1 && first2 != last2; ++first1, (void)++first2, (void)++result)\n                    *result = std::invoke(binary_op,\n                            std::invoke(proj1, *first1),\n                            std::invoke(proj2, *first2));\n\n                return {first1, first2, result};\n            }\n\n    // Fourth version\n    template<ranges::input_range R1, ranges::input_range R2,\n        std::weakly_incrementable O, std::copy_constructible F,\n        class Proj1 = std::identity, class Proj2 = std::identity>\n            requires std::indirectly_writable<O,\n        std::indirect_result_t<F&,\n        std::projected<ranges::iterator_t<R1>, Proj1>,\n        std::projected<ranges::iterator_t<R2>, Proj2>>>\n            constexpr ranges::binary_transform_result<ranges::borrowed_iterator_t<R1>,\n        ranges::borrowed_iterator_t<R2>, O>\n            operator()(R1&& r1, R2&& r2, O result,\n                    F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {}) const\n            {\n                return (*this)(ranges::begin(r1), ranges::end(r1),\n                        ranges::begin(r2), ranges::end(r2),\n                        result, std::ref(binary_op),\n                        std::ref(proj1), std::ref(proj2));\n            }\n};\n\ninline constexpr transform_fn transform;\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ranges::transform")," does not guarantee in-order application of ",(0,l.kt)("inlineCode",{parentName:"p"},"op")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"binary_op"),".  "),(0,l.kt)("p",null,"To apply a function to a sequence in-order or to apply a function that modifies the elements of a sequence, use ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::for_each"),"."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("p",null,"The following code uses ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::transform")," to convert a string in place to uppercase using the ",(0,l.kt)("inlineCode",{parentName:"p"},"std::toupper")," function and then transforms each char to its ordinal value.  "),(0,l.kt)("p",null,"Then ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::transform")," with a projection is used to transform elements of ",(0,l.kt)("inlineCode",{parentName:"p"},"std::vector<Foo>")," into chars to fill a ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,l.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <cctype>\n#include <functional>\n#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    std::string s {\"hello\"};\n\n    namespace ranges = std::ranges;\n\n    ranges::transform(s.begin(), s.end(), s.begin(),\n                      [](unsigned char c) -> unsigned char { return std::toupper(c); });\n\n    std::vector<std::size_t> ordinals;\n    ranges::transform(s, std::back_inserter(ordinals),\n                      [](unsigned char c) -> std::size_t { return c; });\n\n    std::cout << s << ':';\n    for (auto ord : ordinals)\n        std::cout << ' ' << ord;\n\n    ranges::transform(ordinals, ordinals, ordinals.begin(), std::plus {});\n\n    std::cout << '\\n';\n    for (auto ord : ordinals)\n        std::cout << ord << ' ';\n    std::cout << '\\n';\n\n    struct Foo\n    {\n        char bar;\n    };\n    const std::vector<Foo> f = { {'h'},{'e'},{'l'},{'l'},{'o'} };\n    std::string bar;\n    ranges::transform(f, std::back_inserter(bar), &Foo::bar);\n    std::cout << bar << '\\n';\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"HELLO: 72 69 76 76 79\n144 138 152 152 158\nhello\n")))))}b.isMDXComponent=!0}}]);