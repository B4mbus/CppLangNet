"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[47554,42992,49451],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(86010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>h});var r=n(87462),a=n(67294),s=n(86010),l=n(12466),o=n(76775),i=n(91980),c=n(67392),p=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=u(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[i,c]=g({queryString:n,groupId:r}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),f=(()=>{const e=i??d;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),b(e)}),[c,b,s]),tabValues:s}}var f=n(72389);const k="tabList__CuJ",v="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),u=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==o&&(d(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:u},l,{className:(0,s.Z)("tabs__item",v,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function C(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function _(e){const t=b(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",k)},a.createElement(N,(0,r.Z)({},e,t)),a.createElement(C,(0,r.Z)({},e,t)))}function h(e){const t=(0,f.Z)();return a.createElement(_,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(87462),a=n(67294);const s="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:s,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(74866),s=n(85162),l=n(99372),o=n(72412);const i={};function c(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:c.default||0==t},c.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:i.smallTabs},r.createElement(s.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(c.simplified)),r.createElement(s.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(c.detailed)))):c.value):r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,o.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var r=n(67294),a=n(72412);const s={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:s.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:s.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:s.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:s.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:s.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function p(e){r.useContext(l.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?r.createElement("span",{className:s[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:s.symbolProp},(e=>{const t=i(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:s.symbolName},t),r.createElement("td",{className:s.symbolDesc},(0,a.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>g,U6:()=>u,OS:()=>m});var r=n(67294),a=n(95999);const s="markedText_c6kK",l="since_c1Q3",o="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:s+(n?" "+n:"")},t)}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:l},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:o},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",r.createElement(a.Z,null,"deprecated")),p.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),p.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),p.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),p.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),p.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),p.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),p.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),p.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),p.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),p.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),p.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),p.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),p.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),p.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),p.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),p.set("removed-",r.createElement(a.Z,null,"deleted")),p.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),p.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),p.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),p.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),p.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),p.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),p.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},80818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,o={unversionedId:"std/algo/ranges/_codes/stable_sort/since-cpp20-detailed",id:"std/algo/ranges/_codes/stable_sort/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/stable_sort",slug:"/std/algo/ranges/_codes/stable_sort/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::random_access_iterator I,\n  std::sentinel_for<I> S,\n  class Comp = ranges::less,\n  class Proj = std::identity\n>\n  requires std::sortable<I, Comp, Proj>\nconstexpr I stable_sort( I first, S last, Comp comp = {}, Proj proj = {} );\n\n// (2)\ntemplate<\n  ranges::random_access_range R,\n  class Comp = ranges::less,\n  class Proj = std::identity\n>\n  requires std::sortable<ranges::iterator_t<R>, Comp, Proj>\nranges::borrowed_iterator_t<R>\n    stable_sort( R&& r, Comp comp = {}, Proj proj = {} );\n")))}d.isMDXComponent=!0},10663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,o={unversionedId:"std/algo/ranges/_codes/stable_sort/since-cpp20-simplified",id:"std/algo/ranges/_codes/stable_sort/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/stable_sort",slug:"/std/algo/ranges/_codes/stable_sort/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/stable_sort/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nI stable_sort( I first, S last, Comp comp = {}, Proj proj = {} );\n\n// (2)\nranges::borrowed_iterator_t<R> stable_sort( R&& r, Comp comp = {}, Proj proj = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::random_access_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::random_access_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp")," template arguments have, the following default types for all overloads: ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::less"),"."),(0,a.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"sortable<I, Comp, Proj>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"sortable<ranges::iterator_t<R>, Comp, Proj>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommitted here for readability)"))}d.isMDXComponent=!0},46649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>k,frontMatter:()=>d,metadata:()=>m,toc:()=>b});var r=n(87462),a=n(67294),s=n(3905),l=n(55059),o=n(22307),i=n(99801),c=n(80818),p=n(10663);const d={title:"ranges::stable_sort algorithm",sidebar_label:"ranges::stable_sort(  )",description:"ranges::stable_sort algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","sort","stable_sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/ranges/stable_sort"},u=void 0,m={unversionedId:"std/algo/ranges/stable_sort",id:"std/algo/ranges/stable_sort",title:"ranges::stable_sort algorithm",description:"ranges::stable_sort algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/stable_sort.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/stable_sort",permalink:"/CppLangNet/docs/std/algo/ranges/stable_sort",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/stable_sort.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"sort",permalink:"/CppLangNet/docs/tags/sort"},{label:"stable_sort",permalink:"/CppLangNet/docs/tags/stable-sort"},{label:"ascending",permalink:"/CppLangNet/docs/tags/ascending"},{label:"order",permalink:"/CppLangNet/docs/tags/order"}],version:"current",frontMatter:{title:"ranges::stable_sort algorithm",sidebar_label:"ranges::stable_sort(  )",description:"ranges::stable_sort algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","sort","stable_sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/ranges/stable_sort"},sidebar:"defaultSidebar",previous:{title:"ranges::sort(  )",permalink:"/CppLangNet/docs/std/algo/ranges/sort"},next:{title:"ranges::partial_sort(  )",permalink:"/CppLangNet/docs/std/algo/ranges/partial_sort"}},g={},b=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],f={toc:b};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stdrangesstable_sort-algorithm"},"std::ranges::stable_sort() algorithm"),(0,s.kt)(i.Z,{content:{"since-cpp20":{simplified:(0,s.kt)(p.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,s.kt)(c.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,s.kt)("p",null,"Sorts the elements in the range [",(0,s.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last"),") in non-descending order."),(0,s.kt)("p",null,"The order of equivalent elements is stable, i.e. ",(0,s.kt)("strong",{parentName:"p"},"guaranteed")," to be preserved."),(0,s.kt)("p",null,"A sequence is sorted with respect to a comparator ",(0,s.kt)("inlineCode",{parentName:"p"},"comp")," if for any iterator ",(0,s.kt)("inlineCode",{parentName:"p"},"it")," pointing to the sequence\nand any non-negative integer ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," such that ",(0,s.kt)("inlineCode",{parentName:"p"},"it + n")," is a valid iterator pointing to an element of the sequence,\n",(0,s.kt)("inlineCode",{parentName:"p"},"std::invoke(comp, std::invoke(proj, *(it + n)), std::invoke(proj, *it)")," evaluates to ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")," Elements are compared using the given binary comparison function ",(0,s.kt)("inlineCode",{parentName:"p"},"comp"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,s.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,s.kt)("inlineCode",{parentName:"p"},"r")," as the source range, as if using ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"last"),"."))),(0,s.kt)("p",null,"The function-like entities described on this page are ",(0,s.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,s.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)(l.ZP,{mdxType:"SymbolTable"},(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(a.Fragment,null," ",(0,s.kt)("code",null,"first")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range to sort."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"r"),mdxType:"Symbol"},"The range to sort."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"comp"),mdxType:"Symbol"},"Comparison object to apply to the projected elements."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"proj"),mdxType:"Symbol"},"Projection to apply to the elements.")),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("p",null,"An iterator equal to ",(0,s.kt)("inlineCode",{parentName:"p"},"last"),"."),(0,s.kt)("h3",{id:"complexity"},"Complexity"),(0,s.kt)("p",null,"Given ",(0,s.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)"),":"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"N ","*"," log^2(N)")," comparisons and twice as many projections."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"N ","*"," log (N)")," comparisons and twice as many projections, if extra memory is available;"),(0,s.kt)("h3",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"(none)")),(0,s.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"stable_sort(1) and stable_sort(2)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct stable_sort_fn\n{\n    template<std::random_access_iterator I, std::sentinel_for<I> S,\n             class Comp = ranges::less, class Proj = std::identity>\n    requires std::sortable<I, Comp, Proj>\n    constexpr //< since C++26\n    I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const\n    {\n        auto count = ranges::distance(first, last);\n        auto mid = first + count / 2;\n        auto last_it = first + count;\n\n        if (count <= 1)\n            return last_it;\n\n        (*this)(first, mid, std::ref(comp), std::ref(proj));\n        (*this)(mid, last_it, std::ref(comp), std::ref(proj));\n\n        ranges::inplace_merge(first, mid, last_it);\n\n        return last_it;\n    }\n\n    template<ranges::random_access_range R, class Comp = ranges::less,\n             class Proj = std::identity>\n    requires std::sortable<ranges::iterator_t<R>, Comp, Proj>\n    constexpr //< since C++26\n    ranges::borrowed_iterator_t<R> operator()(R&& r, Comp comp = {}, Proj proj = {}) const\n    {\n        return (*this)(ranges::begin(r), ranges::end(r), std::move(comp), std::move(proj));\n    }\n};\n\ninline constexpr stable_sort_fn stable_sort {};\n"))),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <array>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n\nvoid print(auto const& seq)\n{\n    for (auto const& elem : seq)\n        std::cout << elem << \' \';\n    std::cout << \'\\n\';\n}\n\nstruct Particle\n{\n    std::string name; double mass; // MeV\n    friend std::ostream& operator<<(std::ostream& os, Particle const& p)\n    {\n        return os << \'\\n\' << std::left << std::setw(8) << p.name << " : " << p.mass;\n    }\n};\n\nint main()\n{\n    std::array s {5, 7, 4, 2, 8, 6, 1, 9, 0, 3};\n\n    // sort using the default operator<\n    std::ranges::stable_sort(s);\n    print(s);\n\n    // sort using a standard library compare function object\n    std::ranges::stable_sort(s, std::ranges::greater());\n    print(s);\n\n    // sort using a custom function object\n    struct\n    {\n        bool operator()(int a, int b) const\n        {\n            return a < b;\n        }\n    } customLess;\n    std::ranges::stable_sort(s.begin(), s.end(), customLess);\n    print(s);\n\n    // sort using a lambda expression\n    std::ranges::stable_sort(s, [](int a, int b) { return a > b; });\n    print(s);\n\n    // sort with projection\n    Particle particles[]\n    {\n        {"Electron", 0.511}, {"Muon", 105.66}, {"Tau", 1776.86},\n        {"Positron", 0.511}, {"Proton", 938.27}, {"Neutron", 939.57}\n    };\n    print(particles);\n    std::ranges::stable_sort(particles, {}, &Particle::name); //< sort by name\n    print(particles);\n    std::ranges::stable_sort(particles, {}, &Particle::mass); //< sort by mass\n    print(particles);\n}\n'))),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"0 1 2 3 4 5 6 7 8 9\n9 8 7 6 5 4 3 2 1 0\n0 1 2 3 4 5 6 7 8 9\n9 8 7 6 5 4 3 2 1 0\n\nElectron : 0.511\nMuon     : 105.66\nTau      : 1776.86\nPositron : 0.511\nProton   : 938.27\nNeutron  : 939.57\n\nElectron : 0.511\nMuon     : 105.66\nNeutron  : 939.57\nPositron : 0.511\nProton   : 938.27\nTau      : 1776.86\n\nElectron : 0.511\nPositron : 0.511\nMuon     : 105.66\nProton   : 938.27\nNeutron  : 939.57\nTau      : 1776.86\n")))))}k.isMDXComponent=!0}}]);