"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[80859],{14064:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),r=n(67294),l=n(86010),o=n(12466),s=n(76775),i=n(91980),c=n(67392),p=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[i,c]=g({queryString:n,groupId:a}),[u,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=i??u;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),k(e)}),[c,k,l]),tabValues:l}}var h=n(72389);const f="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==s&&(u(t),i(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},o,{className:(0,l.Z)("tabs__item",b,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=k(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",f)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function C(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(87462),r=n(67294);const l="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),l=n(85162),o=n(99372),s=n(72412);const i={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(l.Z,{value:n,label:o.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(c.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(c.detailed)))):c.value):a.createElement(l.Z,{value:n,label:o.gJ.get(n),default:0==t},(0,s.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function p(e){a.useContext(o.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(44996),l=n(34386),o=n(72412);const s="TooltipContent_Lvru",i="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let u=c||"clamp(250px, 25vw, 800px)";"string"==typeof u&&u.endsWith("vw")&&(u=`clamp(250px, ${u}, 800px)`);const m="function"==typeof n?a.createElement(n):n,d=(t||"").startsWith("/")?(0,r.Z)(t):t,g=t?a.createElement("a",{href:d,target:"_blank",rel:"noreferrer"},p):p;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:u}}},title:a.createElement("span",{className:i},(0,o.Z)(m)),placement:"top",arrow:!0},a.createElement("span",{className:s},g))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>g,U6:()=>m,OS:()=>d});var a=n(67294),r=n(95999);const l="markedText_c6kK",o="since_c1Q3",s="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function u(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return a.createElement(u,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`since-${n}`),")")))}function d(e){let{children:t,v:n}=e;return a.createElement(u,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return a.createElement(u,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",a.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),p.set("removed-",a.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},76704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal_range/since-cpp20",id:"std/algo/ordinary/_codes/equal_range/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal_range/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/equal_range",slug:"/std/algo/ordinary/_codes/equal_range/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal_range/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal_range/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class ForwardIt, class T >\nconstexpr std::pair<ForwardIt, ForwardIt> equal_range( ForwardIt first, ForwardIt last, const T& value );\n\n// (2)\ntemplate< class ForwardIt, class T, class Compare >\nconstexpr std::pair<ForwardIt, ForwardIt> equal_range( ForwardIt first, ForwardIt last, const T& value, Compare comp );\n")))}u.isMDXComponent=!0},83652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/equal_range/until-cpp20",id:"std/algo/ordinary/_codes/equal_range/until-cpp20",title:"until-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/equal_range/until-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/equal_range",slug:"/std/algo/ordinary/_codes/equal_range/until-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/equal_range/until-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/equal_range/until-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class ForwardIt, class T >\nstd::pair<ForwardIt, ForwardIt> equal_range( ForwardIt first, ForwardIt last, const T& value );\n\n// (2)\ntemplate< class ForwardIt, class T, class Compare >\nstd::pair<ForwardIt, ForwardIt> equal_range( ForwardIt first, ForwardIt last, const T& value, Compare comp );\n")))}u.isMDXComponent=!0},53564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>d,default:()=>b,frontMatter:()=>m,metadata:()=>g,toc:()=>h});var a=n(87462),r=n(67294),l=n(3905),o=n(55059),s=n(22307),i=n(99801),c=(n(18510),n(99372)),p=(n(14064),n(83652)),u=n(76704);const m={title:"equal_range algorithm",sidebar_label:"equal_range(  )",description:"equal_range algorithm C++ documentation",hide_title:!0,tags:["algorithm","equal_range","bound","binary_search"],cppreference_origin_rel:"w/cpp/algorithm/equal_range"},d=void 0,g={unversionedId:"std/algo/ordinary/equal_range",id:"std/algo/ordinary/equal_range",title:"equal_range algorithm",description:"equal_range algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/equal_range.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/equal_range",permalink:"/CppLangNet/docs/std/algo/ordinary/equal_range",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/equal_range.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"equal_range",permalink:"/CppLangNet/docs/tags/equal-range"},{label:"bound",permalink:"/CppLangNet/docs/tags/bound"},{label:"binary_search",permalink:"/CppLangNet/docs/tags/binary-search"}],version:"current",frontMatter:{title:"equal_range algorithm",sidebar_label:"equal_range(  )",description:"equal_range algorithm C++ documentation",hide_title:!0,tags:["algorithm","equal_range","bound","binary_search"],cppreference_origin_rel:"w/cpp/algorithm/equal_range"},sidebar:"defaultSidebar",previous:{title:"upper_bound(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/upper_bound"},next:{title:"ranges::includes(  )",permalink:"/CppLangNet/docs/std/algo/ranges/includes"}},k={},h=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],f={toc:h};function b(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdequal_range-algorithm"},"std::equal_range() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":(0,l.kt)(u.default,{mdxType:"Signature_SinceCpp20"}),"until-cpp20":(0,l.kt)(p.default,{mdxType:"Signature_UntilCpp20"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Returns a range containing all elements equivalent to value in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),")."),(0,l.kt)("p",null,"The range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") must be at least partially ordered with respect to ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", i.e. it must satisfy all of the following requirements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Partitioned with respect to ",(0,l.kt)("inlineCode",{parentName:"li"},"element < value")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"comp(element, value)")," (that is, all elements for which the expression is ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," precedes all elements for which the expression is ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},"Partitioned with respect to ",(0,l.kt)("inlineCode",{parentName:"li"},"!(value < element)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"!comp(value, element)")),(0,l.kt)("li",{parentName:"ul"},"For all elements, if ",(0,l.kt)("inlineCode",{parentName:"li"},"element < value")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"comp(element, value)")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," then ",(0,l.kt)("inlineCode",{parentName:"li"},"!(value < element)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"!comp(value, element)")," is also ",(0,l.kt)("inlineCode",{parentName:"li"},"true"))),(0,l.kt)("p",null,"A fully-sorted range meets these criteria."),(0,l.kt)("p",null,"The returned view is constructed from two iterators:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Pointing to the first element that is ",(0,l.kt)("strong",{parentName:"li"},"not less")," than ",(0,l.kt)("inlineCode",{parentName:"li"},"value"),"."),(0,l.kt)("li",{parentName:"ol"},"Pointing to the first element ",(0,l.kt)("strong",{parentName:"li"},"greater")," than ",(0,l.kt)("inlineCode",{parentName:"li"},"value"),".")),(0,l.kt)("p",null,"The first iterator may be alternatively obtained with ",(0,l.kt)("inlineCode",{parentName:"p"},"std::ranges::lower_bound()"),", the second - with ",(0,l.kt)("inlineCode",{parentName:"p"},"std::ranges::upper_bound()"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1)")," Uses ",(0,l.kt)("inlineCode",{parentName:"li"},"operator<")," to compare the elements."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(2)")," Uses the given comparison function ",(0,l.kt)("inlineCode",{parentName:"li"},"comp"),".")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The partially-ordered range to examine."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"value"),mdxType:"Symbol"},"The value to compare the elements to."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"comp"),mdxType:"Symbol"},(0,l.kt)("p",null,"Comparison function object (i.e. an object that satisfies the requirements of ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),").\nThe signature of the comparison function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool cmp(const Type1 &a, const Type2 &b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),", but must not modify arguments."),(0,l.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,l.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,l.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,l.kt)(c.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,l.kt)("code",null,"Type1")," unless for ",(0,l.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,l.kt)("li",{parentName:"ul"},"The types ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"RandomIt")," can be implicitly converted to both of them.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"ForwardIt"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyForwardIterator"},"LegacyForwardIterator")),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"Compare"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/BinaryPredicate"},"BinaryPredicate"))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Compare")," is not required to satisfy ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),"."),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::pair"))," containing a pair of iterators defining the wanted range:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Pointing to the first element that is ",(0,l.kt)("strong",{parentName:"li"},"not less")," than ",(0,l.kt)("inlineCode",{parentName:"li"},"value"),"."),(0,l.kt)("li",{parentName:"ol"},"Pointing to the first element ",(0,l.kt)("strong",{parentName:"li"},"greater")," than ",(0,l.kt)("inlineCode",{parentName:"li"},"value"),".")),(0,l.kt)("p",null,"If there are no elements ",(0,l.kt)("strong",{parentName:"p"},"not less")," than ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"last")," is returned as the first element.",(0,l.kt)("br",{parentName:"p"}),"\n","Similarly if there are no elements ",(0,l.kt)("strong",{parentName:"p"},"greater")," than ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"last")," is returned as the second element."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"The number of comparisons performed is logarithmic in the distance between ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"last")," (at most `log^2(last - first) + O(1) comparisons)."),(0,l.kt)("p",null,"However, for non-",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/LegacyRandomAccessIterators"},"LegacyRandomAccessIterators"),", the number of iterator increments is linear."),(0,l.kt)("p",null,"Notably, ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/maps/map"},(0,l.kt)("inlineCode",{parentName:"a"},"std::map")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/maps/multimap"},(0,l.kt)("inlineCode",{parentName:"a"},"std::multimap")),",\n",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/sets/set"},(0,l.kt)("inlineCode",{parentName:"a"},"std::set")),", and ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/sets/multiset"},(0,l.kt)("inlineCode",{parentName:"a"},"std::multiset"))," iterators are not random access,\nand so their member ",(0,l.kt)("inlineCode",{parentName:"p"},"equal_range()")," functions should be preferred."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"equal_range (1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class ForwardIt, class T>\nstd::pair<ForwardIt, ForwardIt>\n    equal_range(ForwardIt first, ForwardIt last, const T& value)\n{\n    return std::make_pair(std::lower_bound(first, last, value),\n                          std::upper_bound(first, last, value));\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"equal_range (2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class ForwardIt, class T, class Compare>\nstd::pair<ForwardIt, ForwardIt>\n    equal_range(ForwardIt first, ForwardIt last, const T& value, Compare comp)\n{\n    return std::make_pair(std::lower_bound(first, last, value, comp),\n                          std::upper_bound(first, last, value, comp));\n}\n"))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <vector>\n\nstruct S\n{\n    int number;\n    char name;\n    // note: name is ignored by this comparison operator\n    bool operator<(const S& s) const { return number < s.number; }\n};\n\nstruct Comp\n{\n    bool operator()(const S& s, int i) const { return s.number < i; }\n    bool operator()(int i, const S& s) const { return i < s.number; }\n};\n\nint main()\n{\n    // note: not ordered, only partitioned w.r.t. S defined below\n    const std::vector<S> vec {{1, 'A'}, {2, 'B'}, {2, 'C'},\n                              {2, 'D'}, {4, 'G'}, {3, 'F'}};\n    const S value {2, '?'};\n\n    std::cout << \"Compare using S::operator<(): \";\n    const auto p = std::equal_range(vec.begin(), vec.end(), value);\n\n    for (auto i = p.first; i != p.second; ++i)\n        std::cout << i->name << ' ';\n\n    std::cout << \"\\n\" \"Using heterogeneous comparison: \";\n    const auto p2 = std::equal_range(vec.begin(), vec.end(), 2, Comp{});\n\n    for (auto i = p2.first; i != p2.second; ++i)\n        std::cout << i->name << ' ';\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"Compare using S::operator<(): B C D \nUsing heterogeneous comparison: B C D\n")))))}b.isMDXComponent=!0}}]);