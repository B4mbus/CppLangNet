"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[20351],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),s=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),f=r,m=d["".concat(u,".").concat(f)]||d[f]||c[f]||i;return t?o.createElement(m,a(a({ref:n},p),{},{components:t})):o.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},92328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=t(87462),r=(t(67294),t(3905));const i={},a=void 0,l={unversionedId:"std/algo/_codes/niebloids/qualified-unqualified-lookup",id:"std/algo/_codes/niebloids/qualified-unqualified-lookup",title:"qualified-unqualified-lookup",description:"",source:"@site/content/docs/std/algo/_codes/niebloids/qualified-unqualified-lookup.mdx",sourceDirName:"std/algo/_codes/niebloids",slug:"/std/algo/_codes/niebloids/qualified-unqualified-lookup",permalink:"/CppLangNet/docs/std/algo/_codes/niebloids/qualified-unqualified-lookup",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/niebloids/qualified-unqualified-lookup.mdx",tags:[],version:"current",frontMatter:{}},u={},s=[],p={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <cstdio>\n#include <print>\n\nnamespace my_ns\n{\n  enum class MyEnum\n  {\n    One = 1,\n    Two = 2\n  };\n\n  auto print_me(MyEnum my_enum) -> void\n  {\n    switch(my_enum) {\n      case MyEnum::One: std::print("One :D\\n"); break;\n      case MyEnum::Two: std::print("One :D\\n"); break;\n      default: std::print("Boooo D:\\n");\n    }\n  }\n}\n\nstruct Hello\n{\n  auto world() const -> std::string\n  {\n    return "Helo, world!";\n  }\n};\n\nauto main() -> int\n{\n  {\n    // auto value = my_ns::x; // Qualified lookup\n    // The above fails, because `x` is not present in my_ns namespace\n\n    // krabby_patty::patty_krabby(mr_krabs::secret_recipe); // Qualified lookup\n    // The above fails, because namespaces `krabby_patty` and `mr_krabs` are not present\n\n    std::print("Hello {}!", "World"); // Qualified lookup\n\n    auto value = my_ns::MyEnum::One; // Qualified lookup\n\n    ::printf("Hello %s!", "World"); // Qualified lookup\n    // If there\'s nothing to the left of the scope resolution operator, it\'s refering to the global namespace\n  }\n\n  Hello hello; // Unqualified lookup to Hello, which is found in global scope\n\n  {\n    // auto value = x; // Unqualified lookup, no scope resolution operator\n    // The above fails, because `x` is nowhere to be found\n\n    // foo(1, 2, 3); // Unqualified lookup, no scope resolution operator\n    // The above fails, because `foo` is nowhere to be found\n\n    std::print("{}", hello.world()); // Qualified lookup to `std::print`, unqualified lookup to `hello`, which is found in upper scope\n    // Unqualified searches starting from the current scope up\n\n    print_me(my_ns::MyEnum::One);\n    // Unqualified lookup to `print_me`, qualified lookup to my_ns::MyEnum::One\n    // But wait... print_me is not present in this scope, upper scope, nor global scope, how does that work??\n    // Is it a bug, magic, or maybe... ADL? :P\n  }\n}\n')))}c.isMDXComponent=!0}}]);