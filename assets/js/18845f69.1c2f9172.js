"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[7954,31228,81588],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),a=n(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(87462),a=n(67294),l=n(86010),i=n(12466),o=n(76775),s=n(91980),c=n(67392),p=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=m(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[s,c]=g({queryString:n,groupId:r}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),b=(()=>{const e=s??d;return u({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var b=n(72389);const v="tabList__CuJ",k="tabItem_LNqP";function h(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==o&&(d(t),s(r))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:m},i,{className:(0,l.Z)("tabs__item",k,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function C(e){const t=f(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",v)},a.createElement(h,(0,r.Z)({},e,t)),a.createElement(_,(0,r.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return a.createElement(C,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(87462),a=n(67294);const l="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(74866),l=n(85162),i=n(99372),o=n(72412);const s={};function c(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?r.createElement(l.Z,{value:n,label:i.gJ.get(n),default:c.default||0==t},c.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:s.smallTabs},r.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(c.simplified)),r.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(c.detailed)))):c.value):r.createElement(l.Z,{value:n,label:i.gJ.get(n),default:0==t},(0,o.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var r=n(67294),a=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var i=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},s=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>s(e).Order<s(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function p(e){r.useContext(i.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?r.createElement("span",{className:l[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:l.symbolProp},(e=>{const t=s(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:l.symbolName},t),r.createElement("td",{className:l.symbolDesc},(0,a.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>g,U6:()=>m,OS:()=>u});var r=n(67294),a=n(95999);const l="markedText_c6kK",i="since_c1Q3",o="until_jXK6",s="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:o},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(d,{className:s},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",r.createElement(a.Z,null,"deprecated")),p.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),p.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),p.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),p.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),p.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),p.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),p.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),p.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),p.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),p.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),p.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),p.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),p.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),p.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),p.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),p.set("removed-",r.createElement(a.Z,null,"deleted")),p.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),p.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),p.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),p.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),p.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),p.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),p.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},45251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={},i=void 0,o={unversionedId:"std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed",id:"std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/inplace_merge",slug:"/std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::bidirectional_iterator I,\n  std::sentinel_for<I> S,\n  class Comp = ranges::less, class Proj = std::identity\n>\n  requires std::sortable<I, Comp, Proj>\nI inplace_merge( I first, I middle, S last, Comp comp = {}, Proj proj = {} );\n\n// (2)\ntemplate<\n  ranges::bidirectional_range R,\n  class Comp = ranges::less,\n  class Proj = std::identity\n>\n  requires std::sortable<ranges::iterator_t<R>, Comp, Proj>\nranges::borrowed_iterator_t<R>\n    inplace_merge( R&& r, ranges::iterator_t<R> middle, Comp comp = {}, Proj proj = {} );\n")))}d.isMDXComponent=!0},71559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={},i=void 0,o={unversionedId:"std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified",id:"std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/inplace_merge",slug:"/std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/inplace_merge/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nI inplace_merge( I first, I middle, S last, Comp comp = {}, Proj proj = {} );\n\n// (2)\nranges::borrowed_iterator_t<R>\n    inplace_merge( R&& r, ranges::iterator_t<R> middle, Comp comp = {}, Proj proj = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::bidirectional_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R1")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::bidirectional_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp")," template arguments have the following default types: ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::less")," for all overloads."),(0,a.kt)("p",null,"Additionaly, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sortable<I, Comp, Proj>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sortable<ranges::iterator_t<R>, Comp, Proj>"))))}d.isMDXComponent=!0},3549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>b,frontMatter:()=>p,metadata:()=>m,toc:()=>g});var r=n(87462),a=(n(67294),n(3905)),l=n(55059),i=n(22307),o=n(99801),s=n(45251),c=n(71559);const p={title:"ranges::inplace_merge algorithm",sidebar_label:"ranges::inplace_merge(  )",description:"ranges::inplace_merge algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","merge","inplace_merge"],cppreference_origin_rel:"w/cpp/algorithm/ranges/inplace_merge"},d=void 0,m={unversionedId:"std/algo/ranges/inplace_merge",id:"std/algo/ranges/inplace_merge",title:"ranges::inplace_merge algorithm",description:"ranges::inplace_merge algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/inplace_merge.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/inplace_merge",permalink:"/CppLangNet/docs/std/algo/ranges/inplace_merge",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/inplace_merge.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"merge",permalink:"/CppLangNet/docs/tags/merge"},{label:"inplace_merge",permalink:"/CppLangNet/docs/tags/inplace-merge"}],version:"current",frontMatter:{title:"ranges::inplace_merge algorithm",sidebar_label:"ranges::inplace_merge(  )",description:"ranges::inplace_merge algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","merge","inplace_merge"],cppreference_origin_rel:"w/cpp/algorithm/ranges/inplace_merge"},sidebar:"defaultSidebar",previous:{title:"ranges::merge(  )",permalink:"/CppLangNet/docs/std/algo/ranges/merge"},next:{title:"merge(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/merge"}},u={},g=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],f={toc:g};function b(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stdrangesinplace_merge-algorithm"},"std::ranges::inplace_merge() algorithm"),(0,a.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,a.kt)(c.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,a.kt)(s.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,a.kt)("p",null,"Merges two consecutive sorted ranges [",(0,a.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"middle"),") and [",(0,a.kt)("inlineCode",{parentName:"p"},"middle"),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"last"),") into one sorted range [",(0,a.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"last"),")."),(0,a.kt)("p",null,"A sequence is said to be sorted with respect to the comparator ",(0,a.kt)("inlineCode",{parentName:"p"},"comp")," if for any iterator ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," pointing to the sequence\nand any non-negative integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," such that ",(0,a.kt)("inlineCode",{parentName:"p"},"it + n")," is a valid iterator pointing to an element of the sequence,\n",(0,a.kt)("inlineCode",{parentName:"p"},"std::invoke(comp, std::invoke(proj2, *(it + n)), std::invoke(proj1, *it)))")," evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," Elements are compared using the given binary comparison function ",(0,a.kt)("inlineCode",{parentName:"li"},"comp"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," Same as ",(0,a.kt)("strong",{parentName:"li"},"(1)"),", but uses ",(0,a.kt)("inlineCode",{parentName:"li"},"r1")," as the first range and ",(0,a.kt)("inlineCode",{parentName:"li"},"r2")," as the second range, as if using ",(0,a.kt)("inlineCode",{parentName:"li"},"ranges::begin(r1)")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"first1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ranges::end(r1)")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"last1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ranges::begin(r2)")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"first2"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"ranges::end(r2)")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"last2"),".")),(0,a.kt)("p",null,"This function is ",(0,a.kt)("strong",{parentName:"p"},"stable"),", which means that for equivalent elements in the original two ranges,\nthe elements from the first range  precede the elements from the second range, preserving their original order."),(0,a.kt)("p",null,"The function-like entities described on this page are ",(0,a.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,a.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)(l.ZP,{mdxType:"SymbolTable"},(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"first"),mdxType:"Symbol"},"The beginning of the first sorted range."),(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"middle"),mdxType:"Symbol"},"The end of the first sorted range and the beginning of the second range."),(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"last"),mdxType:"Symbol"},"The end of the second sorted range."),(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"r"),mdxType:"Symbol"},"The range of elements to merge in-place."),(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"comp"),mdxType:"Symbol"},"Comparison to apply to the projected elements."),(0,a.kt)(l.mN,{none:!0,noLink:!0,name:(0,a.kt)("code",null,"proj"),mdxType:"Symbol"},"Projection to apply to the elements in the range.")),(0,a.kt)("h3",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"An iterator equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"last"),"."),(0,a.kt)("h3",{id:"complexity"},"Complexity"),(0,a.kt)("p",null,"Given ",(0,a.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)")),(0,a.kt)("p",null,"Exactly ",(0,a.kt)("inlineCode",{parentName:"p"},"N \u2212 1")," comparisons and twice as many projections, if additional memory buffer is available.",(0,a.kt)("br",{parentName:"p"}),"\n","Otherwise, ",(0,a.kt)("strong",{parentName:"p"},"O(N ","*"," log(N))")," comparisons and twice as many projection."),(0,a.kt)("h3",{id:"exceptions"},"Exceptions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"(none)")),(0,a.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Vendor implementations:"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/STL/blob/e745bad3b1d05b5b19ec652d68abb37865ffa454/stl/inc/algorithm#L7131-L7235"},"Visual Studio (MS STL)"),"\n\u23fa\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gcc-mirror/gcc/blob/54258e22b0846aaa6bd3265f592feb161eecda75/libstdc%2B%2B-v3/include/bits/ranges_algo.h#L2573-L2602"},"GCC (libstdc++)")),(0,a.kt)("p",null,"This implementation only shows the slower algorithm used when no additional memory is available."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"inplace_merge(1) and merge(2)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct inplace_merge_fn\n{\n    template<std::bidirectional_iterator I, std::sentinel_for<I> S,\n             class Comp = ranges::less, class Proj = std::identity>\n    requires std::sortable<I, Comp, Proj>\n    constexpr I operator()(I first, I middle, S last, Comp comp = {}, Proj proj = {}) const\n    {\n        I last_it = ranges::next(middle, last);\n        inplace_merge_slow(first, middle, last_it,\n                           ranges::distance(first, middle),\n                           ranges::distance(middle, last_it),\n                           std::ref(comp), std::ref(proj));\n        return last_it;\n    }\n\n    template<ranges::bidirectional_range R, class Comp = ranges::less,\n             class Proj = std::identity>\n    requires std::sortable<ranges::iterator_t<R>, Comp, Proj>\n    constexpr ranges::borrowed_iterator_t<R>\n        operator()(R&& r, ranges::iterator_t<R> middle,\n                   Comp comp = {}, Proj proj = {}) const\n    {\n        return (*this)(ranges::begin(r), std::move(middle), ranges::end(r),\n                       std::move(comp), std::move(proj));\n    }\n\nprivate:\n    template<class I, class Comp, class Proj>\n    static constexpr void inplace_merge_slow(I first, I middle, I last,\n                                             std::iter_difference_t<I> n1,\n                                             std::iter_difference_t<I> n2,\n                                             Comp comp, Proj proj)\n    {\n        if (n1 == 0 || n2 == 0)\n            return;\n        if (n1 + n2 == 2 && comp(proj(*middle), proj(*first)))\n        {\n            ranges::iter_swap(first, middle);\n            return;\n        }\n\n        I cut1 = first, cut2 = middle;\n        std::iter_difference_t<I> d1 {}, d2 {};\n\n        if (n1 > n2)\n        {\n            d1 = n1 / 2;\n            ranges::advance(cut1, d1);\n            cut2 = ranges::lower_bound(middle, last, *cut1,\n                                       std::ref(comp), std::ref(proj));\n            d2 = ranges::distance(middle, cut2);\n        }\n        else\n        {\n            d2 = n2 / 2;\n            ranges::advance(cut2, d2);\n            cut1 = ranges::upper_bound(first, middle, *cut2,\n                                       std::ref(comp), std::ref(proj));\n            d1 = ranges::distance(first, cut1);\n        }\n\n        I new_middle = ranges::rotate(cut1, middle, cut2);\n        inplace_merge_slow(first, cut1, new_middle, d1, d2,\n                           std::ref(comp), std::ref(proj));\n        inplace_merge_slow(new_middle, cut2, last, n1 - d1, n2 - d2,\n                           std::ref(comp), std::ref(proj));\n    }\n};\n\ninline constexpr inplace_merge_fn inplace_merge {};\n"))),(0,a.kt)("h3",{id:"notes"},"Notes"),(0,a.kt)("p",null,"This function attempts to allocate a temporary buffer. If the allocation fails, the less efficient algorithm is chosen."),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <complex>\n#include <functional>\n#include <iostream>\n#include <iterator>\n#include <vector>\n\nvoid print(auto const& v, auto const& rem, int middle = -1)\n{\n    for (int i {}; auto n : v)\n        std::cout << (i++ == middle ? "\u2502 " : "") << n << \' \';\n    std::cout << rem << \'\\n\';\n}\n\ntemplate<std::random_access_iterator I, std::sentinel_for<I> S>\nrequires std::sortable<I>\nvoid merge_sort(I first, S last)\n{\n    if (last - first > 1)\n    {\n        I middle {first + (last - first) / 2};\n        merge_sort(first, middle);\n        merge_sort(middle, last);\n        std::ranges::inplace_merge(first, middle, last);\n    }\n}\n\nint main()\n{\n    // custom merge-sort demo\n    std::vector v {8, 2, 0, 4, 9, 8, 1, 7, 3};\n    print(v, ": before sort");\n    merge_sort(v.begin(), v.end());\n    print(v, ": after sort\\n");\n\n    // merging with comparison function object and projection\n    using CI = std::complex<int>;\n    std::vector<CI> r { {0,1}, {0,2}, {0,3}, {1,1}, {1,2} };\n    const auto middle { std::ranges::next(r.begin(), 3) };\n    auto comp { std::ranges::less {} };\n    auto proj { [](CI z) { return z.imag(); } };\n\n    print(r, ": before merge", middle - r.begin());\n    std::ranges::inplace_merge(r, middle, comp, proj);\n    print(r, ": after merge");\n}\n'))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"8 2 0 4 9 8 1 7 3 : before sort\n0 1 2 3 4 7 8 8 9 : after sort\n\n(0,1) (0,2) (0,3) \u2502 (1,1) (1,2) : before merge\n(0,1) (1,1) (0,2) (1,2) (0,3) : after merge\n")))))}b.isMDXComponent=!0}}]);