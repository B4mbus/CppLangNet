"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[49250],{14064:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),r=(a(67294),a(3905));const l={toc:[]};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(87462),r=a(67294),l=a(86010),o=a(12466),i=a(76775),s=a(91980),c=a(67392),p=a(50012);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function u(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=u(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,c]=h({queryString:a,groupId:n}),[m,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),_=(()=>{const e=s??m;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{_&&i(_)}),[_]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,l]),tabValues:l}}var _=a(72389);const f="tabList__CuJ",y="tabItem_LNqP";function k(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),u=e=>{const t=e.currentTarget,a=p.indexOf(t),n=c[a].value;n!==i&&(m(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:u},o,{className:(0,l.Z)("tabs__item",y,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function b(e){const t=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",f)},r.createElement(k,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,_.Z)();return r.createElement(b,(0,n.Z)({key:String(t)},e))}},98839:(e,t,a)=>{a.d(t,{z:()=>n});const n=a(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(87462),r=a(67294);const l="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const a={...e};return delete a.columns,delete a.spacing,delete a.breakAt,r.createElement("div",(0,n.Z)({className:l,"data-break-at":e.breakAt??"md"},a,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(67294),r=a(74866),l=a(85162),o=a(99372),i=a(72412);const s={};function c(e){const t=e.content||{};return n.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[a,c]=e;return c.value||c.simplified||c.detailed?n.createElement(l.Z,{value:a,label:o.gJ.get(a),default:c.default||0==t},c.simplified?n.createElement(n.Fragment,null,n.createElement(r.Z,{groupId:"view_mode",className:s.smallTabs},n.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(c.simplified)),n.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(c.detailed)))):c.value):n.createElement(l.Z,{value:a,label:o.gJ.get(a),default:0==t},(0,i.Z)(c))})))}},55059:(e,t,a)=>{a.d(t,{mN:()=>p,ZP:()=>c});var n=a(67294),r=a(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=a(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},s=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function c(e){return(t=>{if(0===t.length)return null;const a=t.sort(((e,t)=>s(e).Order<s(t).Order));return n.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},n.createElement("tbody",null,a))})(n.Children.toArray(e.children))}function p(e){n.useContext(o.z);let t=(0,r.Z)(e.name),a=null;e.desc?a=e.desc:e.children&&(a=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=n.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,a)=>!0===e?n.createElement("span",{className:l[t]},a):null;return n.createElement("tr",null,!e.none&&n.createElement("td",{className:l.symbolProp},(e=>{const t=s(e);return n.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),n.createElement("td",{className:l.symbolName},t),n.createElement("td",{className:l.symbolDesc},(0,r.Z)(a)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(67294),r=a(44996),l=a(34386),o=a(72412);const i="TooltipContent_Lvru",s="TooltipTitle_ukF2";function c(e){let{url:t,title:a,maxWidth:c,children:p}=e;let m=c||"clamp(250px, 25vw, 800px)";"string"==typeof m&&m.endsWith("vw")&&(m=`clamp(250px, ${m}, 800px)`);const u="function"==typeof a?n.createElement(a):a,d=(t||"").startsWith("/")?(0,r.Z)(t):t,h=t?n.createElement("a",{href:d,target:"_blank",rel:"noreferrer"},p):p;return n.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:m}}},title:n.createElement("span",{className:s},(0,o.Z)(u)),placement:"top",arrow:!0},n.createElement("span",{className:i},h))}c.isMDXComponent=!0},99372:(e,t,a)=>{a.d(t,{gJ:()=>p,eH:()=>h,U6:()=>u,OS:()=>d});var n=a(67294),r=a(95999);const l="markedText_c6kK",o="since_c1Q3",i="until_jXK6",s="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function m(e){let{children:t,className:a}=e;return n.createElement("span",{className:l+(a?" "+a:"")},t)}function u(e){let{children:t,v:a}=e;return n.createElement(m,{className:o},t,"\xa0",n.createElement("span",{className:c},n.createElement("small",null,"(",p.get(`since-${a}`),")")))}function d(e){let{children:t,v:a}=e;return n.createElement(m,{className:i},t,"\xa0",n.createElement("span",{className:c},n.createElement("small",null,"(",p.get(`until-${a}`),")")))}function h(e){let{children:t,v:a}=e;return n.createElement(m,{className:s},t,"\xa0",n.createElement("span",{className:c},n.createElement("small",null,"(",p.get(`removed-${a}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",n.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",n.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",n.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",n.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",n.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",n.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",n.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",n.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",n.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",n.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",n.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",n.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",n.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",n.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",n.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",n.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",n.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",n.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",n.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",n.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",n.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",n.createElement(r.Z,null,"since C++23")),p.set("removed-",n.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",n.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",n.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",n.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",n.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",n.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",n.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",n.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,a)=>{function n(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}a.d(t,{Z:()=>n})},91575:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20",id:"std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/lexicographical_compare_three_way",slug:"/std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/lexicographical_compare_three_way/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2, class Cmp >\nconstexpr auto lexicographical_compare_three_way( InputIt1 first1, InputIt1 last1,\n                                                  InputIt2 first2, InputIt2 last2,\n                                                  Cmp comp ) -> decltype(comp(*first1, *first2));\n\n// (2)\ntemplate< class InputIt1, class InputIt2 >\nconstexpr auto lexicographical_compare_three_way( InputIt1 first1, InputIt1 last1,\n                                                  InputIt2 first2, InputIt2 last2 );\n")))}m.isMDXComponent=!0},592:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>v,frontMatter:()=>h,metadata:()=>_,toc:()=>y});var n=a(87462),r=a(67294),l=a(3905),o=a(55059),i=a(22307),s=a(99801),c=a(18510),p=(a(99372),a(14064));const m={toc:[]};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In C++ terms, a code that is ",(0,l.kt)("strong",{parentName:"p"},"ill-formed")," should never compile.\nFor example this code is ",(0,l.kt)("strong",{parentName:"p"},"ill-formed")," because C++ doesn't allow conversions from string literals to ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),"s:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'int i = "Hey!";\n')))}u.isMDXComponent=!0;var d=a(91575);const h={title:"lexicographical_compare_three_way algorithm",sidebar_label:"lexicographical_compare_three_way(  )",description:"lexicographical_compare_three_way algorithm C++ documentation",hide_title:!0,tags:["algorithm","lexicographical_compare_three_way"],cppreference_origin_rel:"w/cpp/algorithm/lexicographical_compare_three_way"},g=void 0,_={unversionedId:"std/algo/ordinary/lexicographical_compare_three_way",id:"std/algo/ordinary/lexicographical_compare_three_way",title:"lexicographical_compare_three_way algorithm",description:"lexicographical_compare_three_way algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/lexicographical_compare_three_way.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/lexicographical_compare_three_way",permalink:"/CppLangNet/docs/std/algo/ordinary/lexicographical_compare_three_way",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/lexicographical_compare_three_way.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"lexicographical_compare_three_way",permalink:"/CppLangNet/docs/tags/lexicographical-compare-three-way"}],version:"current",frontMatter:{title:"lexicographical_compare_three_way algorithm",sidebar_label:"lexicographical_compare_three_way(  )",description:"lexicographical_compare_three_way algorithm C++ documentation",hide_title:!0,tags:["algorithm","lexicographical_compare_three_way"],cppreference_origin_rel:"w/cpp/algorithm/lexicographical_compare_three_way"},sidebar:"defaultSidebar",previous:{title:"lexicographical_compare(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/lexicographical_compare"},next:{title:"ranges::is_permutation(  )",permalink:"/CppLangNet/docs/std/algo/ranges/is_permutation"}},f={},y=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],k={toc:y};function v(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdlexicographical_compare_three_way-algorithm"},"std::lexicographical_compare_three_way() algorithm"),(0,l.kt)(s.Z,{content:{"since-cpp20":(0,l.kt)(d.default,{mdxType:"Signature_SinceCpp20"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Lexicographically compares two ranges [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),") using three-way comparison and produces a result of the strongest applicable comparison category type."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Returns the order between the first non-equivalent pair of elements according to ",(0,l.kt)("inlineCode",{parentName:"p"},"comp")," in both ranges if any, otherwise (if one ranges is equivalent to the prefix of another according to ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),"), returns the order between the length of both ranges.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Equivalent to:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"return std::lexicographical_compare_three_way(first1, last1, first2, last2, std::compare_three_way());\n")))),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"comp"),mdxType:"Symbol"},(0,l.kt)("p",null,"A function object type. The program is ",(0,l.kt)(c.Z,{title:(0,l.kt)(u,{mdxType:"Term_IllFormed"}),mdxType:"Tooltip"},"ill-formed")," if its return type is not one of the three comparison category types (",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::strong_ordering")),", ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::weak_ordering")),", or ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::partial_ordering")),")."))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"InputIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"InputIt2")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator"))),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"The value of a comparison category type specified above."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"At most ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," applications of ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," is the smaller of length of both ranges."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"The overloads with a template parameter named ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,l.kt)(c.Z,{title:(0,l.kt)(p.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,l.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,l.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,l.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"lexicographical_compare_three_way(1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'template<class I1, class I2, class Cmp>\nconstexpr auto lexicographical_compare_three_way(I1 f1, I1 l1, I2 f2, I2 l2, Cmp comp)\n    -> decltype(comp(*f1, *f2))\n{\n    using ret_t = decltype(comp(*f1, *f2));\n    static_assert(std::disjunction_v<\n                      std::is_same<ret_t, std::strong_ordering>,\n                      std::is_same<ret_t, std::weak_ordering>,\n                      std::is_same<ret_t, std::partial_ordering>>,\n                  "The return type must be a comparison category type.");\n\n    bool exhaust1 = (f1 == l1);\n    bool exhaust2 = (f2 == l2);\n    for (; !exhaust1 && !exhaust2; exhaust1 = (++f1 == l1), exhaust2 = (++f2 == l2))\n        if (auto c = comp(*f1, *f2); c != 0)\n            return c;\n\n    return !exhaust1 ? std::strong_ordering::greater:\n           !exhaust2 ? std::strong_ordering::less:\n                       std::strong_ordering::equal;\n}\n'))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <cctype>\n#include <compare>\n#include <iomanip>\n#include <iostream>\n#include <string_view>\n#include <utility>\nusing namespace std::literals;\n\nvoid show_result(std::string_view s1, std::string_view s2, std::strong_ordering o)\n{\n    std::cout << std::quoted(s1) << " is ";\n    std::is_lt(o) ? std::cout << "less than ":\n    std::is_gt(o) ? std::cout << "greater than ":\n                    std::cout << "equal to ";\n    std::cout << std::quoted(s2) << \'\\n\';\n}\n\nstd::strong_ordering cmp_icase(unsigned char x, unsigned char y)\n{\n    return std::toupper(x) <=> std::toupper(y);\n};\n\nint main()\n{\n    for (const auto& [s1, s2]:\n    {\n        std::pair{ "one"sv, "ONE"sv }, { "two"sv, "four"sv }, { "three"sv, "two"sv }\n    })\n    {\n        const auto res = std::lexicographical_compare_three_way(\n            s1.cbegin(), s1.cend(), s2.cbegin(), s2.cend(), cmp_icase);\n        show_result(s1, s2, res);\n    }\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},'"one" is equal to "ONE"\n"two" is greater than "four"\n"three" is less than "two"\n')))))}v.isMDXComponent=!0}}]);