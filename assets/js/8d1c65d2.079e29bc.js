"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[86662],{14064:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),r=n(67294),l=n(86010),o=n(12466),s=n(76775),i=n(91980),p=n(67392),c=n(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[i,p]=f({queryString:n,groupId:a}),[d,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=i??d;return u({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var g=n(72389);const k="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==s&&(d(t),i(a))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:m},o,{className:(0,l.Z)("tabs__item",h,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function _(e){const t=y(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(_,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(87462),r=n(67294);const l="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(67294),r=n(74866),l=n(85162),o=n(99372),s=n(72412);const i={};function p(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,p]=e;return p.value||p.simplified||p.detailed?a.createElement(l.Z,{value:n,label:o.gJ.get(n),default:p.default||0==t},p.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(p.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(p.detailed)))):p.value):a.createElement(l.Z,{value:n,label:o.gJ.get(n),default:0==t},(0,s.Z)(p))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>p});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function p(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function c(e){a.useContext(o.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const p=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),p(e.static,"modStatic","static"),p(e.constexpr,"modConstexpr","constexpr"),p(e.const,"modConst","const"),p(e.volatile,"modVolatile","volatile"),p(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}c.isMDXComponent=!0,p.isMDXComponent=!0,p.Symbol=c},18510:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(67294),r=n(44996),l=n(34386),o=n(72412);const s="TooltipContent_Lvru",i="TooltipTitle_ukF2";function p(e){let{url:t,title:n,maxWidth:p,children:c}=e;let d=p||"clamp(250px, 25vw, 800px)";"string"==typeof d&&d.endsWith("vw")&&(d=`clamp(250px, ${d}, 800px)`);const m="function"==typeof n?a.createElement(n):n,u=(t||"").startsWith("/")?(0,r.Z)(t):t,f=t?a.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},c):c;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:d}}},title:a.createElement("span",{className:i},(0,o.Z)(m)),placement:"top",arrow:!0},a.createElement("span",{className:s},f))}p.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>f,U6:()=>m,OS:()=>u});var a=n(67294),r=n(95999);const l="markedText_c6kK",o="since_c1Q3",s="until_jXK6",i="removed_A_Kf",p="versionNumber_BiUX",c=new Map;function d(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return a.createElement(d,{className:o},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return a.createElement(d,{className:s},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return a.createElement(d,{className:i},t,"\xa0",a.createElement("span",{className:p},a.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",a.createElement(r.Z,null,"deprecated")),c.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),c.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),c.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),c.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),c.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),c.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),c.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),c.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),c.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),c.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),c.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),c.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),c.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),c.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),c.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),c.set("removed-",a.createElement(r.Z,null,"deleted")),c.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),c.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),c.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),c.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),c.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),c.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),c.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},93886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/partial_sort/since-cpp17",id:"std/algo/ordinary/_codes/partial_sort/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/partial_sort/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/partial_sort",slug:"/std/algo/ordinary/_codes/partial_sort/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/partial_sort/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/partial_sort/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last );\n\n// (2)\ntemplate< class RandomIt, class Compare >\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class RandomIt >\nvoid partial_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt middle, RandomIt last );\n\n// (4)\ntemplate< class ExecutionPolicy, class RandomIt, class Compare >\nvoid partial_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt middle, RandomIt last, Compare comp );\n")))}d.isMDXComponent=!0},30573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/partial_sort/since-cpp20",id:"std/algo/ordinary/_codes/partial_sort/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/partial_sort/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/partial_sort",slug:"/std/algo/ordinary/_codes/partial_sort/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/partial_sort/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/partial_sort/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nconstexpr void partial_sort( RandomIt first, RandomIt middle, RandomIt last );\n\n// (2)\ntemplate< class RandomIt, class Compare >\nconstexpr void partial_sort( RandomIt first, RandomIt middle, RandomIt last, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class RandomIt >\nvoid partial_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt middle, RandomIt last );\n\n// (4)\ntemplate< class ExecutionPolicy, class RandomIt, class Compare >\nvoid partial_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt middle, RandomIt last, Compare comp );\n")))}d.isMDXComponent=!0},16801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,s={unversionedId:"std/algo/ordinary/_codes/partial_sort/until-cpp17",id:"std/algo/ordinary/_codes/partial_sort/until-cpp17",title:"until-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/partial_sort/until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/partial_sort",slug:"/std/algo/ordinary/_codes/partial_sort/until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/partial_sort/until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/partial_sort/until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last );\n\n// (2)\ntemplate< class RandomIt, class Compare >\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last,\n                   Compare comp );\n")))}d.isMDXComponent=!0},1513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>g,default:()=>_,frontMatter:()=>y,metadata:()=>k,toc:()=>v});var a=n(87462),r=n(67294),l=n(3905),o=n(55059),s=n(22307),i=n(99801),p=n(18510),c=n(99372),d=n(14064),m=n(16801),u=n(93886),f=n(30573);const y={title:"partial_sort algorithm",sidebar_label:"partial_sort(  )",description:"partial_sort algorithm C++ documentation",hide_title:!0,tags:["algorithm","partial_sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/partial_sort"},g=void 0,k={unversionedId:"std/algo/ordinary/partial_sort",id:"std/algo/ordinary/partial_sort",title:"partial_sort algorithm",description:"partial_sort algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/partial_sort.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/partial_sort",permalink:"/CppLangNet/docs/std/algo/ordinary/partial_sort",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/partial_sort.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"partial_sort",permalink:"/CppLangNet/docs/tags/partial-sort"},{label:"ascending",permalink:"/CppLangNet/docs/tags/ascending"},{label:"order",permalink:"/CppLangNet/docs/tags/order"}],version:"current",frontMatter:{title:"partial_sort algorithm",sidebar_label:"partial_sort(  )",description:"partial_sort algorithm C++ documentation",hide_title:!0,tags:["algorithm","partial_sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/partial_sort"},sidebar:"defaultSidebar",previous:{title:"stable_sort(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/stable_sort"},next:{title:"partial_sort(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/partial_sort_copy"}},h={},v=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],b={toc:v};function _(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdpartial_sort-algorithm"},"std::partial_sort() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":(0,l.kt)(f.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,l.kt)(u.default,{mdxType:"Signature_SinceCpp17"}),"until-cpp17":(0,l.kt)(m.default,{mdxType:"Signature_UntilCpp17"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Rearranges elements such that the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"middle"),") contains the sorted middle \u2212 first smallest elements in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),")."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The order of equal elements is not guaranteed to be preserved. The order of the remaining elements in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"middle"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") is unspecified.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Elements are compared using ",(0,l.kt)("inlineCode",{parentName:"p"},"operator<"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Elements are compared using the given binary comparison function ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(3, 4)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)")," and ",(0,l.kt)("strong",{parentName:"p"},"(2)"),", but executed according to policy."),(0,l.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,l.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,l.kt)(c.OS,{v:"cpp20",mdxType:"Until"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," is ",(0,l.kt)("code",null,"true"),". "),(0,l.kt)(c.U6,{v:"cpp20",mdxType:"Since"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," is ",(0,l.kt)("code",null,"true"),". ")))),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to sort partially."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"middle"),mdxType:"Symbol"},"Iterator defining the one-past-the-end iterator of the range to be sorted."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"policy"),mdxType:"Symbol"},"The execution policy to use. See ",(0,l.kt)("a",{href:"#"},"execution policy")," for details."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"cmp"),mdxType:"Symbol"},(0,l.kt)("p",null,"Comparison function object (i.e. an object that satisfies the requirements of ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),").\nThe signature of the comparison function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool cmp(const Type1 &a, const Type2 &b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),", but must not modify arguments."),(0,l.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,l.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,l.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,l.kt)(c.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,l.kt)("code",null,"Type1")," unless for ",(0,l.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,l.kt)("li",{parentName:"ul"},"The types ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"RandomIt")," can be implicitly converted to both of them.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"RandomIt"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/ValueSwappable"},"ValueSwappable")," ",(0,l.kt)("br",null),(0,l.kt)("a",{href:"/docs/named_req/LegacyRandomAccessIterator"},"LegacyRandomAccessIterator")),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," Type of dereferenced ",(0,l.kt)("code",null,"RandomIt")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," ",(0,l.kt)("br",null),(0,l.kt)("a",{href:"/docs/named_req/MoveConstructible"},"MoveConstructible")),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"Compare"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/Compare"},"Compare"))),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Approximately ",(0,l.kt)("inlineCode",{parentName:"p"},"(last - first) * log(middle - first)")," applications of ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),"."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"The overloads with a template parameter named ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,l.kt)(p.Z,{title:(0,l.kt)(d.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,l.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,l.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,l.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"partial_sort(1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename RandomIt>\n// constexpr since C++20\nvoid partial_sort(RandomIt first, RandomIt middle, RandomIt last)\n{\n    typedef typename std::iterator_traits<RandomIt>::value_type VT;\n    std::partial_sort(first, middle, last, std::less<VT>());\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"partial_sort(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace impl {\n\ntemplate<typename RandomIt, typename Compare>\n// constexpr\nvoid sift_down(RandomIt first, RandomIt last, const Compare& comp)\n{\n    // sift down element at 'first'\n    const auto length = static_cast<size_t>(last - first);\n    std::size_t current = 0;\n    std::size_t next = 2;\n    while (next < length)\n    {\n        if (comp(*(first + next), *(first + (next - 1))))\n            --next;\n        if (!comp(*(first + current), *(first + next)))\n            return;\n        std::iter_swap(first + current, first + next);\n        current = next;\n        next = 2 * current + 2;\n    }\n    --next;\n    if (next < length && comp(*(first + current), *(first + next)))\n        std::iter_swap(first + current, first + next);\n}\n\ntemplate<typename RandomIt, typename Compare>\n// constexpr\nvoid heap_select(RandomIt first, RandomIt middle, RandomIt last, const Compare& comp)\n{\n    std::make_heap(first, middle, comp);\n    for (auto i = middle; i != last; ++i)\n    {\n        if (comp(*i, *first))\n        {\n            std::iter_swap(first, i);\n            sift_down(first, middle, comp);\n        }\n    }\n}\n\n} // namespace impl\n\ntemplate<typename RandomIt, typename Compare>\n// constexpr since C++20\nvoid partial_sort(RandomIt first, RandomIt middle, RandomIt last, Compare comp)\n{\n    impl::heap_select(first, middle, last, comp);\n    std::sort_heap(first, middle, comp);\n}\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,"The algorithm used is typically heap select to select the smallest elements, and heap sort to sort the selected elements in the heap in ascending order."),(0,l.kt)("p",null,"To select elements, a heap is used. For example, for ",(0,l.kt)("inlineCode",{parentName:"p"},"operator<")," as comparison function, max-heap is used to select ",(0,l.kt)("inlineCode",{parentName:"p"},"middle \u2212 first")," smallest elements."),(0,l.kt)("p",null,"Heap sort is used after selection to sort [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"middle"),") selected elements (see ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/ordinary/sort_heap"},(0,l.kt)("inlineCode",{parentName:"a"},"std::sort_heap")),")."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::partial_sort"))," algorithms are intended to be used for small constant numbers of [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"middle"),") selected elements."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <array>\n#include <functional>\n#include <iostream>\n\nvoid print(auto const& s, int middle)\n{\n    for (int a : s)\n        std::cout << a << ' ';\n    std::cout << '\\n';\n    if (middle > 0)\n    {\n        while (middle-- > 0)\n            std::cout << \"--\";\n        std::cout << '^';\n    }\n    else if (middle < 0)\n    {\n        for (auto i = s.size() + middle; --i; std::cout << \"  \")\n        { }\n\n        for (std::cout << '^'; middle++ < 0; std::cout << \"--\")\n        { }\n    }\n    std::cout << '\\n';\n};\n\nint main()\n{\n    std::array<int, 10> s {5, 7, 4, 2, 8, 6, 1, 9, 0, 3};\n    print(s, 0);\n    std::partial_sort(s.begin(), s.begin() + 3, s.end());\n    print(s, 3);\n    std::partial_sort(s.rbegin(), s.rbegin() + 4, s.rend());\n    print(s, -4);\n    std::partial_sort(s.rbegin(), s.rbegin() + 5, s.rend(), std::greater{});\n    print(s, -5);\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"5 7 4 2 8 6 1 9 0 3\n\n0 1 2 7 8 6 5 9 4 3\n------^\n4 5 6 7 8 9 3 2 1 0\n          ^--------\n4 3 2 1 0 5 6 7 8 9\n        ^----------\n")))))}_.isMDXComponent=!0}}]);