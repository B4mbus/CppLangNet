"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[99574],{14323:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>y,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var n=a(87462),r=(a(67294),a(3905)),l=(a(74866),a(85162),a(11687),a(18510),a(22307),a(61667));a(56693),a(42677);const i={toc:[]};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Display all player names"',title:'"Display',all:!0,player:!0,'names"':!0},'#include <iostream>\n#include <string>\n#include <array>\n\nint main()\n{\n    std::array< std::string, 10 > playerNames = {\n        "HappyBanana", "AngryCrab", "SadWolf"\n    };\n\n    // Printing all player names\n    for (std::string name : playerNames)\n    {\n        std::cout << name << \'\\n\';\n    }   \n}\n')))}s.isMDXComponent=!0;const o={sidebar_label:"3. Fixed-size arrays",title:"Fixed-size arrays",description:"Lesson: using fixed-size arrays in C++",hide_title:!0},p=void 0,u={unversionedId:"course/basics/arrays/fixed-size-arrays",id:"course/basics/arrays/fixed-size-arrays",title:"Fixed-size arrays",description:"Lesson: using fixed-size arrays in C++",source:"@site/content/learn/course/basics/arrays/fixed-size-arrays.mdx",sourceDirName:"course/basics/arrays",slug:"/course/basics/arrays/fixed-size-arrays",permalink:"/CppLangNet/learn/course/basics/arrays/fixed-size-arrays",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/arrays/fixed-size-arrays.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"3. Fixed-size arrays",title:"Fixed-size arrays",description:"Lesson: using fixed-size arrays in C++",hide_title:!0},sidebar:"defaultSidebar",previous:{title:"Dynamic arrays \xbb Exercises",permalink:"/CppLangNet/learn/course/basics/arrays/dynamic-arrays/exercises"},next:{title:"Fixed-size arrays \xbb More examples",permalink:"/CppLangNet/learn/course/basics/arrays/fixed-size-arrays/examples"}},d={},m=[{value:"Motivation",id:"motivation",level:2},{value:"Using <code>std::array</code>",id:"using-stdarray",level:2},{value:"Creating an array",id:"creating-an-array",level:2},{value:"Accessing elements",id:"accessing-elements",level:2},{value:"Reading the size of an array",id:"reading-the-size-of-an-array",level:2},{value:"Displaying elements",id:"displaying-elements",level:2},{value:"Summary",id:"summary",level:2}],c={toc:m};function y(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fixed-size-arrays"},"Fixed-size arrays"),(0,r.kt)("p",null,"In this lesson we'll briefly explain what is ",(0,r.kt)("inlineCode",{parentName:"p"},"std::array"),". Later in the course you'll learn more about it."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"We already have ",(0,r.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/vector/"},"vectors"),", which represent a dynamic array, and we can use them to store any\nnumber of elements. You may ask:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why do we even need arrays of fixed size?")),(0,r.kt)("p",null,"The short answer is: ",(0,r.kt)("strong",{parentName:"p"},"performance"),"."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"array")," vs ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"vector")," vs C-style arrays"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"std::array")," is a more performant alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"std::vector"),", but with a few limitations. It is also a much safer alternative to C-style arrays.")),(0,r.kt)("p",null,"We, the creators of this course are fully aware that for beginners a tiny performance improvement over ",(0,r.kt)("inlineCode",{parentName:"p"},"vector")," is not worth the extra effort.\nThis container will be covered more in-depth later, when you'll be more familiar with C++."),(0,r.kt)("h2",{id:"using-stdarray"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"std::array")),(0,r.kt)("p",null,"The first thing we have to do is to include the ",(0,r.kt)("inlineCode",{parentName:"p"},"<array>")," header file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <array>\n")),(0,r.kt)("h2",{id:"creating-an-array"},"Creating an array"),(0,r.kt)("p",null,"There are ",(0,r.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/array/#example-usage"},"quite a few ways")," to create an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"std::array"),".\nRemember: we're talking about an array of ",(0,r.kt)("strong",{parentName:"p"},"fixed-size")," that we have to know in advance. We can't change the size of the array after it's created.\nA common practice is to estimate the largest number of elements we'll use and then create an array of that size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",10:!0,className:"language-cpp",metastring:'title="Allow up to 10 players in our game"',title:'"Allow',up:!0,to:!0,players:!0,in:!0,our:!0,'game"':!0},"std::array<std::string, 10> playerNames;\n")),(0,r.kt)("p",null,"In the previous lesson we used similar notation to create ",(0,r.kt)("inlineCode",{parentName:"p"},"vector")," instance. This time we have to provide both:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the type of the elements (",(0,r.kt)("inlineCode",{parentName:"li"},"Type"),")"),(0,r.kt)("li",{parentName:"ul"},"the size of the array (",(0,r.kt)("inlineCode",{parentName:"li"},"N"),")")),(0,r.kt)("p",null,"and we do that by separating them with a comma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// prism-push-types:Type\nstd::array<Type, N>\n")),(0,r.kt)("p",null,"It's quite usual to initialize an array with some predefined values. We can do that by using the curly braces syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",10:!0,className:"language-cpp",metastring:'title="Allow up to 10 players, provide three initial names"',title:'"Allow',up:!0,to:!0,"players,":!0,provide:!0,three:!0,initial:!0,'names"':!0},'std::array<std::string, 10> playerNames = {\n    "HappyBanana", "AngryCrab", "SadWolf",\n};\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alternative syntax"),(0,r.kt)("div",null,(0,r.kt)("p",null,"You can omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," between the ",(0,r.kt)("inlineCode",{parentName:"p"},"playerNames")," and the curly braces then wrap the list of elements\nin an additional ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," to achieve the same result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::array<std::string, 10> playerNames {{\n    "HappyBanana", "AngryCrab", "SadWolf",\n}};\n')))),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Elements we left unset in ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"{ }")),(0,r.kt)("p",{parentName:"admonition"},"If you don't provide initial values for all elements, the remaining ones will be initialized with a default or zero value.\nIn simple terms, depending on the type inside an array: numeric values will be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", booleans to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", and strings will be empty.")),(0,r.kt)("p",null,"This is the content of the array after the previous code snippet:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Index"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},'"HappyBanana"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},'"AngryCrab"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},'"SadWolf"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")))),(0,r.kt)("h2",{id:"accessing-elements"},"Accessing elements"),(0,r.kt)("p",null,"We can access elements of an array ",(0,r.kt)("a",{parentName:"p",href:"../dynamic-arrays/#accessing-elements"},"the same way")," we do with vectors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Display the first player\'s name"',title:'"Display',the:!0,first:!0,"player's":!0,'name"':!0},'#include <iostream>\n#include <string>\n#include <array>\n\nint main()\n{\n    std::array< std::string, 10 > playerNames = {\n        "HappyBanana", "AngryCrab", "SadWolf"\n    };\n\n    // Setting names of the players\n    playerNames[0] = "SadBanana";\n    playerNames[2] = "HappyWolf";\n\n    // Printing the name of the first player:\n    std::cout << "Name of the first player: " << playerNames[0];\n}\n')),(0,r.kt)("p",null,"We changed the first and the third element of the array. The output of the program is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Name of the first player: SadBanana\n")),(0,r.kt)("p",null,"This is the content of the array after the previous code snippet:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Index"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},'"SadBanana"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},'"AngryCrab"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},'"HappyWolf"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")))),(0,r.kt)("h2",{id:"reading-the-size-of-an-array"},"Reading the size of an array"),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size()")," method to get the size of an array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::array<std::string, 10> playerNames = {\n    "HappyBanana", "AngryCrab", "SadWolf",\n};\n\nstd::cout << "Number of players: " << playerNames.size();\n')),(0,r.kt)("p",null,"The output of the program is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Number of players: 10\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Size of ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"std::array")),(0,r.kt)("p",{parentName:"admonition"},'As you can see from the example above, all of array "slots" are used regardless of the number of elements we set manually.\nThe rest are initialized with default values, which in this case are empty strings.')),(0,r.kt)("h2",{id:"displaying-elements"},"Displaying elements"),(0,r.kt)("p",null,"Just like we did with vectors, we can use a ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop to display all elements of an array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Display all player names"',title:'"Display',all:!0,player:!0,'names"':!0},"for (std::string name : playerNames)\n{\n    std::cout << \"Player: \" << name << '\\n';\n}\n")),(0,r.kt)(l.Z,{content:(0,r.kt)(s,{mdxType:"FullCode_PrintPlayerNames"}),mdxType:"FullCode"}),(0,r.kt)("p",null,"The output of the program is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Player: HappyBanana\nPlayer: AngryCrab\nPlayer: SadWolf\nPlayer:\nPlayer:\nPlayer:\nPlayer:\nPlayer:\nPlayer:\nPlayer:\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"To sum up, we've learned that there is a fixed-size array in C++ called ",(0,r.kt)("inlineCode",{parentName:"p"},"std::array"),". In many cases we can use it similar to\na ",(0,r.kt)("inlineCode",{parentName:"p"},"vector"),", however it has some limitations and it's not as flexible. Our recommendation for you is to stick with ",(0,r.kt)("inlineCode",{parentName:"p"},"std::vector"),"\nfor now."),(0,r.kt)("p",null,"We'll leave it here for now, but we'll come back to it later in the course."))}y.isMDXComponent=!0},42677:(e,t,a)=>{a.d(t,{ZP:()=>i});var n=a(87462),r=(a(67294),a(3905));const l={toc:[]};function i(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This section requires improvement. You can help by editing this doc page.")))}i.isMDXComponent=!0},56693:(e,t,a)=>{a.d(t,{ZP:()=>i});var n=a(87462),r=(a(67294),a(3905));const l={toc:[]};function i(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note, this article is not finished! You can help by editing this doc page.")))}i.isMDXComponent=!0},34673:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(87462),r=a(67294),l=a(86010),i=a(72389),s=a(86043);const o="details_lb9f",p="isBrowser_bmU9",u="collapsibleContent_i85q";function d(e){return!!e&&("SUMMARY"===e.tagName||d(e.parentElement))}function m(e,t){return!!e&&(e===t||m(e.parentElement,t))}function c(e){let{summary:t,children:a,...c}=e;const y=(0,i.Z)(),h=(0,r.useRef)(null),{collapsed:k,setCollapsed:f}=(0,s.u)({initialState:!c.open}),[g,N]=(0,r.useState)(c.open),b=r.isValidElement(t)?t:r.createElement("summary",null,t??"Details");return r.createElement("details",(0,n.Z)({},c,{ref:h,open:g,"data-collapsed":k,className:(0,l.Z)(o,y&&p,c.className),onMouseDown:e=>{d(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const t=e.target;d(t)&&m(t,h.current)&&(e.preventDefault(),k?(f(!1),N(!0)):f(!0))}}),b,r.createElement(s.z,{lazy:!1,collapsed:k,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{f(e),N(!e)}},r.createElement("div",{className:u},a)))}const y="details_b_Ee";function h(e){let{...t}=e;return r.createElement(c,(0,n.Z)({},t,{className:(0,l.Z)("alert alert--info",y,t.className)}))}},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(87462),r=a(67294),l=a(86010),i=a(12466),s=a(76775),o=a(91980),p=a(67392),u=a(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[o,p]=y({queryString:a,groupId:n}),[d,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),k=(()=>{const e=o??d;return c({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&s(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),h(e)}),[p,h,l]),tabValues:l}}var k=a(72389);const f="tabList__CuJ",g="tabItem_LNqP";function N(e){let{className:t,block:a,selectedValue:s,selectValue:o,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),m=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==s&&(d(t),o(n))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:c,onClick:m},i,{className:(0,l.Z)("tabs__item",g,i?.className,{"tabs__item--active":s===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",f)},r.createElement(N,(0,n.Z)({},e,t)),r.createElement(b,(0,n.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(v,(0,n.Z)({key:String(t)},e))}},22307:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(87462),r=a(67294);const l="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const a={...e};return delete a.columns,delete a.spacing,delete a.breakAt,r.createElement("div",(0,n.Z)({className:l,"data-break-at":e.breakAt??"md"},a,{style:t}),e.children)}i.isMDXComponent=!0},61667:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(95999),l=a(24654);function i(e){let{content:t}=e;return n.createElement(l.Z,{summary:n.createElement("summary",null,n.createElement(r.Z,null,"See full code"))},n.createElement("div",null,t))}i.isMDXComponent=!0},11687:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(87462),r=a(67294),l=a(44996),i=a(72412);function s(e){let t=null;if(e.desc){const a=e.center?{textAlign:"center",display:"block"}:{};t=r.createElement("small",{style:a},(0,i.Z)(e.desc))}const a=e.fullwidth||e.center,s={border:e.border?"1px solid gray":void 0,display:a?"block":"inline-block"},o=e.style||{};o.borderRadius=e.borderRadius||void 0,o.minWidth=e.minwidth||void 0,o.width=e.width||void 0,o.maxWidth=e.maxwidth||void 0,o.minHeight=e.minheight||void 0,o.height=e.height||void 0,o.maxHeight=e.maxheight||void 0,o.display="block",o.imageRendering="-webkit-optimize-contrast",e.center&&(o.margin="0 auto");const p={...e};return"string"==typeof e.src&&(p.src=e.src.startsWith("/img/")?(0,l.Z)(e.src):e.src),delete p.border,delete p.borderRadius,delete p.center,delete p.fullwidth,delete p.style,delete p.minwidth,delete p.width,delete p.maxwidth,delete p.minheight,delete p.height,delete p.maxheight,delete p.desc,r.createElement(r.Fragment,null,r.createElement("div",{style:s},r.createElement("img",(0,n.Z)({},p,{style:o}))),t)}s.isMDXComponent=!0},18510:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(67294),r=a(44996),l=a(34386),i=a(72412);const s="TooltipContent_Lvru",o="TooltipTitle_ukF2";function p(e){let{url:t,title:a,maxWidth:p,children:u}=e;let d=p||"clamp(250px, 25vw, 800px)";"string"==typeof d&&d.endsWith("vw")&&(d=`clamp(250px, ${d}, 800px)`);const m="function"==typeof a?n.createElement(a):a,c=(t||"").startsWith("/")?(0,r.Z)(t):t,y=t?n.createElement("a",{href:c,target:"_blank",rel:"noreferrer"},u):u;return n.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:d}}},title:n.createElement("span",{className:o},(0,i.Z)(m)),placement:"top",arrow:!0},n.createElement("span",{className:s},y))}p.isMDXComponent=!0},72412:(e,t,a)=>{function n(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}a.d(t,{Z:()=>n})},24654:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(87462),r=a(67294),l=a(34673);function i(e){return r.createElement(r.Fragment,null,r.createElement(l.Z,(0,n.Z)({},e,{"data-size":e.size||"normal"})))}}}]);