"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[93759],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=i(r),g=o,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||a;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},19670:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var n=r(87462),o=(r(67294),r(3905));const a={},s=void 0,c={unversionedId:"std/algo/ranges/_codes/merge/since-cpp20-detailed",id:"std/algo/ranges/_codes/merge/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/merge",slug:"/std/algo/ranges/_codes/merge/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},p={},i=[],l={toc:i};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2\n  std::sentinel_for<I2> S2\n  std::weakly_incrementable O\n  class Comp = ranges::less\n  class Proj1 = std::identity\n class Proj2 = std::identity\n>\n  requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\nconstexpr merge_result<I1, I2, O>\n    merge( I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\n template<\n  ranges::input_range R1\n  ranges::input_range R2\n  std::weakly_incrementable O\n  class Comp = ranges::less\n  class Proj1 = std::identity\n  class Proj2 = std::identity\n>\n  requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n                          O, Comp, Proj1, Proj2>\nconstexpr merge_result<ranges::borrowed_iterator_t<R1>,\n                       ranges::borrowed_iterator_t<R2>, O>\n    merge( R1&& r1, R2&& r2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}d.isMDXComponent=!0}}]);