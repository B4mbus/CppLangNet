"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[83986,99168,65829],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,g=m["".concat(o,".").concat(u)]||m[u]||p[u]||l;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var d=2;d<l;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(87462),r=n(67294),l=n(86010),s=n(12466),i=n(76775),o=n(91980),d=n(67392),c=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,d]=g({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=o??p;return u({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),f(e)}),[d,f,l]),tabValues:l}}var h=n(72389);const k="tabList__CuJ",_="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=d[n].value;a!==i&&(p(t),o(a))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:m},s,{className:(0,l.Z)("tabs__item",_,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(87462),r=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(67294),r=n(74866),l=n(85162),s=n(99372),i=n(72412);const o={};function d(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,d]=e;return d.value||d.simplified||d.detailed?a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:d.default||0==t},d.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:o.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(d.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(d.detailed)))):d.value):a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,i.Z)(d))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>d});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},o=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function d(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function c(e){a.useContext(s.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const d=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=o(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),d(e.static,"modStatic","static"),d(e.constexpr,"modConstexpr","constexpr"),d(e.const,"modConst","const"),d(e.volatile,"modVolatile","volatile"),d(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}c.isMDXComponent=!0,d.isMDXComponent=!0,d.Symbol=c},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>g,U6:()=>m,OS:()=>u});var a=n(67294),r=n(95999);const l="markedText_c6kK",s="since_c1Q3",i="until_jXK6",o="removed_A_Kf",d="versionNumber_BiUX",c=new Map;function p(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return a.createElement(p,{className:s},t,"\xa0",a.createElement("span",{className:d},a.createElement("small",null,"(",c.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return a.createElement(p,{className:i},t,"\xa0",a.createElement("span",{className:d},a.createElement("small",null,"(",c.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return a.createElement(p,{className:o},t,"\xa0",a.createElement("span",{className:d},a.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",a.createElement(r.Z,null,"deprecated")),c.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),c.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),c.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),c.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),c.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),c.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),c.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),c.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),c.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),c.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),c.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),c.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),c.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),c.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),c.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),c.set("removed-",a.createElement(r.Z,null,"deleted")),c.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),c.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),c.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),c.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),c.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),c.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),c.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},98277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,i={unversionedId:"std/algo/ranges/_codes/ends_with/since-cpp20-detailed",id:"std/algo/ranges/_codes/ends_with/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/ends_with/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/ends_with",slug:"/std/algo/ranges/_codes/ends_with/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/ends_with/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/ends_with/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},o={},d=[],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2,\n  std::sentinel_for<I2> S2,\n  class Pred = ranges::equal_to,\n  class Proj1 = std::identity, class Proj2 = std::identity\n>\n  requires (std::forward_iterator<I1> || std::sized_sentinel_for<S1, I1>) &&\n           (std::forward_iterator<I2> || std::sized_sentinel_for<S2, I2>) &&\n           std::indirectly_comparable<I1, I2, Pred, Proj1, Proj2>\nconstexpr bool ends_with( I1 first1, S1 last1, I2 first2, S2 last2,\n                            Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\ntemplate<\n  ranges::input_range R1,\n  ranges::input_range R2,\n  class Pred = ranges::equal_to,\n  class Proj1 = std::identity, class Proj2 = std::identity\n>\n  requires (ranges::forward_range<R1> || ranges::sized_range<R1>) &&\n          (ranges::forward_range<R2> || ranges::sized_range<R2>) &&\n          std::indirectly_comparable<ranges::iterator_t<R1>,\n                                      ranges::iterator_t<R2>,\n                                      Pred, Proj1, Proj2>\nconstexpr bool ends_with( R1&& r1, R2&& r2,\n                            Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}p.isMDXComponent=!0},23067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,i={unversionedId:"std/algo/ranges/_codes/ends_with/since-cpp20-simplified",id:"std/algo/ranges/_codes/ends_with/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/ends_with/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/ends_with",slug:"/std/algo/ranges/_codes/ends_with/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/ends_with/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/ends_with/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},o={},d=[],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr bool ends_with( I1 first1, S1 last1, I2 first2, S2 last2,\n                            Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\nconstexpr bool ends_with( R1&& r1, R2&& r2,\n                            Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n")),(0,r.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::input_iterator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Pred")," - ",(0,r.kt)("strong",{parentName:"li"},"(none)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Proj1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Proj2")," - ",(0,r.kt)("strong",{parentName:"li"},"(none)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::ranges::input_range"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Pred")," template argumenth as a default type of ",(0,r.kt)("inlineCode",{parentName:"p"},"ranges::equal_to")," for all overloads.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Proj1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Proj2")," template arguments have a default type of ",(0,r.kt)("inlineCode",{parentName:"p"},"std::identity")," for all overloads."),(0,r.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(1)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"(forward_iterator<I1> || sized_sentinel_for<S1, I1>)\n&& (forward_iterator<I2> || sized_sentinel_for<S2, I2>)\n&& indirectly_comparable<I1, I2, Pred, Proj1, Proj2>`\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"(ranges::forward_range<R1> || ranges::sized_range<R1>)\n&& (ranges::forward_range<R2> || ranges::sized_range<R2>)\n&& std::indirectly_comparable<ranges::iterator_t<R1>,\n                              ranges::iterator_t<R2>,\n                              Pred, Proj1, Proj2>\n")))),(0,r.kt)("p",null,"(The ",(0,r.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommitted here for readability)"))}p.isMDXComponent=!0},15890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>m,default:()=>k,frontMatter:()=>p,metadata:()=>u,toc:()=>f});var a=n(87462),r=n(67294),l=n(3905),s=n(55059),i=n(22307),o=n(99801),d=n(98277),c=n(23067);const p={title:"ranges::ends_with algorithm",sidebar_label:"ranges::ends_with(  )",description:"ranges::ends_with algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","find","ends_with","sequence","search","look"],cppreference_origin_rel:"w/cpp/algorithm/ranges/ends_with"},m=void 0,u={unversionedId:"std/algo/ranges/ends_with",id:"std/algo/ranges/ends_with",title:"ranges::ends_with algorithm",description:"ranges::ends_with algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/ends_with.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/ends_with",permalink:"/CppLangNet/docs/std/algo/ranges/ends_with",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/ends_with.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"find",permalink:"/CppLangNet/docs/tags/find"},{label:"ends_with",permalink:"/CppLangNet/docs/tags/ends-with"},{label:"sequence",permalink:"/CppLangNet/docs/tags/sequence"},{label:"search",permalink:"/CppLangNet/docs/tags/search"},{label:"look",permalink:"/CppLangNet/docs/tags/look"}],version:"current",frontMatter:{title:"ranges::ends_with algorithm",sidebar_label:"ranges::ends_with(  )",description:"ranges::ends_with algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","find","ends_with","sequence","search","look"],cppreference_origin_rel:"w/cpp/algorithm/ranges/ends_with"},sidebar:"defaultSidebar",previous:{title:"ranges::starts_with(  )",permalink:"/CppLangNet/docs/std/algo/ranges/starts_with"},next:{title:"all_of(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/all_of"}},g={},f=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],h={toc:f};function k(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdrangesends_with-algorithm"},"std::ranges::ends_with() algorithm"),(0,l.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,l.kt)(c.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,l.kt)(d.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Checks whether the second range matches the suffix of the first range."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Comparison is done by applying the binary predicate ",(0,l.kt)("inlineCode",{parentName:"p"},"pred")," to elements in two ranges projected by ",(0,l.kt)("inlineCode",{parentName:"p"},"proj1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"proj2")," respectively.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"p"},"r1")," as the first source range and ",(0,l.kt)("inlineCode",{parentName:"p"},"r2")," as the second source range,\nas if using ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r2)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r2)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),"."))),(0,l.kt)("p",null,"The function-like entities described on this page are ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,l.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The range of elements to examine."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r1"),mdxType:"Symbol"},"The range of elements to examine."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The range of elements to be used as suffix."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r2"),mdxType:"Symbol"},"The range of elements to be used as suffix."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"pred"),mdxType:"Symbol"},"Binary predicate to compare the elements with."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements in the first range."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements in the second range.")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the second range matches the prefix of the first range, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,"More specifically:"),(0,l.kt)("p",null,"Let ",(0,l.kt)("inlineCode",{parentName:"p"},"N1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"N2")," denote the size of ranges [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),") respectively."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"N1 < N2"),", returns ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,l.kt)("li",{parentName:"ul"},"Otherwise, if every element in the range [",(0,l.kt)("inlineCode",{parentName:"li"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"li"},"last2"),") is equal to the corresponding element in [",(0,l.kt)("inlineCode",{parentName:"li"},"first1 + N1 - N2"),"; ",(0,l.kt)("inlineCode",{parentName:"li"},"last1"),") (compared using ",(0,l.kt)("inlineCode",{parentName:"li"},"pred")," after projections), returns ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"At most ",(0,l.kt)("inlineCode",{parentName:"p"},"min(N1, N2)")," applications of the predicate and both projections. ",(0,l.kt)("span",{class:"inline-caution"},"The predicate and both projections are not applied if ",(0,l.kt)("code",null,"N1 < N2"))),(0,l.kt)("p",null,"If both ",(0,l.kt)("inlineCode",{parentName:"p"},"N1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"N2")," can be calculated in constant time (i.e. both iterator-sentinel type pairs model ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"sized_sentinel_for")),", or both range types model ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"sized_range")),") and ",(0,l.kt)("inlineCode",{parentName:"p"},"N1 < N2"),", the time complexity is ",(0,l.kt)("strong",{parentName:"p"},"constant"),"."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"ends_with(1) and starts_with(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct ends_with_fn\n{\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n             std::input_iterator I2, std::sentinel_for<I2> S2,\n             class Pred = ranges::equal_to,\n             class Proj1 = std::identity, class Proj2 = std::identity>\n    requires (std::forward_iterator<I1> || std::sized_sentinel_for<S1, I1>) &&\n             (std::forward_iterator<I2> || std::sized_sentinel_for<S2, I2>) &&\n             std::indirectly_comparable<I1, I2, Pred, Proj1, Proj2>\n    constexpr bool operator()(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {},\n                              Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        const auto n1 = ranges::distance(first1, last1);\n        const auto n2 = ranges::distance(first2, last2);\n        if (n1 < n2)\n            return false;\n        ranges::advance(first1, n1 - n2);\n        return ranges::equal(std::move(first1), std::move(last1),\n                             std::move(first2), std::move(last2),\n                             std::move(pred), std::move(proj1), std::move(proj2));\n    }\n\n    template<ranges::input_range R1, ranges::input_range R2,\n             class Pred = ranges::equal_to,\n             class Proj1 = std::identity, class Proj2 = std::identity>\n    requires (ranges::forward_range<R1> || ranges::sized_range<R1>) &&\n             (ranges::forward_range<R2> || ranges::sized_range<R2>) &&\n             std::indirectly_comparable<ranges::iterator_t<R1>,\n                                        ranges::iterator_t<R2>,\n                                        Pred, Proj1, Proj2>\n    constexpr bool operator()(R1&& r1, R2&& r2, Pred pred = {},\n                              Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        return (*this)(ranges::begin(r1), ranges::end(r1),\n                       ranges::begin(r2), ranges::end(r2),\n                       std::move(pred), std::move(proj1), std::move(proj2));\n    }\n};\n\ninline constexpr ends_with_fn ends_with {};\n"))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <array>\n#include <iostream>\n\nint main()\n{\n    std::cout\n        << std::boolalpha\n        << std::ranges::ends_with("static_cast", "cast") << \'\\n\'\n        << std::ranges::ends_with("const_cast", "cast") << \'\\n\'\n        << std::ranges::ends_with("reinterpret_cast", "cast") << \'\\n\'\n        << std::ranges::ends_with("dynamic_cast", "cast") << \'\\n\'\n        << std::ranges::ends_with("move", "cast") << \'\\n\'\n        << std::ranges::ends_with("move_if_noexcept", "cast") << \'\\n\'\n        << std::ranges::ends_with("forward", "cast") << \'\\n\';\n    static_assert(\n        !  std::ranges::ends_with("as_const", "cast") and\n        !! std::ranges::ends_with("bit_cast", "cast") and\n        !  std::ranges::ends_with("to_underlying", "cast") and\n        !! std::ranges::ends_with(std::array {1,2,3,4}, std::array {3,4}) and\n        !  std::ranges::ends_with(std::array {1,2,3,4}, std::array {4,5})\n        );\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n")))))}k.isMDXComponent=!0}}]);