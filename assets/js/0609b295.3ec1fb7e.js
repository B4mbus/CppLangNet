"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[23413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),g=o,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||s;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const s={},a=void 0,i={unversionedId:"std/algo/ranges/_codes/set_union/since-cpp20-detailed",id:"std/algo/ranges/_codes/set_union/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/set_union/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/set_union",slug:"/std/algo/ranges/_codes/set_union/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/set_union/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/set_union/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},c={},p=[],l={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2,\n  std::sentinel_for<I2> S2,\n  std::weakly_incrementable O,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\nconstexpr set_union_result<I1, I2, O>\n    set_union( I1 first1, S1 last1, I2 first2, S2 last2,\n               O result, Comp comp = {},\n               Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\ntemplate<\n  ranges::input_range R1,\n  ranges::input_range R2,\n  std::weakly_incrementable O,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n                          O, Comp, Proj1, Proj2>\nconstexpr set_union_result<ranges::borrowed_iterator_t<R1>,\n                           ranges::borrowed_iterator_t<R2>, O>\n    set_union( R1&& r1, R2&& r2, O result, Comp comp = {},\n               Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}d.isMDXComponent=!0}}]);