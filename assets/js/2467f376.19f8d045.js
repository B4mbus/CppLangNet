"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[71863],{14064:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),r=(a(67294),a(3905));const l={toc:[]};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>_});var n=a(87462),r=a(67294),l=a(86010),o=a(12466),i=a(76775),c=a(91980),s=a(67392),p=a(50012);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,c._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[c,s]=g({queryString:a,groupId:n}),[m,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),f=(()=>{const e=c??m;return u({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),h(e)}),[s,h,l]),tabValues:l}}var f=a(72389);const k="tabList__CuJ",y="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:i,selectValue:c,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),d=e=>{const t=e.currentTarget,a=p.indexOf(t),n=s[a].value;n!==i&&(m(t),c(n))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:d},o,{className:(0,l.Z)("tabs__item",y,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function x(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function _(e){const t=(0,f.Z)();return r.createElement(x,(0,n.Z)({key:String(t)},e))}},98839:(e,t,a)=>{a.d(t,{z:()=>n});const n=a(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(87462),r=a(67294);const l="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const a={...e};return delete a.columns,delete a.spacing,delete a.breakAt,r.createElement("div",(0,n.Z)({className:l,"data-break-at":e.breakAt??"md"},a,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(74866),l=a(85162),o=a(99372),i=a(72412);const c={};function s(e){const t=e.content||{};return n.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[a,s]=e;return s.value||s.simplified||s.detailed?n.createElement(l.Z,{value:a,label:o.gJ.get(a),default:s.default||0==t},s.simplified?n.createElement(n.Fragment,null,n.createElement(r.Z,{groupId:"view_mode",className:c.smallTabs},n.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(s.simplified)),n.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(s.detailed)))):s.value):n.createElement(l.Z,{value:a,label:o.gJ.get(a),default:0==t},(0,i.Z)(s))})))}},55059:(e,t,a)=>{a.d(t,{mN:()=>p,ZP:()=>s});var n=a(67294),r=a(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=a(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},c=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function s(e){return(t=>{if(0===t.length)return null;const a=t.sort(((e,t)=>c(e).Order<c(t).Order));return n.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},n.createElement("tbody",null,a))})(n.Children.toArray(e.children))}function p(e){n.useContext(o.z);let t=(0,r.Z)(e.name),a=null;e.desc?a=e.desc:e.children&&(a=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=n.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const s=(e,t,a)=>!0===e?n.createElement("span",{className:l[t]},a):null;return n.createElement("tr",null,!e.none&&n.createElement("td",{className:l.symbolProp},(e=>{const t=c(e);return n.createElement("span",{className:t.Style},t.ShortName)})(e),s(e.static,"modStatic","static"),s(e.constexpr,"modConstexpr","constexpr"),s(e.const,"modConst","const"),s(e.volatile,"modVolatile","volatile"),s(e.virtual,"modVirtual","virtual")),n.createElement("td",{className:l.symbolName},t),n.createElement("td",{className:l.symbolDesc},(0,r.Z)(a)))}p.isMDXComponent=!0,s.isMDXComponent=!0,s.Symbol=p},18510:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(44996),l=a(34386),o=a(72412);const i="TooltipContent_Lvru",c="TooltipTitle_ukF2";function s(e){let{url:t,title:a,maxWidth:s,children:p}=e;let m=s||"clamp(250px, 25vw, 800px)";"string"==typeof m&&m.endsWith("vw")&&(m=`clamp(250px, ${m}, 800px)`);const d="function"==typeof a?n.createElement(a):a,u=(t||"").startsWith("/")?(0,r.Z)(t):t,g=t?n.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},p):p;return n.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:m}}},title:n.createElement("span",{className:c},(0,o.Z)(d)),placement:"top",arrow:!0},n.createElement("span",{className:i},g))}s.isMDXComponent=!0},99372:(e,t,a)=>{a.d(t,{gJ:()=>p,eH:()=>g,U6:()=>d,OS:()=>u});var n=a(67294),r=a(95999);const l="markedText_c6kK",o="since_c1Q3",i="until_jXK6",c="removed_A_Kf",s="versionNumber_BiUX",p=new Map;function m(e){let{children:t,className:a}=e;return n.createElement("span",{className:l+(a?" "+a:"")},t)}function d(e){let{children:t,v:a}=e;return n.createElement(m,{className:o},t,"\xa0",n.createElement("span",{className:s},n.createElement("small",null,"(",p.get(`since-${a}`),")")))}function u(e){let{children:t,v:a}=e;return n.createElement(m,{className:i},t,"\xa0",n.createElement("span",{className:s},n.createElement("small",null,"(",p.get(`until-${a}`),")")))}function g(e){let{children:t,v:a}=e;return n.createElement(m,{className:c},t,"\xa0",n.createElement("span",{className:s},n.createElement("small",null,"(",p.get(`removed-${a}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",n.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",n.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",n.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",n.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",n.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",n.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",n.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",n.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",n.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",n.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",n.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",n.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",n.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",n.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",n.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",n.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",n.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",n.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",n.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",n.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",n.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",n.createElement(r.Z,null,"since C++23")),p.set("removed-",n.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",n.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",n.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",n.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",n.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",n.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",n.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",n.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,a)=>{function n(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}a.d(t,{Z:()=>n})},47965:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"std/algo/ordinary/_codes/lexicographical_compare/since-cpp17",id:"std/algo/ordinary/_codes/lexicographical_compare/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/lexicographical_compare",slug:"/std/algo/ordinary/_codes/lexicographical_compare/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},c={},s=[],p={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class Compare >\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool lexicographical_compare( ExecutionPolicy&& policy,\n                              ForwardIt1 first1, ForwardIt1 last1,\n                              ForwardIt2 first2, ForwardIt2 last2 );\n\n// (4)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class Compare >\nbool lexicographical_compare( ExecutionPolicy&& policy,\n                              ForwardIt1 first1, ForwardIt1 last1,\n                              ForwardIt2 first2, ForwardIt2 last2,\n                              Compare comp );\n")))}m.isMDXComponent=!0},10183:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"std/algo/ordinary/_codes/lexicographical_compare/since-cpp20",id:"std/algo/ordinary/_codes/lexicographical_compare/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/lexicographical_compare",slug:"/std/algo/ordinary/_codes/lexicographical_compare/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/lexicographical_compare/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},c={},s=[],p={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nconstexpr bool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class Compare >\nconstexpr bool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nbool lexicographical_compare( ExecutionPolicy&& policy,\n                              ForwardIt1 first1, ForwardIt1 last1,\n                              ForwardIt2 first2, ForwardIt2 last2 );\n\n// (4)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class Compare >\nbool lexicographical_compare( ExecutionPolicy&& policy,\n                              ForwardIt1 first1, ForwardIt1 last1,\n                              ForwardIt2 first2, ForwardIt2 last2,\n                              Compare comp );\n")))}m.isMDXComponent=!0},82616:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"std/algo/ordinary/_codes/lexicographical_compare/until-cpp17",id:"std/algo/ordinary/_codes/lexicographical_compare/until-cpp17",title:"until-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/lexicographical_compare/until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/lexicographical_compare",slug:"/std/algo/ordinary/_codes/lexicographical_compare/until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/lexicographical_compare/until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/lexicographical_compare/until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},c={},s=[],p={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2 >\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class Compare >\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Compare comp );\n")))}m.isMDXComponent=!0},90924:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>h,default:()=>_,frontMatter:()=>g,metadata:()=>f,toc:()=>y});var n=a(87462),r=a(67294),l=a(3905),o=a(55059),i=a(22307),c=a(99801),s=a(18510),p=a(99372),m=a(14064),d=(a(82616),a(47965)),u=a(10183);const g={title:"lexicographical_compare algorithm",sidebar_label:"lexicographical_compare(  )",description:"lexicographical_compare algorithm C++ documentation",hide_title:!0,tags:["algorithm","lexicographical_compare","lexicographical","compare"],cppreference_origin_rel:"w/cpp/algorithm/lexicographical_compare"},h=void 0,f={unversionedId:"std/algo/ordinary/lexicographical_compare",id:"std/algo/ordinary/lexicographical_compare",title:"lexicographical_compare algorithm",description:"lexicographical_compare algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/lexicographical_compare.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/lexicographical_compare",permalink:"/CppLangNet/docs/std/algo/ordinary/lexicographical_compare",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/lexicographical_compare.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"lexicographical_compare",permalink:"/CppLangNet/docs/tags/lexicographical-compare"},{label:"lexicographical",permalink:"/CppLangNet/docs/tags/lexicographical"},{label:"compare",permalink:"/CppLangNet/docs/tags/compare"}],version:"current",frontMatter:{title:"lexicographical_compare algorithm",sidebar_label:"lexicographical_compare(  )",description:"lexicographical_compare algorithm C++ documentation",hide_title:!0,tags:["algorithm","lexicographical_compare","lexicographical","compare"],cppreference_origin_rel:"w/cpp/algorithm/lexicographical_compare"},sidebar:"defaultSidebar",previous:{title:"equal(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/equal"},next:{title:"lexicographical_compare_three_way(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/lexicographical_compare_three_way"}},k={},y=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],b=(v="Signature_UntilCpp14",function(e){return console.warn("Component "+v+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var v;const x={toc:y};function _(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},x,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdlexicographical_compare-algorithm"},"std::lexicographical_compare() algorithm"),(0,l.kt)(c.Z,{content:{"since-cpp20":(0,l.kt)(u.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,l.kt)(d.default,{mdxType:"Signature_SinceCpp17"}),"until-cpp17":(0,l.kt)(b,{mdxType:"Signature_UntilCpp14"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Checks if the first range [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") is lexicographically less than the second range [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),")."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Elements are compared using ",(0,l.kt)("inlineCode",{parentName:"p"},"operator<"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Elements are compared using the given binary comparison function ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2 - 4)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)"),", but executed according to ",(0,l.kt)("inlineCode",{parentName:"p"},"policy"),"."),(0,l.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,l.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,l.kt)(p.OS,{v:"cpp20",mdxType:"Until"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," ")," ",(0,l.kt)(p.U6,{v:"cpp20",mdxType:"Since"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," ")," is ",(0,l.kt)("code",null,"true"),"."))),(0,l.kt)("p",null,"Lexicographical comparison is an operation with the following properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Two ranges are compared element by element."),(0,l.kt)("li",{parentName:"ul"},"The first mismatching element defines which range is lexicographically ",(0,l.kt)("em",{parentName:"li"},"less")," or greater than the other."),(0,l.kt)("li",{parentName:"ul"},"If one range is a prefix of another, the shorter range is lexicographically ",(0,l.kt)("em",{parentName:"li"},"less")," than the other."),(0,l.kt)("li",{parentName:"ul"},"If two ranges have equivalent elements and are of the same length, then the ranges are lexicographically equal."),(0,l.kt)("li",{parentName:"ul"},"An empty range is lexicographically less than any non-empty range."),(0,l.kt)("li",{parentName:"ul"},"Two empty ranges are lexicographically equal.")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r1"),mdxType:"Symbol"},"The first range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r2"),mdxType:"Symbol"},"The second range of elements compare."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements of the first range."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements of the second range."),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"comp"),mdxType:"Symbol"},(0,l.kt)("p",null,"Comparison function object (i.e. an object that satisfies the requirements of ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),"),\nwhich returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the first argument is ",(0,l.kt)("em",{parentName:"p"},"less")," than second."),(0,l.kt)("p",null,"The signature of the comparison function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool cmp(const Type1 &a, const Type2 &b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),", but must not modify arguments."),(0,l.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,l.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,l.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,l.kt)(p.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,l.kt)("code",null,"Type1")," unless for ",(0,l.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,l.kt)("li",{parentName:"ul"},"The types ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt2")," can be dereferenced and then implicitly converted to them.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(o.ZP,{mdxType:"SymbolTable"},(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"InputIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"InputIt2")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator")),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"ForwardIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"ForwardIt2")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyForwardIterator"},"LegacyForwardIterator")),(0,l.kt)(o.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"Compare"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/Compare"},"Compare"))),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the first range is lexicographically less than the second.."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Given ",(0,l.kt)("inlineCode",{parentName:"p"},"N1")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::distance(first1, last1)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"N2")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::distance(first2, last2)")),(0,l.kt)("p",null,"At most ",(0,l.kt)("strong",{parentName:"p"},"2 ","*"," min(N1, N2)")," applications of the comparison and corresponding projections."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"The overloads with a template parameter named ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,l.kt)(s.Z,{title:(0,l.kt)(m.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,l.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,l.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,l.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"lexicographical_compare(1) and lexicographical_compare(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct lexicographical_compare_fn\n{\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n             std::input_iterator I2, std::sentinel_for<I2> S2,\n             class Proj1 = std::identity, class Proj2 = std::identity,\n             std::indirect_strict_weak_order<\n                 std::projected<I1, Proj1>,\n                 std::projected<I2, Proj2>> Comp = ranges::less>\n    constexpr bool operator()(I1 first1, S1 last1, I2 first2, S2 last2,\n                              Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        for (; (first1 != last1) && (first2 != last2); ++first1, (void) ++first2)\n        {\n            if (std::invoke(comp, std::invoke(proj1, *first1), std::invoke(proj2, *first2)))\n                return true;\n\n            if (std::invoke(comp, std::invoke(proj2, *first2), std::invoke(proj1, *first1)))\n                return false;\n        }\n        return (first1 == last1) && (first2 != last2);\n    }\n\n    template<ranges::input_range R1, ranges::input_range R2,\n             class Proj1 = std::identity, class Proj2 = std::identity,\n             std::indirect_strict_weak_order<\n                 std::projected<ranges::iterator_t<R1>, Proj1>,\n                 std::projected<ranges::iterator_t<R2>, Proj2>> Comp = ranges::less>\n    constexpr bool operator()(R1&& r1, R2&& r2, Comp comp = {},\n                              Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        return (*this)(ranges::begin(r1), ranges::end(r1),\n                       ranges::begin(r2), ranges::end(r2),\n                       std::ref(comp), std::ref(proj1), std::ref(proj2));\n    }\n};\n\ninline constexpr lexicographical_compare_fn lexicographical_compare;\n"))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <random>\n#include <vector>\n\nint main()\n{\n    std::vector<char> v1 {'a', 'b', 'c', 'd'};\n    std::vector<char> v2 {'a', 'b', 'c', 'd'};\n\n    namespace ranges = std::ranges;\n    auto os = std::ostream_iterator<char>(std::cout, \" \");\n\n    std::mt19937 g {std::random_device {}()};\n    while (not ranges::lexicographical_compare(v1, v2))\n    {\n        ranges::copy(v1, os);\n        std::cout << \">= \";\n        ranges::copy(v2, os);\n        std::cout << '\\n';\n\n        ranges::shuffle(v1, g);\n        ranges::shuffle(v2, g);\n    }\n\n    ranges::copy(v1, os);\n    std::cout << \"<  \";\n    ranges::copy(v2, os);\n    std::cout << '\\n';\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"a b c d >= a b c d\nd a b c >= c b d a\nb d a c >= a d c b\na c d b <  c d a b\n")))))}_.isMDXComponent=!0}}]);