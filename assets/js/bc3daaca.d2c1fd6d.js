"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[5724],{85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),a=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>y});var r=n(87462),a=n(67294),l=n(86010),s=n(12466),o=n(76775),i=n(91980),p=n(67392),c=n(50012);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=d(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[i,p]=g({queryString:n,groupId:r}),[m,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),f=(()=>{const e=i??m;return u({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),k(e)}),[p,k,l]),tabValues:l}}var f=n(72389);const h="tabList__CuJ",N="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=p[n].value;r!==o&&(m(t),i(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:d},s,{className:(0,l.Z)("tabs__item",N,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function C(e){const t=k(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",h)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(b,(0,r.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return a.createElement(C,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(87462),a=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(67294),a=n(74866),l=n(85162),s=n(99372),o=n(72412);const i={};function p(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,p]=e;return p.value||p.simplified||p.detailed?r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:p.default||0==t},p.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:i.smallTabs},r.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(p.simplified)),r.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(p.detailed)))):p.value):r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,o.Z)(p))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>p});var r=n(67294),a=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function p(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function c(e){r.useContext(s.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const p=(e,t,n)=>!0===e?r.createElement("span",{className:l[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),p(e.static,"modStatic","static"),p(e.constexpr,"modConstexpr","constexpr"),p(e.const,"modConst","const"),p(e.volatile,"modVolatile","volatile"),p(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:l.symbolName},t),r.createElement("td",{className:l.symbolDesc},(0,a.Z)(n)))}c.isMDXComponent=!0,p.isMDXComponent=!0,p.Symbol=c},18510:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(67294),a=n(44996),l=n(34386),s=n(72412);const o="TooltipContent_Lvru",i="TooltipTitle_ukF2";function p(e){let{url:t,title:n,maxWidth:p,children:c}=e;let m=p||"clamp(250px, 25vw, 800px)";"string"==typeof m&&m.endsWith("vw")&&(m=`clamp(250px, ${m}, 800px)`);const d="function"==typeof n?r.createElement(n):n,u=(t||"").startsWith("/")?(0,a.Z)(t):t,g=t?r.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},c):c;return r.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:m}}},title:r.createElement("span",{className:i},(0,s.Z)(d)),placement:"top",arrow:!0},r.createElement("span",{className:o},g))}p.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>g,U6:()=>d,OS:()=>u});var r=n(67294),a=n(95999);const l="markedText_c6kK",s="since_c1Q3",o="until_jXK6",i="removed_A_Kf",p="versionNumber_BiUX",c=new Map;function m(e){let{children:t,className:n}=e;return r.createElement("span",{className:l+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return r.createElement(m,{className:s},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return r.createElement(m,{className:o},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(m,{className:i},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",r.createElement(a.Z,null,"deprecated")),c.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),c.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),c.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),c.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),c.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),c.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),c.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),c.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),c.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),c.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),c.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),c.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),c.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),c.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),c.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),c.set("removed-",r.createElement(a.Z,null,"deleted")),c.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),c.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),c.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),c.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),c.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),c.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),c.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},19670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ranges/_codes/merge/since-cpp20-detailed",id:"std/algo/ranges/_codes/merge/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/merge",slug:"/std/algo/ranges/_codes/merge/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/merge/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2\n  std::sentinel_for<I2> S2\n  std::weakly_incrementable O\n  class Comp = ranges::less\n  class Proj1 = std::identity\n class Proj2 = std::identity\n>\n  requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\nconstexpr merge_result<I1, I2, O>\n    merge( I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\n template<\n  ranges::input_range R1\n  ranges::input_range R2\n  std::weakly_incrementable O\n  class Comp = ranges::less\n  class Proj1 = std::identity\n  class Proj2 = std::identity\n>\n  requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n                          O, Comp, Proj1, Proj2>\nconstexpr merge_result<ranges::borrowed_iterator_t<R1>,\n                       ranges::borrowed_iterator_t<R2>, O>\n    merge( R1&& r1, R2&& r2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}m.isMDXComponent=!0},60595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ranges/_codes/merge/since-cpp20-simplified",id:"std/algo/ranges/_codes/merge/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/merge/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/merge",slug:"/std/algo/ranges/_codes/merge/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/merge/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/merge/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr merge_result<I1, I2, O>\n    merge( I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\nconstexpr merge_result<ranges::borrowed_iterator_t<R1>,\n                       ranges::borrowed_iterator_t<R2>, O>\n    merge( R1&& r1, R2&& r2, O result, Comp comp = {},\n           Proj1 proj1 = {}, Proj2 proj2 = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::forward_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::forward_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"O")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::weakly_incrementable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Proj2")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp")," template arguments have the following default types: ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::less")," for all overloads."),(0,a.kt)("p",null,"Additionaly, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"mergeable<I1, I2, O, Comp, Proj1, Proj2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>, O, Comp, Proj1, Proj2>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommited here for readability)"))}m.isMDXComponent=!0},74407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>u,default:()=>b,frontMatter:()=>d,metadata:()=>g,toc:()=>f});var r=n(87462),a=n(67294),l=n(3905),s=n(55059),o=n(22307),i=n(99801),p=n(18510),c=n(19670),m=n(60595);const d={title:"ranges::merge algorithm",sidebar_label:"ranges::merge(  )",description:"ranges::merge algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","merge"],cppreference_origin_rel:"w/cpp/algorithm/ranges/merge"},u=void 0,g={unversionedId:"std/algo/ranges/merge",id:"std/algo/ranges/merge",title:"ranges::merge algorithm",description:"ranges::merge algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/merge.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/merge",permalink:"/CppLangNet/docs/std/algo/ranges/merge",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/merge.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"merge",permalink:"/CppLangNet/docs/tags/merge"}],version:"current",frontMatter:{title:"ranges::merge algorithm",sidebar_label:"ranges::merge(  )",description:"ranges::merge algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","merge"],cppreference_origin_rel:"w/cpp/algorithm/ranges/merge"},sidebar:"defaultSidebar",previous:{title:"set_symmetric_difference(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/set_symmetric_difference"},next:{title:"ranges::inplace_merge(  )",permalink:"/CppLangNet/docs/std/algo/ranges/inplace_merge"}},k={},f=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],h=(N="Term_UndefinedBehaviour",function(e){return console.warn("Component "+N+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var N;const v={toc:f};function b(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdrangesmerge-algorithm"},"std::ranges::merge() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":{simplified:(0,l.kt)(m.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,l.kt)(c.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,l.kt)("p",null,"With the helper types defined as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template< class I1, class I2, class O >\nusing merge_result = ranges::in_in_out_result<I1, I2, O>;\n")),(0,l.kt)("p",null,"Merges two sorted ranges [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),") into one sorted range beginning at ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,l.kt)("p",null,"A sequence is said to be sorted with respect to the comparator ",(0,l.kt)("inlineCode",{parentName:"p"},"comp")," if for any iterator ",(0,l.kt)("inlineCode",{parentName:"p"},"it")," pointing to the sequence\nand any non-negative integer ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," such that ",(0,l.kt)("inlineCode",{parentName:"p"},"it + n")," is a valid iterator pointing to an element of the sequence,\n",(0,l.kt)("inlineCode",{parentName:"p"},"std::invoke(comp, std::invoke(proj2, *(it + n)), std::invoke(proj1, *it)))")," evaluates to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1)")," Elements are compared using the given binary comparison function ",(0,l.kt)("inlineCode",{parentName:"li"},"comp"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(2)")," Same as ",(0,l.kt)("strong",{parentName:"li"},"(1)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"li"},"r1")," as the first range and ",(0,l.kt)("inlineCode",{parentName:"li"},"r2")," as the second range, as if using ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::begin(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"first1"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::end(r1)")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"last1"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::begin(r2)")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"first2"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"ranges::end(r2)")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"last2"),".")),(0,l.kt)("p",null,"This merge function is ",(0,l.kt)("strong",{parentName:"p"},"stable"),", which means that for equivalent elements in the original two ranges,\nthe elements from the first range  precede the elements from the second range, preserving their original order."),(0,l.kt)("admonition",{title:"Undefined Behaviour",type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)(p.Z,{title:(0,l.kt)(h,{mdxType:"Term_UndefinedBehaviour"}),mdxType:"Tooltip"},"behavior is undefined")," if the destination range overlaps either of the input ranges (the input ranges may overlap each other).")),(0,l.kt)("p",null,"The function-like entities described on this page are ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,l.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first sorted range of elements to merge."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"r")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"r1")," "),mdxType:"Symbol"},"The first sorted range of elements to merge."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second sorted range of elements to merge."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r2"),mdxType:"Symbol"},"The second sorted range of elements to merge."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"result"),mdxType:"Symbol"},"The beginning of the destination range."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements in the first range."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements in the second range.")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"A value of type ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::merge_result")," initialized as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  last1,\n  last2,\n  result_last\n}\n")),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"result_last")," is the end of the constructed range."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Given ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::distance(first1, last1) + ranges::distance(first2, last12)")),(0,l.kt)("p",null,"At most ",(0,l.kt)("inlineCode",{parentName:"p"},"N \u2212 1")," comparisons and applications of each projection."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"merge(1) and merge(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct merge_fn\n{\n  template<std::input_iterator I1, std::sentinel_for<I1> S1,\n    std::input_iterator I2, std::sentinel_for<I2> S2,\n    std::weakly_incrementable O, class Comp = ranges::less,\n    class Proj1 = std::identity, class Proj2 = std::identity>\n      requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\n      constexpr ranges::merge_result<I1, I2, O>\n      operator()(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},\n          Proj1 proj1 = {}, Proj2 proj2 = {}) const\n      {\n        for (; !(first1 == last1 or first2 == last2); ++result)\n        {\n          if (std::invoke(comp, std::invoke(proj2, *first2), std::invoke(proj1, *first1)))\n            *result = *first2, ++first2;\n          else\n            *result = *first1, ++first1;\n        }\n        auto ret1 {ranges::copy(std::move(first1), std::move(last1), std::move(result))};\n        auto ret2 {ranges::copy(std::move(first2), std::move(last2), std::move(ret1.out))};\n        return {std::move(ret1.in), std::move(ret2.in), std::move(ret2.out)};\n      }\n\n  template<ranges::input_range R1, ranges::input_range R2, std::weakly_incrementable O,\n    class Comp = ranges::less,\n    class Proj1 = std::identity, class Proj2 = std::identity>\n      requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n    O, Comp, Proj1, Proj2>\n      constexpr ranges::merge_result<ranges::borrowed_iterator_t<R1>,\n    ranges::borrowed_iterator_t<R2>, O>\n      operator()(R1&& r1, R2&& r2, O result, Comp comp = {},\n          Proj1 proj1 = {}, Proj2 proj2 = {}) const\n      {\n        return (*this)(ranges::begin(r1), ranges::end(r1),\n            ranges::begin(r2), ranges::end(r2),\n            std::move(result), std::move(comp),\n            std::move(proj1), std::move(proj2));\n      }\n};\n\ninline constexpr merge_fn merge {};\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,"This algorithm performs a similar task as ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"ranges::set_union"))," does.\nBoth consume two sorted input ranges and produce a sorted output with elements from both inputs."),(0,l.kt)("p",null,"The difference between these two algorithms is with handling values from both input ranges which compare equivalent (see notes on ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/LessThanComparable"},"LessThanComparable"),"."),(0,l.kt)("p",null,"If any equivalent values appeared ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," times in the first range and ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," times in the second, ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"ranges::merge"))," would\noutput all ",(0,l.kt)("inlineCode",{parentName:"p"},"n + m")," occurrences whereas ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"ranges::set_union"))," would output ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::max(n, m)")," ones only."),(0,l.kt)("p",null,"So ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::merge"))," outputs exactly ",(0,l.kt)("inlineCode",{parentName:"p"},"std::distance(first1, last1) + std::distance(first2, last2)")," values and ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::set_union"))," may produce fewer."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("p",null,"The following code uses ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::merge")," to convert a string in place to uppercase using the ",(0,l.kt)("inlineCode",{parentName:"p"},"std::toupper")," function and then merges each char to its ordinal value.  "),(0,l.kt)("p",null,"Then ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::merge")," with a projection is used to merge elements of ",(0,l.kt)("inlineCode",{parentName:"p"},"std::vector<Foo>")," into chars to fill a ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,l.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <vector>\n\nvoid print(const auto& in1, const auto& in2, auto first, auto last)\n{\n    std::cout << "{ ";\n    for (const auto& e : in1) { std::cout << e << \' \'; }\n    std::cout << "} +\\n{ ";\n    for (const auto& e : in2) { std::cout << e << \' \'; }\n    std::cout << "} =\\n{ ";\n    while (!(first == last)) { std::cout << *first++ << \' \'; }\n    std::cout << "}\\n\\n";\n}\n\nint main()\n{\n    std::vector<int> in1, in2, out;\n\n    in1 = {1, 2, 3, 4, 5};\n    in2 = {      3, 4, 5, 6, 7};\n    out.resize(in1.size() + in2.size());\n    const auto ret = std::ranges::merge(in1, in2, out.begin());\n    print(in1, in2, out.begin(), ret.out);\n\n    in1 = {1, 2, 3, 4, 5, 5, 5};\n    in2 = {      3, 4, 5, 6, 7};\n    out.clear();\n    out.reserve(in1.size() + in2.size());\n    std::ranges::merge(in1, in2, std::back_inserter(out));\n    print(in1, in2, out.cbegin(), out.cend());\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"\n{ 1 2 3 4 5 } +\n{ 3 4 5 6 7 } =\n{ 1 2 3 3 4 4 5 5 6 7 }\n\n{ 1 2 3 4 5 5 5 } +\n{ 3 4 5 6 7 } =\n{ 1 2 3 3 4 4 5 5 5 5 6 7 }\n")))))}b.isMDXComponent=!0}}]);