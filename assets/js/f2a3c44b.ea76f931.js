"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[60301],{14064:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}s.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),l=n(86010),s=n(12466),o=n(76775),i=n(91980),c=n(67392),d=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[i,c]=h({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),k=(()=>{const e=i??p;return u({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var k=n(72389);const y="tabList__CuJ",g="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=c[n].value;a!==o&&(p(t),i(a))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:u,onClick:m},s,{className:(0,l.Z)("tabs__item",g,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",y)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(87462),r=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),l=n(85162),s=n(99372),o=n(72412);const i={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(c.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(c.detailed)))):c.value):a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,o.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>d,ZP:()=>c});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function d(e){a.useContext(s.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}d.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=d},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(44996),l=n(34386),s=n(72412);const o="TooltipContent_Lvru",i="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:d}=e;let p=c||"clamp(250px, 25vw, 800px)";"string"==typeof p&&p.endsWith("vw")&&(p=`clamp(250px, ${p}, 800px)`);const m="function"==typeof n?a.createElement(n):n,u=(t||"").startsWith("/")?(0,r.Z)(t):t,h=t?a.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},d):d;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:p}}},title:a.createElement("span",{className:i},(0,s.Z)(m)),placement:"top",arrow:!0},a.createElement("span",{className:o},h))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>d,eH:()=>h,U6:()=>m,OS:()=>u});var a=n(67294),r=n(95999);const l="markedText_c6kK",s="since_c1Q3",o="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",d=new Map;function p(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return a.createElement(p,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",d.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return a.createElement(p,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",d.get(`until-${n}`),")")))}function h(e){let{children:t,v:n}=e;return a.createElement(p,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",d.get(`removed-${n}`),")")))}d.set("cpp98","C++98"),d.set("cpp03","C++03"),d.set("cpp11","C++11"),d.set("cpp14","C++14"),d.set("cpp17","C++17"),d.set("cpp20","C++20"),d.set("cpp23","C++23"),d.set("deprecated-",a.createElement(r.Z,null,"deprecated")),d.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),d.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),d.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),d.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),d.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),d.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),d.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),d.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),d.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),d.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),d.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),d.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),d.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),d.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),d.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),d.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),d.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),d.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),d.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),d.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),d.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),d.set("removed-",a.createElement(r.Z,null,"deleted")),d.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),d.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),d.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),d.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),d.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),d.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),d.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},37476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/search/since-cpp17",id:"std/algo/ordinary/_codes/search/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/search/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/search",slug:"/std/algo/ordinary/_codes/search/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/search/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/search/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class ForwardIt1, class ForwardIt2 >\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last );\n\n// (2)\ntemplate< class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last,\n                   BinaryPredicate p );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nForwardIt1 search( ExecutionPolicy&& policy,\n                   ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last );\n\n// (4)\ntemplate< class ExecutionPolicy,\n          class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nForwardIt1 search( ExecutionPolicy&& policy,\n                   ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last,\n                   BinaryPredicate p );\n\n// (5)\ntemplate< class ForwardIt, class Searcher >\nForwardIt search( ForwardIt first, ForwardIt last, const Searcher& searcher );\n")))}p.isMDXComponent=!0},60580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/search/since-cpp20",id:"std/algo/ordinary/_codes/search/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/search/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/search",slug:"/std/algo/ordinary/_codes/search/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/search/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/search/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class ForwardIt1, class ForwardIt2 >\nconstexpr ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last );\n\n// (2)\ntemplate< class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nconstexpr ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last,\n                   BinaryPredicate p );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >\nForwardIt1 search( ExecutionPolicy&& policy,\n                   ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last );\n\n// (4)\ntemplate< class ExecutionPolicy,\n          class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nForwardIt1 search( ExecutionPolicy&& policy,\n                   ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last,\n                   BinaryPredicate p );\n\n// (5)\ntemplate< class ForwardIt, class Searcher >\nconstexpr ForwardIt search( ForwardIt first, ForwardIt last, const Searcher& searcher );\n")))}p.isMDXComponent=!0},60271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/search/until-cpp17",id:"std/algo/ordinary/_codes/search/until-cpp17",title:"until-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/search/until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/search",slug:"/std/algo/ordinary/_codes/search/until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/search/until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/search/until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class ForwardIt1, class ForwardIt2 >\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last );\n\n// (2)\ntemplate< class ForwardIt1, class ForwardIt2, class BinaryPredicate >\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\n                   ForwardIt2 s_first, ForwardIt2 s_last,\n                   BinaryPredicate p );\n")))}p.isMDXComponent=!0},74067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>k,default:()=>v,frontMatter:()=>f,metadata:()=>y,toc:()=>N});var a=n(87462),r=n(67294),l=n(3905),s=n(55059),o=n(22307),i=n(99801),c=n(18510),d=n(99372),p=n(14064),m=n(60271),u=n(37476),h=n(60580);const f={title:"search algorithm",sidebar_label:"search(  )",description:"search algorithm C++ documentation",hide_title:!0,tags:["algorithm","find","search","look"],cppreference_origin_rel:"w/cpp/algorithm/search"},k=void 0,y={unversionedId:"std/algo/ordinary/search",id:"std/algo/ordinary/search",title:"search algorithm",description:"search algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/search.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/search",permalink:"/CppLangNet/docs/std/algo/ordinary/search",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/search.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"find",permalink:"/CppLangNet/docs/tags/find"},{label:"search",permalink:"/CppLangNet/docs/tags/search"},{label:"look",permalink:"/CppLangNet/docs/tags/look"}],version:"current",frontMatter:{title:"search algorithm",sidebar_label:"search(  )",description:"search algorithm C++ documentation",hide_title:!0,tags:["algorithm","find","search","look"],cppreference_origin_rel:"w/cpp/algorithm/search"},sidebar:"defaultSidebar",previous:{title:"adjacent_find(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/adjacent_find"},next:{title:"search_n(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/search_n"}},g={},N=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],b={toc:N};function v(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdsearch-algorithm"},"std::search() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":(0,l.kt)(h.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,l.kt)(u.default,{mdxType:"Signature_SinceCpp17"}),"until-cpp17":(0,l.kt)(m.default,{mdxType:"Signature_UntilCpp17"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Searches for the first occurence of a range of elements inside another range."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1 - 4)")," Searches for the first occurrence of the sequence of elements [",(0,l.kt)("inlineCode",{parentName:"p"},"s_first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"s_last"),") in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),"):"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Elements are compared using ",(0,l.kt)("inlineCode",{parentName:"p"},"operator=="),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Elements are compared using the given binary predicate ",(0,l.kt)("inlineCode",{parentName:"p"},"p"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(3 - 4)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1 - 2)"),", but executed according to ",(0,l.kt)("inlineCode",{parentName:"p"},"policy"),"."),(0,l.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,l.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,l.kt)(d.OS,{v:"cpp20",mdxType:"Until"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," ")," ",(0,l.kt)(d.U6,{v:"cpp20",mdxType:"Since"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," ")," is ",(0,l.kt)("code",null,"true"),".")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(5)")," Searches the sequence [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") for the pattern specified in the constructor of ",(0,l.kt)("inlineCode",{parentName:"p"},"searcher"),".\nEffectively executes ",(0,l.kt)("inlineCode",{parentName:"p"},"return searcher(first, last).first;"),"."),(0,l.kt)("admonition",{parentName:"li",type:"important"},(0,l.kt)("p",{parentName:"admonition"},"Searcher cannot be ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/CopyConstructible"},"CopyConstructible"),".")),(0,l.kt)("p",{parentName:"li"},"The standard library provides the following searchers:"),(0,l.kt)(i.Z,{content:{"since-cpp17":(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,linkName:"#",name:"default_searcher",mdxType:"Symbol"},"Standard C++ library search algorithm implementation."),(0,l.kt)(s.mN,{none:!0,linkName:"#",name:"boyer_moore_searcher",mdxType:"Symbol"},"Boyer-Moore search algorithm implementation."),(0,l.kt)(s.mN,{none:!0,linkName:"#",name:"boyer_moore_horspool_searcher",mdxType:"Symbol"},"Boyer-Moore-Horspool search algorithm implementation."))},mdxType:"SwitchView"}))),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to examine."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"s_first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"s_last")," "),mdxType:"Symbol"},"The range of elements to search for."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"policy"),mdxType:"Symbol"},"The execution policy to use. See ",(0,l.kt)("a",{href:"#"},"execution policy")," for details."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"searcher"),mdxType:"Symbol"},"The searcher encapsulating the search algorithm and the pattern to look for."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"p"),mdxType:"Symbol"},(0,l.kt)("p",null,"Binary predicate which returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the elements should be treated as equal.\nThe signature of the function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool fun(const Type1& a, const Type2& b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),"."),(0,l.kt)("li",{parentName:"ul"},"The function ",(0,l.kt)("strong",{parentName:"li"},"must not")," modify the objects passed to it"),(0,l.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,l.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,l.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,l.kt)(d.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,l.kt)("code",null,"Type1")," unless for ",(0,l.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,l.kt)("li",{parentName:"ul"},"The types ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"ForwardIt1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"ForwardIt2")," can be dereferenced and then implicitly converted to them.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"ForwardIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"ForwardIt2")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyForwardIterator"},"LegacyForwardIterator")),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"Searcher"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/Searcher"},"Searcher"))),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1 - 4)")," Iterator to the beginning of first occurrence of the sequence [",(0,l.kt)("inlineCode",{parentName:"p"},"s_first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"s_last"),") in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),")."),(0,l.kt)(d.U6,{v:"cpp11",mdxType:"Since"}," If [",(0,l.kt)("code",null,"s_first"),"; ",(0,l.kt)("code",null,"s_last"),") is empty or if no such sequence is found, ",(0,l.kt)("code",null,"last")," is returned. "),(0,l.kt)("br",null),(0,l.kt)(d.OS,{v:"cpp11",mdxType:"Until"}," If no such sequence is found, ",(0,l.kt)("code",null,"last")," is returned. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(5)")," Returns the result of searcher's ",(0,l.kt)("inlineCode",{parentName:"p"},"operator()"),", that is, an iterator to the location at which the substring is found or a copy of ",(0,l.kt)("inlineCode",{parentName:"p"},"last")," if it was not found."))),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(1 - 4)")," Given ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"std::distance(s_first, s_last)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"std::distance(first, last)"),":\nAt most ",(0,l.kt)("strong",{parentName:"p"},"S * N")," comparisons."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(5)")," Depends on the searcher. Standard searchers don't have a guaranteed complexity."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"The overloads with a template parameter named ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,l.kt)(c.Z,{title:(0,l.kt)(p.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,l.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,l.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,l.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"search (1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class ForwardIt1, class ForwardIt2>\nconstexpr ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,\n                            ForwardIt2 s_first, ForwardIt2 s_last)\n{\n    while (true)\n    {\n        ForwardIt1 it = first;\n        for (ForwardIt2 s_it = s_first; ; ++it, ++s_it)\n        {\n            if (s_it == s_last)\n                return first;\n            if (it == last)\n                return last;\n            if (!(*it == *s_it))\n                break;\n        }\n        ++first;\n    }\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"search (2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class ForwardIt1, class ForwardIt2, class BinaryPredicate>\nconstexpr ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,\n                            ForwardIt2 s_first, ForwardIt2 s_last,\n                            BinaryPredicate p)\n{\n    while (true)\n    {\n        ForwardIt1 it = first;\n        for (ForwardIt2 s_it = s_first; ; ++it, ++s_it)\n        {\n            if (s_it == s_last)\n                return first;\n            if (it == last)\n                return last;\n            if (!p(*it, *s_it))\n                break;\n        }\n        ++first;\n    }\n}\n"))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <string_view>\n#include <vector>\nusing namespace std::literals;\n\nbool contains(const auto& cont, std::string_view s)\n{\n    // str.find() (or str.contains(), since C++23) can be used as well\n    return std::search(cont.begin(), cont.end(), s.begin(), s.end()) != cont.end();\n}\n\nint main()\n{\n    const auto str {"why waste time learning, when ignorance is instantaneous?"sv};\n\n    std::cout << std::boolalpha\n              << contains(str, "learning") << \'\\n\'   // true\n              << contains(str, "lemming")  << \'\\n\';  // false\n\n    const std::vector vec(str.begin(), str.end());\n    std::cout << contains(vec, "learning") << \'\\n\'   // true\n              << contains(vec, "leaning")  << \'\\n\';  // false\n\n    // The C++17 overload with searchers demo:\n    constexpr auto haystack\n    {\n        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "\n        "do eiusmod tempor incididunt ut labore et dolore magna aliqua"sv\n    };\n\n    for (const auto needle : {"pisci"sv, "Pisci"sv})\n    {\n        const std::boyer_moore_searcher searcher(needle.begin(), needle.end());\n        const auto it = std::search(haystack.begin(), haystack.end(), searcher);\n        std::cout << "The string " << std::quoted(needle) << \' \';\n        if (it == haystack.end())\n            std::cout << "not found\\n";\n        else\n            std::cout << "found at offset " << it - haystack.begin() << \'\\n\';\n    }\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},'true\nfalse\ntrue\nfalse\nThe string "pisci" found at offset 43\nThe string "Pisci" not found\n')))))}v.isMDXComponent=!0}}]);