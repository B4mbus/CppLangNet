"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[55719,2987,46398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(87462),a=n(67294),o=n(86010),l=n(12466),s=n(76775),i=n(91980),p=n(67392),c=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function _(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=u(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[i,p]=g({queryString:n,groupId:r}),[d,_]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=i??d;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),_(e)}),[p,_,o]),tabValues:o}}var f=n(72389);const k="tabList__CuJ",y="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),r=p[n].value;r!==s&&(d(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:u},l,{className:(0,o.Z)("tabs__item",y,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function C(e){const t=_(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",k)},a.createElement(N,(0,r.Z)({},e,t)),a.createElement(b,(0,r.Z)({},e,t)))}function v(e){const t=(0,f.Z)();return a.createElement(C,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(87462),a=n(67294);const o="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:o,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(67294),a=n(74866),o=n(85162),l=n(99372),s=n(72412);const i={};function p(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,p]=e;return p.value||p.simplified||p.detailed?r.createElement(o.Z,{value:n,label:l.gJ.get(n),default:p.default||0==t},p.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:i.smallTabs},r.createElement(o.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(p.simplified)),r.createElement(o.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(p.detailed)))):p.value):r.createElement(o.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,s.Z)(p))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>c,ZP:()=>p});var r=n(67294),a=n(72412);const o={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:o.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:o.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:o.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:o.accessPrivate}},i=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function p(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:o.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function c(e){r.useContext(l.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const p=(e,t,n)=>!0===e?r.createElement("span",{className:o[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:o.symbolProp},(e=>{const t=i(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),p(e.static,"modStatic","static"),p(e.constexpr,"modConstexpr","constexpr"),p(e.const,"modConst","const"),p(e.volatile,"modVolatile","volatile"),p(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:o.symbolName},t),r.createElement("td",{className:o.symbolDesc},(0,a.Z)(n)))}c.isMDXComponent=!0,p.isMDXComponent=!0,p.Symbol=c},99372:(e,t,n)=>{n.d(t,{gJ:()=>c,eH:()=>g,U6:()=>u,OS:()=>m});var r=n(67294),a=n(95999);const o="markedText_c6kK",l="since_c1Q3",s="until_jXK6",i="removed_A_Kf",p="versionNumber_BiUX",c=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:o+(n?" "+n:"")},t)}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:l},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:s},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:p},r.createElement("small",null,"(",c.get(`removed-${n}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",r.createElement(a.Z,null,"deprecated")),c.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),c.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),c.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),c.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),c.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),c.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),c.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),c.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),c.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),c.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),c.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),c.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),c.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),c.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),c.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),c.set("removed-",r.createElement(a.Z,null,"deleted")),c.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),c.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),c.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),c.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),c.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),c.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),c.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},38247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l=void 0,s={unversionedId:"std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed",id:"std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/partial_sort_copy",slug:"/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::random_access_iterator I2,\n  std::sentinel_for<I2> S2,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::indirectly_copyable<I1, I2>\n           && std::sortable<I2, Comp, Proj2>\n           && std::indirect_strict_weak_order<Comp, std::projected<I1, Proj1>, std::projected<I2, Proj2>>\nconstexpr partial_sort_copy_result<I1, I2>\n    partial_sort_copy( I1 first, S1 last, I2 result_first, S2 result_last,\n                       Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\ntemplate<\n  ranges::input_range R1,\n  ranges::random_access_range R2,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::indirectly_copyable<ranges::iterator_t<R1>, ranges::iterator_t<R2>>\n           && std::sortable<ranges::iterator_t<R2>, Comp, Proj2>\n           && std::indirect_strict_weak_order<Comp, std::projected<ranges::iterator_t<R1>,\n             Proj1>, std::projected<ranges::iterator_t<R2>, Proj2>>\nconstexpr partial_sort_copy_result<ranges::borrowed_iterator_t<R1>,\n                                   ranges::borrowed_iterator_t<R2>>\n    partial_sort_copy( R1&& r, R2&& result_r, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}d.isMDXComponent=!0},59166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l=void 0,s={unversionedId:"std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified",id:"std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/partial_sort_copy",slug:"/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/partial_sort_copy/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr partial_sort_copy_result<I1, I2>\n    partial_sort_copy( I1 first, S1 last, I2 result_first, S2 result_last,\n                       Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\nconstexpr partial_sort_copy_result<ranges::borrowed_iterator_t<R1>,\n                                   ranges::borrowed_iterator_t<R2>>\n    partial_sort_copy( R1&& r, R2&& result_r, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::input_iterator"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::random_access_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::input_range"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::random_access_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Proj2")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj2")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp")," template arguments have, the following default types for all overloads: ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::less"),"."),(0,a.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::indirectly_copyable<I1, I2>\n&& std::sortable<I2, Comp, Proj2>\n&& std::indirect_strict_weak_order<\n     Comp,\n     std::projected<I1, Proj1>,\n     std::projected<I2, Proj2>\n   >\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::indirectly_copyable<ranges::iterator_t<R1>, ranges::iterator_t<R2>>\n&& std::sortable<ranges::iterator_t<R2>, Comp, Proj2>\n&& std::indirect_strict_weak_order<\n     Comp,\n     std::projected<ranges::iterator_t<R1>, Proj1>,\n     std::projected<ranges::iterator_t<R2>, Proj2>\n   >\n")))))}d.isMDXComponent=!0},81302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>k,frontMatter:()=>d,metadata:()=>m,toc:()=>_});var r=n(87462),a=n(67294),o=n(3905),l=n(55059),s=n(22307),i=n(99801),p=n(38247),c=n(59166);const d={title:"ranges::partial_sort_copy algorithm",sidebar_label:"ranges::partial_sort_copy(  )",description:"ranges::partial_sort_copy algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","partial_sort_copy","partial_sort","sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/ranges/partial_sort_copy"},u=void 0,m={unversionedId:"std/algo/ranges/partial_sort_copy",id:"std/algo/ranges/partial_sort_copy",title:"ranges::partial_sort_copy algorithm",description:"ranges::partial_sort_copy algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/partial_sort_copy.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/partial_sort_copy",permalink:"/CppLangNet/docs/std/algo/ranges/partial_sort_copy",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/partial_sort_copy.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"partial_sort_copy",permalink:"/CppLangNet/docs/tags/partial-sort-copy"},{label:"partial_sort",permalink:"/CppLangNet/docs/tags/partial-sort"},{label:"sort",permalink:"/CppLangNet/docs/tags/sort"},{label:"ascending",permalink:"/CppLangNet/docs/tags/ascending"},{label:"order",permalink:"/CppLangNet/docs/tags/order"}],version:"current",frontMatter:{title:"ranges::partial_sort_copy algorithm",sidebar_label:"ranges::partial_sort_copy(  )",description:"ranges::partial_sort_copy algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","partial_sort_copy","partial_sort","sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/ranges/partial_sort_copy"},sidebar:"defaultSidebar",previous:{title:"ranges::partial_sort(  )",permalink:"/CppLangNet/docs/std/algo/ranges/partial_sort"},next:{title:"ranges::nth_element(  )",permalink:"/CppLangNet/docs/std/algo/ranges/nth_element"}},g={},_=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],f={toc:_};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stdrangespartial_sort_copy-algorithm"},"std::ranges::partial_sort_copy() algorithm"),(0,o.kt)(i.Z,{content:{"since-cpp20":{simplified:(0,o.kt)(c.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,o.kt)(p.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,o.kt)("p",null,"With the helper types defined as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template< class I, class O >\nusing partial_sort_copy_result = ranges::in_out_result<I, O>;\n")),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"L1")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"L2")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(result_first, result_last)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::min(L1, L2)"),":"),(0,o.kt)("p",null,"Copies the first ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," elements from the source range [",(0,o.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,o.kt)("inlineCode",{parentName:"p"},"last"),"), as if it was partially sorted with respect to ",(0,o.kt)("inlineCode",{parentName:"p"},"comp")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"proj1"),",\ninto the destination range [",(0,o.kt)("inlineCode",{parentName:"p"},"result_first"),"; ",(0,o.kt)("inlineCode",{parentName:"p"},"result_first + N"),")."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The order of equal elements is ",(0,o.kt)("strong",{parentName:"p"},"not")," guaranteed to be preserved.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"(1)")," The source range elements are projected using the function object ",(0,o.kt)("inlineCode",{parentName:"p"},"proj1"),", and the destination elements are projected using the function object ",(0,o.kt)("inlineCode",{parentName:"p"},"proj2"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,o.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,o.kt)("inlineCode",{parentName:"p"},"r")," as the source range and ",(0,o.kt)("inlineCode",{parentName:"p"},"result_r")," as the destination range,\nas if using ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"first"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"last"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::begin(result_r)")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"result_first"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::end(result_r)")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"result_last"),"."))),(0,o.kt)("p",null,"The function-like entities described on this page are ",(0,o.kt)("a",{parentName:"p",href:"/docs/algo/niebloids"},(0,o.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)(l.ZP,{mdxType:"SymbolTable"},(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)(a.Fragment,null," ",(0,o.kt)("code",null,"first")," ",(0,o.kt)("br",null)," ",(0,o.kt)("code",null,"last")," "),mdxType:"Symbol"},"The source range to copy from."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"r"),mdxType:"Symbol"},"The source range to copy from."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)(a.Fragment,null," ",(0,o.kt)("code",null,"result_first")," ",(0,o.kt)("br",null)," ",(0,o.kt)("code",null,"result_last")," "),mdxType:"Symbol"},"The destination range."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"result_r"),mdxType:"Symbol"},"The destination range."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"comp"),mdxType:"Symbol"},"Comparison object to apply to the projected elements."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements of the ",(0,o.kt)("b",null,"source")," range."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements of the ",(0,o.kt)("b",null,"destination")," range.")),(0,o.kt)("h3",{id:"return-value"},"Return value"),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"L1")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"L2")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(result_first, result_last)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::min(L1, L2)"),":"),(0,o.kt)("p",null,"An object of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::partial_sort_copy_result")," initialized as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  last,\n  result_first + N\n}.\n")),(0,o.kt)("h3",{id:"complexity"},"Complexity"),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"L1")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"L2")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::distance(result_first, result_last)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"ranges::min(L1, L2)"),":"),(0,o.kt)("p",null,"At most ",(0,o.kt)("strong",{parentName:"p"},"L1 ","*"," log(N)")," comparisons and ",(0,o.kt)("strong",{parentName:"p"},"2 ","*"," L1 ","*"," log(N)")," projections."),(0,o.kt)("h3",{id:"exceptions"},"Exceptions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(none)")),(0,o.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"partial_sort_copy(1) and partial_sort_copy(2)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"struct partial_sort_copy_fn\n{\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n             std::random_access_iterator I2, std::sentinel_for<I2> S2,\n             class Comp = ranges::less, class Proj1 = std::identity,\n             class Proj2 = std::identity>\n    requires std::indirectly_copyable<I1, I2> && std::sortable<I2, Comp, Proj2> &&\n             std::indirect_strict_weak_order<Comp, std::projected<I1, Proj1>,\n             std::projected<I2, Proj2>>\n    constexpr ranges::partial_sort_copy_result<I1, I2>\n        operator()( I1 first, S1 last, I2 result_first, S2 result_last,\n                    Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} ) const\n    {\n        if (result_first == result_last)\n            return {std::move(ranges::next(std::move(first), std::move(last))),\n                    std::move(result_first)};\n\n        auto out_last {result_first};\n        // copy first N elements\n        for (; !(first == last or out_last == result_last); ++out_last, ++first)\n            *out_last = *first;\n\n        // convert N copied elements into a max-heap\n        ranges::make_heap(result_first, out_last, comp, proj2);\n\n        // process the rest of the input range (if any), preserving the heap property\n        for (; first != last; ++first)\n        {\n            if (std::invoke(comp, std::invoke(proj1, *first),\n                                  std::invoke(proj2, *result_first)))\n            {\n                // pop out the biggest item and push in a newly found smaller one\n                ranges::pop_heap(result_first, out_last, comp, proj2);\n                *(out_last - 1) = *first;\n                ranges::push_heap(result_first, out_last, comp, proj2);\n            }\n        }\n\n        // first N elements in the output range is still\n        // a heap - convert it into a sorted range\n        ranges::sort_heap(result_first, out_last, comp, proj2);\n\n        return {std::move(first), std::move(out_last)};\n    }\n\n    template<ranges::input_range R1, ranges::random_access_range R2,\n             class Comp = ranges::less, class Proj1 = std::identity,\n             class Proj2 = std::identity>\n    requires std::indirectly_copyable<ranges::iterator_t<R1>, ranges::iterator_t<R2>> &&\n             std::sortable<ranges::iterator_t<R2>, Comp, Proj2> &&\n             std::indirect_strict_weak_order<Comp, std::projected<ranges::iterator_t<R1>,\n             Proj1>, std::projected<ranges::iterator_t<R2>, Proj2>>\n    constexpr ranges::partial_sort_copy_result<ranges::borrowed_iterator_t<R1>,\n              ranges::borrowed_iterator_t<R2>>\n        operator()( R1&& r, R2&& result_r, Comp comp = {},\n                    Proj1 proj1 = {}, Proj2 proj2 = {} ) const\n    {\n        return (*this)(ranges::begin(r), ranges::end(r),\n                       ranges::begin(result_r), ranges::end(result_r),\n                       std::move(comp), std::move(proj1), std::move(proj2));\n    }\n};\n\ninline constexpr partial_sort_copy_fn partial_sort_copy {};\n"))),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <forward_list>\n#include <functional>\n#include <iostream>\n#include <ranges>\n#include <string_view>\n#include <vector>\n\nvoid print(std::string_view rem, std::ranges::input_range auto const& v)\n{\n    for (std::cout << rem; const auto& e : v)\n        std::cout << e << \' \';\n    std::cout << \'\\n\';\n}\n\nint main()\n{\n    const std::forward_list source {4, 2, 5, 1, 3};\n\n    print("Write to the smaller vector in ascending order: ", "");\n\n    std::vector dest1 {10, 11, 12};\n    print("const source list: ", source);\n    print("destination range: ", dest1);\n    std::ranges::partial_sort_copy(source, dest1);\n    print("partial_sort_copy: ", dest1);\n\n    print("Write to the larger vector in descending order:", "");\n\n    std::vector dest2 {10, 11, 12, 13, 14, 15, 16};\n    print("const source list: ", source);\n    print("destination range: ", dest2);\n    std::ranges::partial_sort_copy(source, dest2, std::greater{});\n    print("partial_sort_copy: ", dest2);\n}\n'))),(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"Write to the smaller vector in ascending order:\nconst source list: 4 2 5 1 3\ndestination range: 10 11 12\npartial_sort_copy: 1 2 3\nWrite to the larger vector in descending order:\nconst source list: 4 2 5 1 3\ndestination range: 10 11 12 13 14 15 16\npartial_sort_copy: 5 4 3 2 1 15 16\n")))))}k.isMDXComponent=!0}}]);