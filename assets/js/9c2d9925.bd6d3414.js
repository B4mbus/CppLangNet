"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[24535,76262,61533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),r=n(67294),l=n(86010),i=n(12466),s=n(76775),o=n(91980),c=n(67392),u=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,c]=g({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),v=(()=>{const e=o??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{v&&s(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var v=n(72389);const b="tabList__CuJ",h="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==s&&(p(t),o(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",h,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function C(e){const t=(0,v.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(87462),r=n(67294);const l="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),l=n(85162),i=n(99372),s=n(72412);const o={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(l.Z,{value:n,label:i.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:o.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(c.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(c.detailed)))):c.value):a.createElement(l.Z,{value:n,label:i.gJ.get(n),default:0==t},(0,s.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>u,ZP:()=>c});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var i=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},o=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function u(e){a.useContext(i.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=o(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}u.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=u},99372:(e,t,n)=>{n.d(t,{gJ:()=>u,eH:()=>g,U6:()=>d,OS:()=>m});var a=n(67294),r=n(95999);const l="markedText_c6kK",i="since_c1Q3",s="until_jXK6",o="removed_A_Kf",c="versionNumber_BiUX",u=new Map;function p(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(p,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",u.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(p,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",u.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return a.createElement(p,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",u.get(`removed-${n}`),")")))}u.set("cpp98","C++98"),u.set("cpp03","C++03"),u.set("cpp11","C++11"),u.set("cpp14","C++14"),u.set("cpp17","C++17"),u.set("cpp20","C++20"),u.set("cpp23","C++23"),u.set("deprecated-",a.createElement(r.Z,null,"deprecated")),u.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),u.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),u.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),u.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),u.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),u.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),u.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),u.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),u.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),u.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),u.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),u.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),u.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),u.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),u.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),u.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),u.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),u.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),u.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),u.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),u.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),u.set("removed-",a.createElement(r.Z,null,"deleted")),u.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),u.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),u.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),u.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),u.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),u.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),u.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},73882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,s={unversionedId:"std/algo/ranges/_codes/unique/since-cpp20-detailed",id:"std/algo/ranges/_codes/unique/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/unique/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/unique",slug:"/std/algo/ranges/_codes/unique/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/unique/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/unique/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::permutable I,\n  std::sentinel_for<I> S,\n  class Proj = std::identity,\n  std::indirect_equivalence_relation<std::projected<I, Proj>> C = ranges::equal_to\n>\nconstexpr ranges::subrange<I>\n    unique( I first, S last, C comp = {}, Proj proj = {} );\n\n// (2)\ntemplate<\n  ranges::forward_range R,\n  class Proj = std::identity,\n  std::indirect_equivalence_relation<std::projected<ranges::iterator_t<R>, Proj>> C = ranges::equal_to >\n  requires std::permutable<ranges::iterator_t<R>>\nconstexpr ranges::borrowed_subrange_t<R>\n    unique( R&& r, C comp = {}, Proj proj = {} );\n")))}p.isMDXComponent=!0},57667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,s={unversionedId:"std/algo/ranges/_codes/unique/since-cpp20-simplified",id:"std/algo/ranges/_codes/unique/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/unique/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/unique",slug:"/std/algo/ranges/_codes/unique/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/unique/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/unique/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr ranges::subrange<I>\n    unique( I first, S last, C comp = {}, Proj proj = {} );\n\n// (2)\nconstexpr ranges::borrowed_subrange_t<R>\n    unique( R&& r, C comp = {}, Proj proj = {} );\n")),(0,r.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"I")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::permutable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"R")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::ranges::forward_range")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"C"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(1)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::indirect_equivalence_relation<std::projected<I, Proj>>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::indirect_equivalence_relation<std::projected<ranges::iterator_t<R>, Proj>>")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Proj")," - ",(0,r.kt)("strong",{parentName:"li"},"(none)"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Proj")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," template argument have the following default types ",(0,r.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ranges::equal_to")," for all overloads."),(0,r.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"std::permutable<ranges::iterator_t<R>>"))))}p.isMDXComponent=!0},14857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>b,frontMatter:()=>p,metadata:()=>m,toc:()=>f});var a=n(87462),r=n(67294),l=n(3905),i=n(55059),s=n(22307),o=n(99801),c=n(73882),u=n(57667);const p={title:"ranges::unique algorithm",sidebar_label:"ranges::unique(  )",description:"ranges::unique algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","unique"],cppreference_origin_rel:"w/cpp/algorithm/ranges/unique"},d=void 0,m={unversionedId:"std/algo/ranges/unique",id:"std/algo/ranges/unique",title:"ranges::unique algorithm",description:"ranges::unique algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/unique.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/unique",permalink:"/CppLangNet/docs/std/algo/ranges/unique",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/unique.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"unique",permalink:"/CppLangNet/docs/tags/unique"}],version:"current",frontMatter:{title:"ranges::unique algorithm",sidebar_label:"ranges::unique(  )",description:"ranges::unique algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","unique"],cppreference_origin_rel:"w/cpp/algorithm/ranges/unique"},sidebar:"defaultSidebar",previous:{title:"ranges::shift_right(  )",permalink:"/CppLangNet/docs/std/algo/ranges/shift_right"},next:{title:"ranges::unique_copy(  )",permalink:"/CppLangNet/docs/std/algo/ranges/unique_copy"}},g={},f=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],v={toc:f};function b(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdrangesunique-algorithm"},"std::ranges::unique() algorithm"),(0,l.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,l.kt)(u.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,l.kt)(c.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Eliminates all except the first element from every consecutive group of equivalent elements from the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") and returns a subrange [",(0,l.kt)("inlineCode",{parentName:"p"},"ret"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),"), where ",(0,l.kt)("inlineCode",{parentName:"p"},"ret")," is a past-the-end iterator for the new end of the range."),(0,l.kt)("p",{parentName:"li"},"Two consecutive elements ",(0,l.kt)("inlineCode",{parentName:"p"},"*(i - 1) and *i")," are considered equivalent if ",(0,l.kt)("inlineCode",{parentName:"p"},"std::invoke(comp, std::invoke(proj, *(i - 1)), std::invoke(proj, *i)) == true"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"i")," is an iterator in the range [",(0,l.kt)("inlineCode",{parentName:"p"},"first + 1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),").")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"p"},"r")," as the range, as if using ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),"."))),(0,l.kt)("p",null,"The function-like entities described on this page are ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,l.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(i.ZP,{mdxType:"SymbolTable"},(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to process."),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r"),mdxType:"Symbol"},"The range of elements to process."),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"comp"),mdxType:"Symbol"},"The binary predicate to compare the projected elements with."),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj"),mdxType:"Symbol"},"The projection to apply to the elements.")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"Returns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  ret,\n  last\n}\n")),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"ret")," is a past-the-end iterator for the new end of the range."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"For nonempty ranges, exactly ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last) - 1")," applications of the corresponding predicate ",(0,l.kt)("inlineCode",{parentName:"p"},"comp")," and no more that twice as many applications of any projection ",(0,l.kt)("inlineCode",{parentName:"p"},"proj"),"."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"unique(1) and unique(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct unique_fn\n{\n    template<std::permutable I, std::sentinel_for<I> S, class Proj = std::identity,\n             std::indirect_equivalence_relation<std::projected<I, Proj>>\n                 C = ranges::equal_to>\n    constexpr ranges::subrange<I>\n        operator()(I first, S last, C comp = {}, Proj proj = {}) const\n    {\n        first = ranges::adjacent_find(first, last, comp, proj);\n        if (first == last)\n            return {first, first};\n        auto i {first};\n        ++first;\n        while (++first != last)\n            if (!std::invoke(comp, std::invoke(proj, *i), std::invoke(proj, *first)))\n                *++i = ranges::iter_move(first);\n        return {++i, first};\n    }\n\n    template<ranges::forward_range R, class Proj = std::identity,\n             std::indirect_equivalence_relation<std::projected<ranges::iterator_t<R>, Proj>>\n                 C = ranges::equal_to>\n    requires std::permutable<ranges::iterator_t<R>>\n    constexpr ranges::borrowed_subrange_t<R>\n        operator()(R&& r, C comp = {}, Proj proj = {}) const\n    {\n        return (*this)(ranges::begin(r), ranges::end(r),\n                       std::move(comp), std::move(proj));\n    }\n};\n\ninline constexpr unique_fn unique {};\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,"Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the ",(0,l.kt)("inlineCode",{parentName:"p"},"physical")," size of the container is unchanged."),(0,l.kt)("p",null,"Iterators in [",(0,l.kt)("inlineCode",{parentName:"p"},"ret"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") (if any) are still dereferenceable, but the elements themselves have unspecified values (as per ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," post-condition)."),(0,l.kt)("p",null,"A call to ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"ranges::unique"))," is sometimes followed by a call to a container\u2019s ",(0,l.kt)("inlineCode",{parentName:"p"},"erase")," member function,\nwhich erases the unspecified values and reduces the ",(0,l.kt)("em",{parentName:"p"},"physical")," size of the container to match its new ",(0,l.kt)("em",{parentName:"p"},"logical")," size. These two invocations together model the ",(0,l.kt)("a",{parentName:"p",href:"#"},"Erase\u2013remove idiom"),"."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\n\nstruct id {\n    int i;\n    explicit id(int i) : i {i} {}\n};\n\nvoid print(id i, const auto& v)\n{\n    std::cout << i.i << \") \";\n    std::ranges::for_each(v, [](auto const& e) { std::cout << e << ' '; });\n    std::cout << '\\n';\n}\n\nint main()\n{\n    // a vector containing several duplicated elements\n    std::vector<int> v {1, 2, 1, 1, 3, 3, 3, 4, 5, 4};\n\n    print(id {1}, v);\n\n    // remove consecutive (adjacent) duplicates\n    const auto ret = std::ranges::unique(v);\n    // v now holds {1 2 1 3 4 5 4 x x x}, where 'x' is indeterminate\n    v.erase(ret.begin(), ret.end());\n    print(id {2}, v);\n\n    // sort followed by unique, to remove all duplicates\n    std::ranges::sort(v); // {1 1 2 3 4 4 5}\n    print(id {3}, v);\n\n    const auto [first, last] = std::ranges::unique(v.begin(), v.end());\n    // v now holds {1 2 3 4 5 x x}, where 'x' is indeterminate\n    v.erase(first, last);\n    print(id {4}, v);\n\n    // unique with custom comparison and projection\n    std::vector<std::complex<int>> vc { {1, 1}, {-1, 2}, {-2, 3}, {2, 4}, {-3, 5} };\n    print(id {5}, vc);\n\n    const auto ret2 = std::ranges::unique(vc,\n        // consider two complex nums equal if their real parts are equal by module:\n        [](int x, int y) { return std::abs(x) == std::abs(y); }, // comp\n        [](std::complex<int> z) { return z.real(); }             // proj\n    );\n    vc.erase(ret2.begin(), ret2.end());\n    print(id {6}, vc);\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Possible Output"',title:'"Possible','Output"':!0},"1) 1 2 1 1 3 3 3 4 5 4\n2) 1 2 1 3 4 5 4\n3) 1 1 2 3 4 4 5\n4) 1 2 3 4 5\n5) (1,1) (-1,2) (-2,3) (2,4) (-3,5)\n6) (1,1) (-2,3) (-3,5)\n")))))}b.isMDXComponent=!0}}]);