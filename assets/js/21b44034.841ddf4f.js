"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[78552,60023,69103],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(86010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>y});var r=n(87462),a=n(67294),s=n(86010),l=n(12466),o=n(76775),i=n(91980),c=n(67392),u=n(50012);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=d(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[i,c]=g({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),h=(()=>{const e=i??p;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,s]),tabValues:s}}var h=n(72389);const b="tabList__CuJ",k="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==o&&(p(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,s.Z)("tabs__item",k,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=f(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",b)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(_,(0,r.Z)({},e,t)))}function y(e){const t=(0,h.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(87462),a=n(67294);const s="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:s,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(74866),s=n(85162),l=n(99372),o=n(72412);const i={};function c(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:c.default||0==t},c.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:i.smallTabs},r.createElement(s.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(c.simplified)),r.createElement(s.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(c.detailed)))):c.value):r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,o.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>u,ZP:()=>c});var r=n(67294),a=n(72412);const s={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:s.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:s.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:s.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:s.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:s.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function u(e){r.useContext(l.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?r.createElement("span",{className:s[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:s.symbolProp},(e=>{const t=i(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:s.symbolName},t),r.createElement("td",{className:s.symbolDesc},(0,a.Z)(n)))}u.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=u},99372:(e,t,n)=>{n.d(t,{gJ:()=>u,eH:()=>g,U6:()=>d,OS:()=>m});var r=n(67294),a=n(95999);const s="markedText_c6kK",l="since_c1Q3",o="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",u=new Map;function p(e){let{children:t,className:n}=e;return r.createElement("span",{className:s+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return r.createElement(p,{className:l},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",u.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return r.createElement(p,{className:o},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",u.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(p,{className:i},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",u.get(`removed-${n}`),")")))}u.set("cpp98","C++98"),u.set("cpp03","C++03"),u.set("cpp11","C++11"),u.set("cpp14","C++14"),u.set("cpp17","C++17"),u.set("cpp20","C++20"),u.set("cpp23","C++23"),u.set("deprecated-",r.createElement(a.Z,null,"deprecated")),u.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),u.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),u.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),u.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),u.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),u.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),u.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),u.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),u.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),u.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),u.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),u.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),u.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),u.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),u.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),u.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),u.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),u.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),u.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),u.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),u.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),u.set("removed-",r.createElement(a.Z,null,"deleted")),u.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),u.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),u.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),u.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),u.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),u.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),u.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},45743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,o={unversionedId:"std/algo/ranges/_codes/search_n/since-cpp20-detailed",id:"std/algo/ranges/_codes/search_n/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/search_n/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/search_n",slug:"/std/algo/ranges/_codes/search_n/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/search_n/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/search_n/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::forward_iterator I,\n  std::sentinel_for<I> S,\n  class T,\n  class Pred = ranges::equal_to,\n  class Proj = std::identity\n>\n  requires std::indirectly_comparable<I, const T*, Pred, Proj>\nconstexpr ranges::subrange<I>\n    search_n( I first, S last, std::iter_difference_t<I> count,\n              const T& value, Pred pred = {}, Proj proj = {} );\n\n// (2)\ntemplate<\n  ranges::forward_range R,\n  class T,\n  class Pred = ranges::equal_to,\n  class Proj = std::identity\n>\n  requires std::indirectly_comparable<ranges::iterator_t<R>, const T*, Pred, Proj>\nconstexpr ranges::borrowed_subrange_t<R>\n    search_n( R&& r, ranges::range_difference_t<R> count,\n              const T& value, Pred pred = {}, Proj proj = {} );\n")))}p.isMDXComponent=!0},98032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,o={unversionedId:"std/algo/ranges/_codes/search_n/since-cpp20-simplified",id:"std/algo/ranges/_codes/search_n/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/search_n/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/search_n",slug:"/std/algo/ranges/_codes/search_n/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/search_n/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/search_n/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr ranges::subrange<I>\n    search_n( I first, S last, std::iter_difference_t<I> count,\n              const T& value, Pred pred = {}, Proj proj = {} );\n\n// (2)\nconstexpr ranges::borrowed_subrange_t<R>\n    search_n( R&& r, ranges::range_difference_t<R> count,\n              const T& value, Pred pred = {}, Proj proj = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I"),"  - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::forward_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"T")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Pred")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"R")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::forward_range"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," template argument has a default type of ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity")," for all overloads."),(0,a.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirectly_comparable<I, const T*, Pred, Proj>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"indirectly_comparable<ranges::iterator_t<R>, const T*, Pred, Proj>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommitted here for readability)"))}p.isMDXComponent=!0},3867:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>b,frontMatter:()=>p,metadata:()=>m,toc:()=>f});var r=n(87462),a=n(67294),s=n(3905),l=n(55059),o=n(22307),i=n(99801),c=n(45743),u=n(98032);const p={title:"ranges::search_n algorithm",sidebar_label:"ranges::search_n(  )",description:"ranges::search_n algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","find","search_n","search","consecutive","sequence","look"],cppreference_origin_rel:"w/cpp/algorithm/ranges/search_n"},d=void 0,m={unversionedId:"std/algo/ranges/search_n",id:"std/algo/ranges/search_n",title:"ranges::search_n algorithm",description:"ranges::search_n algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/search_n.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/search_n",permalink:"/CppLangNet/docs/std/algo/ranges/search_n",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/search_n.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"find",permalink:"/CppLangNet/docs/tags/find"},{label:"search_n",permalink:"/CppLangNet/docs/tags/search-n"},{label:"search",permalink:"/CppLangNet/docs/tags/search"},{label:"consecutive",permalink:"/CppLangNet/docs/tags/consecutive"},{label:"sequence",permalink:"/CppLangNet/docs/tags/sequence"},{label:"look",permalink:"/CppLangNet/docs/tags/look"}],version:"current",frontMatter:{title:"ranges::search_n algorithm",sidebar_label:"ranges::search_n(  )",description:"ranges::search_n algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","find","search_n","search","consecutive","sequence","look"],cppreference_origin_rel:"w/cpp/algorithm/ranges/search_n"},sidebar:"defaultSidebar",previous:{title:"ranges::search(  )",permalink:"/CppLangNet/docs/std/algo/ranges/search"},next:{title:"find(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/find"}},g={},f=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],h={toc:f};function b(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stdrangessearch_n-algorithm"},"std::ranges::search_n() algorithm"),(0,s.kt)(i.Z,{content:{"since-cpp20":{simplified:(0,s.kt)(u.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,s.kt)(c.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,s.kt)("p",null,"Searches the range for the first sequence of ",(0,s.kt)("inlineCode",{parentName:"p"},"count")," identical elements, each equal to the given ",(0,s.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")," Searches the range [",(0,s.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last"),") for the first sequence of ",(0,s.kt)("inlineCode",{parentName:"p"},"count")," elements whose projected values are each equal to the given ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," according to the binary predicate ",(0,s.kt)("inlineCode",{parentName:"p"},"pred"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,s.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,s.kt)("inlineCode",{parentName:"p"},"r")," as the source range, as if using ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"last"),"."))),(0,s.kt)("p",null,"The function-like entities described on this page are ",(0,s.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,s.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)(l.ZP,{mdxType:"SymbolTable"},(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(a.Fragment,null," ",(0,s.kt)("code",null,"first")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to examine."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"r"),mdxType:"Symbol"},"The range of elements to examine."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"count"),mdxType:"Symbol"},"The length of the sequence to search for."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"value"),mdxType:"Symbol"},"The value to search for."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"pred"),mdxType:"Symbol"},"The binary predicate that compares the projected elements with ",(0,s.kt)("code",null,"value"),"."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"proj"),mdxType:"Symbol"},"Projection to apply to the elements.")),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")," Value of type ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::subrange<I>")," that denotes the first occurrence of the desired sequence of ",(0,s.kt)("inlineCode",{parentName:"p"},"count")," ",(0,s.kt)("inlineCode",{parentName:"p"},"value"),"s."),(0,s.kt)("p",{parentName:"li"},"If no such subsequence is found, returns ",(0,s.kt)("inlineCode",{parentName:"p"},"std::ranges::subrange{ last, last }"),".",(0,s.kt)("br",{parentName:"p"}),"\n","If ",(0,s.kt)("inlineCode",{parentName:"p"},"count <= 0"),", returns ",(0,s.kt)("inlineCode",{parentName:"p"},"std::ranges::subrange{ first, first }"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,s.kt)("strong",{parentName:"p"},"(1)"),", except that the return type is ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::borrowed_subrange_t<R>"),"."))),(0,s.kt)("h3",{id:"complexity"},"Complexity"),(0,s.kt)("p",null,"Given ",(0,s.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)")),(0,s.kt)("p",null,"At most ",(0,s.kt)("strong",{parentName:"p"},"N")," applications of the predicate and the projection."),(0,s.kt)("h3",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"(none)")),(0,s.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"search_n(1)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct search_n_fn\n{\n    template<std::forward_iterator I, std::sentinel_for<I> S, class T,\n             class Pred = ranges::equal_to, class Proj = std::identity>\n    requires std::indirectly_comparable<I, const T*, Pred, Proj>\n    constexpr ranges::subrange<I>\n        operator()(I first, S last, std::iter_difference_t<I> count,\n                   const T& value, Pred pred = {}, Proj proj = {}) const\n    {\n        if (count <= 0)\n            return {first, first};\n        for (; first != last; ++first)\n        {\n            if (std::invoke(pred, std::invoke(proj, *first), value))\n            {\n                I start = first;\n                std::iter_difference_t<I> n{1};\n                for (;;)\n                {\n                    if (n++ == count)\n                        return {start, std::next(first)}; // found\n                    if (++first == last)\n                        return {first, first}; // not found\n                    if (!std::invoke(pred, std::invoke(proj, *first), value))\n                        break; // not equ to value\n                }\n            }\n        }\n        return {first, first};\n    }\n\n    template<ranges::forward_range R, class T, class Pred = ranges::equal_to,\n             class Proj = std::identity>\n    requires std::indirectly_comparable<ranges::iterator_t<R>, const T*, Pred, Proj>\n    constexpr ranges::borrowed_subrange_t<R>\n        operator()(R&& r, ranges::range_difference_t<R> count,\n                   const T& value, Pred pred = {}, Proj proj = {}) const\n    {\n        return (*this)(ranges::begin(r), ranges::end(r),\n                       std::move(count), value,\n                       std::move(pred), std::move(proj));\n    }\n};\n\ninline constexpr search_n_fn search_n {};\n"))),(0,s.kt)("h3",{id:"notes"},"Notes"),(0,s.kt)("p",null,"An implementation can improve efficiency of the search in average if the iterators model ",(0,s.kt)("a",{parentName:"p",href:"#"},(0,s.kt)("inlineCode",{parentName:"a"},"std::random_access_iterator")),"."),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <string>\n\nint main()\n{\n    static constexpr auto nums = {1, 2, 2, 3, 4, 1, 2, 2, 2, 1};\n    constexpr int count {3};\n    constexpr int value {2};\n    typedef int count_t, value_t;\n\n    constexpr auto result1 = std::ranges::search_n(\n        nums.begin(), nums.end(), count, value\n    );\n    static_assert( // found\n        result1.size() == count &&\n        std::distance(nums.begin(), result1.begin()) == 6 &&\n        std::distance(nums.begin(), result1.end()) == 9\n    );\n\n    constexpr auto result2 = std::ranges::search_n(nums, count, value);\n    static_assert( // found\n        result2.size() == count &&\n        std::distance(nums.begin(), result2.begin()) == 6 &&\n        std::distance(nums.begin(), result2.end()) == 9\n    );\n\n    constexpr auto result3 = std::ranges::search_n(nums, count, value_t{5});\n    static_assert( // not found\n        result3.size() == 0 &&\n        result3.begin() == result3.end() &&\n        result3.end() == nums.end()\n    );\n\n    constexpr auto result4 = std::ranges::search_n(nums, count_t{0}, value_t{1});\n    static_assert( // not found\n        result4.size() == 0 &&\n        result4.begin() == result4.end() &&\n        result4.end() == nums.begin()\n    );\n\n    constexpr char symbol {'B'};\n    auto to_ascii = [](const int z) -> char { return 'A' + z - 1; };\n    auto is_equ = [](const char x, const char y) { return x == y; };\n\n    std::cout << \"Find a sub-sequence \" << std::string(count, symbol) << \" in the \";\n    std::ranges::transform(nums, std::ostream_iterator<char>(std::cout, \"\"), to_ascii);\n    std::cout << '\\n';\n\n    auto result5 = std::ranges::search_n(nums, count, symbol, is_equ, to_ascii);\n    if (not result5.empty())\n        std::cout << \"Found at position \"\n                  << std::ranges::distance(nums.begin(), result5.begin()) << '\\n';\n}\n"))),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"Find a sub-sequence BBB in the ABBCDABBBA\nFound at position 6\n")))))}b.isMDXComponent=!0}}]);