"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[15358],{96214:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"M9.4 16.6 4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0 4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"}),"Code");t.Z=i},95175:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"m4 18 8.5-6L4 6v12zm9-12v12l8.5-6L13 6z"}),"FastForward");t.Z=i},71498:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"M11 18V6l-8.5 6 8.5 6zm.5-6 8.5 6V6l-8.5 6z"}),"FastRewind");t.Z=i},94265:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)([(0,l.jsx)("path",{d:"M14 14v1.17L17.17 12 14 8.83V10H6v4z",opacity:".3"},"0"),(0,l.jsx)("path",{d:"m20 12-8-8v4H4v8h8v4l8-8zM6 14v-4h8V8.83L17.17 12 14 15.17V14H6z"},"1")],"ForwardTwoTone");t.Z=i},53247:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"M6 19h4V5H6v14zm8-14v14h4V5h-4z"}),"Pause");t.Z=i},70655:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"M8 5v14l11-7z"}),"PlayArrow");t.Z=i},94229:(e,t,n)=>{var a=n(64836);t.Z=void 0;var r=a(n(64938)),l=n(85893),i=(0,r.default)((0,l.jsx)("path",{d:"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"}),"Settings");t.Z=i},78318:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string playerName1;\n    std::string playerName2;\n    std::string playerName3;\n\n    std::cout << "Please enter the name of player 1: ";\n    std::cin >> playerName1;\n\n    std::cout << "Please enter the name of player 2: ";\n    std::cin >> playerName2;\n\n    std::cout << "Please enter the name of player 3: ";\n    std::cin >> playerName3;\n}\n')))}i.isMDXComponent=!0},98477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>T,contentTitle:()=>C,default:()=>W,frontMatter:()=>w,metadata:()=>x,toc:()=>E});var a=n(87462),r=n(67294),l=n(3905),i=(n(11687),n(18510)),o=n(22307),s=n(66830),p=(n(56693),n(42677),n(78318));const m={toc:[]};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    // highlight-start\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n    // highlight-end\n\n    // Printing the name of the first player:\n    cout << "Name of the first player: " << playerNames[0];\n}\n')))}c.isMDXComponent=!0;const d={toc:[]};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n\n    // Adding a new player:\n    playerNames.push_back("WickedWitch");\n\n    playerNames.insert(playerNames.begin() + 1, "BadPenguin");\n\n    // Erase the first element:\n    // highlight-next-line\n    playerNames.erase(playerNames.begin() + 0);\n\n    // Printing the name of player with index 1\n    cout << "Name of the player with index 1: " << playerNames[1];\n}\n')))}u.isMDXComponent=!0;const h={toc:[]};function g(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n\n    // Adding a new player:\n    // highlight-next-line\n    playerNames.push_back("WickedWitch");\n\n    // Printing the name of player with index 3\n    cout << "Name of the player with index 3: " << playerNames[3];\n}\n')))}g.isMDXComponent=!0;const k={toc:[]};function y(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n\n    // Adding a new player:\n    playerNames.push_back("WickedWitch");\n\n    // highlight-next-line\n    playerNames.insert(playerNames.begin() + 1, "BadPenguin");\n\n    // Printing the name of player with index 1\n    cout << "Name of the player with index 1: " << playerNames[1];\n}\n')))}y.isMDXComponent=!0;const N={toc:[]};function f(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n\n    // highlight-next-line\n    cout << "The array contains " << playerNames.size() << " elements\\n";\n\n    // Adding a new player:\n    playerNames.push_back("WickedWitch");\n    cout << "Added new player.\\n";\n    // highlight-next-line\n    cout << "The array contains " << playerNames.size() << " elements\\n";\n\n    playerNames.insert(playerNames.begin() + 1, "BadPenguin");\n\n    // Erase the first element:\n    playerNames.erase(playerNames.begin() + 0);\n}\n')))}f.isMDXComponent=!0;const v={toc:[]};function b(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames = {\n        "HappyBanana",\n        "AngryCrab",\n        "SadWolf",\n    };\n\n    // Adding a new player:\n    playerNames.push_back("WickedWitch");\n\n    // Print each player\'s name\n    // highlight-start\n    for (string name : playerNames)\n    {\n        cout << name << \'\\n\';\n    }\n    // highlight-end\n}\n')))}b.isMDXComponent=!0;const w={sidebar_label:"2. Dynamic arrays",title:"Dynamic arrays",description:"Lesson: using dynamic arrays in C++",hide_title:!0},C=void 0,x={unversionedId:"course/basics/arrays/dynamic-arrays",id:"course/basics/arrays/dynamic-arrays",title:"Dynamic arrays",description:"Lesson: using dynamic arrays in C++",source:"@site/content/learn/course/basics/arrays/dynamic-arrays.mdx",sourceDirName:"course/basics/arrays",slug:"/course/basics/arrays/dynamic-arrays",permalink:"/CppLangNet/learn/course/basics/arrays/dynamic-arrays",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/arrays/dynamic-arrays.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"2. Dynamic arrays",title:"Dynamic arrays",description:"Lesson: using dynamic arrays in C++",hide_title:!0},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/CppLangNet/learn/course/basics/arrays/introduction"},next:{title:"Dynamic arrays \xbb More examples",permalink:"/CppLangNet/learn/course/basics/arrays/dynamic-arrays/examples"}},T={},E=[{value:"Creating a vector",id:"creating-a-vector",level:2},{value:"Accessing elements",id:"accessing-elements",level:2},{value:"Out of bounds access",id:"out-of-bounds-access",level:3},{value:"Example",id:"example",level:3},{value:"Providing initial values",id:"providing-initial-values",level:2},{value:"Adding elements at the end",id:"adding-elements-at-the-end",level:2},{value:"Inserting elements at a specific position",id:"inserting-elements-at-a-specific-position",level:2},{value:"Removing elements",id:"removing-elements",level:2},{value:"Clearing the contents",id:"clearing-the-contents",level:2},{value:"Reading the size",id:"reading-the-size",level:2},{value:"Checking if vector is empty",id:"checking-if-vector-is-empty",level:2},{value:"Displaying elements",id:"displaying-elements",level:2},{value:"Summary",id:"summary",level:2}],S={toc:E};function W(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"dynamic-arrays"},"Dynamic arrays"),(0,l.kt)("p",null,"In this lesson we'll learn how to use dynamic arrays in C++ using ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/vector/"},(0,l.kt)("inlineCode",{parentName:"a"},"std::vector")),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"More about vector"),(0,l.kt)("div",null,(0,l.kt)("p",null,'You might be wondering why the type that represents a dynamic array data structure in C++ uses the name "vector."\nIt can be confusing for those who associate the term with the mathematical concept of vectors.\nInterestingly, this name was chosen by the original author of the STL (Standard Template Library), Alexander Stepanov. However, in retrospect,\n',(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/758548/4386320"},"Stepanov admitted"),' that using "vector" as the name of the data structure was a mistake.'),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"vector")," is one of the many ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/"},(0,l.kt)("em",{parentName:"a"},"containers"))," in the standard library. You'll learn about other containers\ngradually as you progress through the course. In this lesson I will often use the term ",(0,l.kt)("em",{parentName:"p"},"array")," and ",(0,l.kt)("em",{parentName:"p"},"vector")," interchangeably."))),(0,l.kt)("admonition",{title:"Documentation",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Once you finish this lesson you can look at the ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/vector/"},"documentation")," if you want to learn more about ",(0,l.kt)("inlineCode",{parentName:"p"},"vector"),"s.\nBe aware that the documentation is not a tutorial, but rather a reference and it may be a bit overwhelming at first.")),(0,l.kt)("h2",{id:"creating-a-vector"},"Creating a vector"),(0,l.kt)("p",null,"Let's go back and consider the code we've shown in the ",(0,l.kt)("a",{parentName:"p",href:"../introduction/#motivation"},"Motivation")," section of the previous lesson.\nThere is a great candidate to be turned into an array. The following variables are of the same type (",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),")\nand differ only in number at the end of their name."),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(p.ZP,{mdxType:"FullCode_Motivation"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string playerName1;\nstd::string playerName2;\nstd::string playerName3;\n"))),(0,l.kt)("p",null,"Instead of creating three separate variables, we can create one array that contains three elements."),(0,l.kt)("p",null,"To use ",(0,l.kt)("inlineCode",{parentName:"p"},"std::vector")," we first have to include its header file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\n")),(0,l.kt)("p",null,"As we already know from the ",(0,l.kt)("a",{parentName:"p",href:"../introduction"},"Introduction"),", to create a ",(0,l.kt)("inlineCode",{parentName:"p"},"vector")," we have to know the type of the elements\nthat will be stored inside it. All elements in a vector are of the same type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <string> // do not forget about string\n#include <vector>\n\nint main()\n{\n    // highlight-next-line\n    std::vector<std::string> playerNames(3);\n    // ...\n}\n")),(0,l.kt)("p",null,"The above example shows how to create a vector that stores ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),"s."),(0,l.kt)("admonition",{title:"Convenience",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Before we continue, let's put an appropriate ",(0,l.kt)("a",{parentName:"p",href:"/learn/course/basics/first-program/#prefix-of-the-standard-namespace"},(0,l.kt)("inlineCode",{parentName:"a"},"using")," statement"),"\nat the beginning of the ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," function block to skip the ",(0,l.kt)("inlineCode",{parentName:"p"},"std::")," prefix:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int main() {\n    // highlight-next-line\n    using std::vector, std::string;\n\n    vector<string> playerNames(3);\n}\n")),(0,l.kt)("p",{parentName:"admonition"},"Later we'll use more elements from the standard library, like ",(0,l.kt)("inlineCode",{parentName:"p"},"std::cout")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"std::cin"),".\nYou can add these to the ",(0,l.kt)("inlineCode",{parentName:"p"},"using")," statement too.")),(0,l.kt)("p",null,"\u201d\n",(0,l.kt)("strong",{parentName:"p"},"vector")," is a ",(0,l.kt)("em",{parentName:"p"},"template"),", which means that it can be used with different types.\nWe tell it which type to use by putting it in angle brackets right after ",(0,l.kt)("inlineCode",{parentName:"p"},"vector"),". Like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Using vector with different types"',title:'"\ud83d\udd39',Using:!0,vector:!0,with:!0,different:!0,'types"':!0},"vector< int > arrayOfInts;\nvector< float > arrayOfFloats;\nvector< char > arrayOfChars;\nvector< string > arrayOfStrings;\nvector< /*other type*/ > arrayOfXYZ;\n")),(0,l.kt)("p",null,"This code defines the vector ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames")," that stores text elements (",(0,l.kt)("inlineCode",{parentName:"p"},"std::strings"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Defining a variable of vector type"',title:'"Defining',a:!0,variable:!0,of:!0,vector:!0,'type"':!0},"vector<string> playerNames(3);\n")),(0,l.kt)("p",null,"Writing (3) after playerNames makes it so that when it is created it will have room for three elements\nof type ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," right from the beginning."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",3:!0,className:"language-cpp",metastring:'title="Storing 3 elements in the vector"',title:'"Storing',elements:!0,in:!0,the:!0,'vector"':!0},"playerNames(3)\n")),(0,l.kt)("p",null,"Note that this is a vector-specific thing and not a general rule. If you want to create a vector that is initially empty,\njust don't write the parentheses at all:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Creating an empty vector"',title:'"Creating',an:!0,empty:!0,'vector"':!0},"vector<string> playerNames;\n")),(0,l.kt)("admonition",{title:"Empty parentheses problem",type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"A mistake that is often made by beginners is to write empty parentheses when creating a vector (or actually any other type):"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="This is not defining a variable"',title:'"This',is:!0,not:!0,defining:!0,a:!0,'variable"':!0},"vector< string > playerNames();\n")),(0,l.kt)("p",{parentName:"admonition"},"Later in the course you'll learn about ",(0,l.kt)("strong",{parentName:"p"},"functions"),", and the syntax that declares them:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="This is actually a function declaration"',title:'"This',is:!0,actually:!0,a:!0,function:!0,'declaration"':!0},"// prism-push-types:AnyType\nAnyType functionName();\n")),(0,l.kt)("p",{parentName:"admonition"},"This is why the empty parentheses turns this into a function declaration, which is not what we want.")),(0,l.kt)("h2",{id:"accessing-elements"},"Accessing elements"),(0,l.kt)("p",null,"There are two ways of accessing an element of a vector, that we're interested in:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"using the ",(0,l.kt)("a",{parentName:"li",href:"/docs/std/containers/arrays/vector/operator_subscript/"},(0,l.kt)("inlineCode",{parentName:"a"},"[]")," operator")),(0,l.kt)("li",{parentName:"ul"},"calling the ",(0,l.kt)("a",{parentName:"li",href:"/docs/std/containers/arrays/vector/at/"},(0,l.kt)("inlineCode",{parentName:"a"},"at()")," method"))),(0,l.kt)("p",null,"Both ways are very similar, with the only difference being that the ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," operator does not check if the index is out of bounds.\nWe'll show you what this means in a moment. Now let's see how we can use them - we'll assign the following names to the players:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Player index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"HappyBanana")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")))),(0,l.kt)("br",null),(0,l.kt)("p",null,"Here is how we can set them in the code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\nint main()\n{\n    using std::vector, std::string, std::cout;\n\n    vector<string> playerNames(3);\n\n    // Setting names of the players\n    playerNames[0] = "HappyBanana";\n    playerNames[1] = "AngryCrab";\n    playerNames[2] = "SadWolf";\n\n    // Printing the name of the first player:\n    cout << "Name of the first player: " << playerNames[0];\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Output"',title:'"Output"'},"Name of the first player: HappyBanana\n")),(0,l.kt)("p",null,"To access an element of an array, we put its index in square brackets right after the array name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"arrayName[ index ]\n")),(0,l.kt)("p",null,"A non-empty array with a number of elements equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," always has indexes  ranging from ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"N-1")," inclusive.\nThe three-element array ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames")," has indexes ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,l.kt)("h3",{id:"out-of-bounds-access"},"Out of bounds access"),(0,l.kt)("p",null,"A ",(0,l.kt)("strong",{parentName:"p"},"very common")," mistake is to try to access an element with an index that is out of bounds.\nIf we had tried to rename the player at index ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," the program would most likely crash and burn."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// error-next-line\nplayerNames[3] = "NewPlayer"; // !\n')),(0,l.kt)("p",null,"This code will compile correctly (we might get a warning) but when the program is executed it will try to access\na memory that is not allocated for the program.\nThis is called a ",(0,l.kt)("strong",{parentName:"p"},"buffer overflow")," and it is a very serious problem."),(0,l.kt)("p",null,"An alternative, safer way of accessing an element is to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"at()")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'playerNames.at( 3 ) = "NewPlayer";\n')),(0,l.kt)("p",null,"The difference is that the ",(0,l.kt)("inlineCode",{parentName:"p"},"at()")," method checks if the index is out of bounds and throws an exception if it is.\nBe aware that it won't make your program valid by itself. The key benefit is that it will show you a useful\nerror message and won't allow the program to perform a potentially dangerous operation."),(0,l.kt)("p",null,"We'll learn more about the syntax we used to call the ",(0,l.kt)("inlineCode",{parentName:"p"},"at()")," method in a moment."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"This is how we can ask a user to enter the name of a certain player:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'cout << "Enter the name of the second player: ";\n// highlight-next-line\ncin >> playerNames[1];\n')),(0,l.kt)("p",null,"Now let's output the number of characters in the provided name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'cout << "The name of the second player has " << playerNames[1].size() << " characters.\\n";\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Possible output"',title:'"Possible','output"':!0},"Enter the name of the second player: FuriousFlamingo\nThe name of the second player has 15 characters.\n")),(0,l.kt)("h2",{id:"providing-initial-values"},"Providing initial values"),(0,l.kt)("p",null,"There is also a way to provide initial values for the elements of the ",(0,l.kt)("inlineCode",{parentName:"p"},"vector")," right from the beginning:"),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(c,{mdxType:"FullCode_InitializingVector"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'vector<string> playerNames = {\n    "HappyBanana",\n    "AngryCrab",\n    "SadWolf",\n};\n'))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Alternative syntax"),(0,l.kt)("div",null,(0,l.kt)("p",null,"In the case of initializing a ",(0,l.kt)("inlineCode",{parentName:"p"},"vector")," you can also omit the ",(0,l.kt)("inlineCode",{parentName:"p"},"=")," sign:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Alternative syntax"',title:'"Alternative','syntax"':!0},'// highlight-next-line\nvector<string> playerNames { // note the lack of \'=\'\n    "HappyBanana",\n    "AngryCrab",\n    "SadWolf",\n};\n')),(0,l.kt)("p",null,"The result is the same."))),(0,l.kt)("p",null,"We will use this method of initialization in the current lesson from now on."),(0,l.kt)("h2",{id:"adding-elements-at-the-end"},"Adding elements at the end"),(0,l.kt)("p",null,"To add an item to the end of an array (in this case ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames"),"), we need to use ",(0,l.kt)("inlineCode",{parentName:"p"},"push_back")," like this:"),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(g,{mdxType:"FullCode_AddingElementToArray"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// highlight-next-line\nplayerNames.push_back("WickedWitch");\n\n// Printing the name of player with index 3\ncout << "Name of the player with index 3: " << playerNames[3];\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Output"',title:'"Output"'},"Name of the player with index 3: WickedWitch\n"))),(0,l.kt)("p",null,"From the moment ",(0,l.kt)("inlineCode",{parentName:"p"},".push_back(...)")," instruction was executed, the ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames")," array already has four elements.\nWe say that we are ",(0,l.kt)("em",{parentName:"p"},"calling")," the ",(0,l.kt)("inlineCode",{parentName:"p"},"push_back(...)")," ",(0,l.kt)("em",{parentName:"p"},"method"),". We'll talk more about calls and methods in the future.\nFor now, just remember that:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"we put a dot after the name of the array"),(0,l.kt)("li",{parentName:"ol"},"we write the name of the ",(0,l.kt)("em",{parentName:"li"},"method"),", which is in this case ",(0,l.kt)("inlineCode",{parentName:"li"},"push_back")),(0,l.kt)("li",{parentName:"ol"},"then in parentheses we enter what we want to add (e.g. a value or a variable)")),(0,l.kt)("p",null,"Note that after we added the new element, the array has four elements, with indices ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"2")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"3"),":"),(0,l.kt)(o.Z,{columns:["auto","1fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("p",null,"Before:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"HappyBanana")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf"))))),(0,l.kt)("div",null,(0,l.kt)("p",null,"After:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"HappyBanana")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"WickedWitch"))))))),(0,l.kt)("br",null),(0,l.kt)("p",null,"To let the user add a new player, we can ask them to enter their name, and then add it to the array:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'std::cout << "Enter the name of the new player: ";\nstd::string newPlayerName;\n// highlight-start\nstd::cin >> newPlayerName;\nplayerNames.push_back(newPlayerName);\n// highlight-end\n')),(0,l.kt)("h2",{id:"inserting-elements-at-a-specific-position"},"Inserting elements at a specific position"),(0,l.kt)("p",null,"At this point you will have to trust me a little. I won't go into details because it's too complicated for now.\nTo insert ",(0,l.kt)("strong",{parentName:"p"},"before")," index ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," to a vector (in this case ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames"),") we use the following notation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"playerNames.insert(playerNames.begin() + n, elementToInsert);\n")),(0,l.kt)("p",null,"Simply put, ",(0,l.kt)("inlineCode",{parentName:"p"},"insert")," adds an element just before a\nspecified ",(0,l.kt)(i.Z,{title:(0,l.kt)(r.Fragment,null,"An ",(0,l.kt)("i",null,"iterator")," to be precise, but that's for later"),mdxType:"Tooltip"},(0,l.kt)("b",null,"position")),"\nwhich isn't the same thing as an index. To obtain it, we need to use ",(0,l.kt)("inlineCode",{parentName:"p"},"begin()")," and ",(0,l.kt)("strong",{parentName:"p"},"add")," the index to it."),(0,l.kt)("p",null,"Knowing this, we will now insert a new player just before the ",(0,l.kt)("inlineCode",{parentName:"p"},"AngryCrab")," (index ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"):"),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(y,{mdxType:"FullCode_InsertingElement"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'playerNames.insert(playerNames.begin() + 1, "BadPenguin");\n'))),(0,l.kt)("p",null,"This is how the array changes after the insertion:"),(0,l.kt)(o.Z,{columns:["auto","1fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("p",null,"Before:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"HappyBanana")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"WickedWitch"))))),(0,l.kt)("div",null,(0,l.kt)("p",null,"After:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"HappyBanana")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"BadPenguin"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"WickedWitch")))))),(0,l.kt)("h2",{id:"removing-elements"},"Removing elements"),(0,l.kt)("p",null,"This is a similar case to inserting elements. We need to specify a ",(0,l.kt)("strong",{parentName:"p"},"position")," again.\nSo to remove the ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),"-th element from a vector (e.g. from ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames"),") we will use the following notation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Erasing n-th element from playerNames"',title:'"Erasing',"n-th":!0,element:!0,from:!0,'playerNames"':!0},"playerNames.erase( playerNames.begin() + n );\n")),(0,l.kt)("p",null,"We'll now erase the first player from the array:"),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(u,{mdxType:"FullCode_ErasingElement"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"playerNames.erase( playerNames.begin() + 0 );\n"))),(0,l.kt)("p",null,"Note that in this case ",(0,l.kt)("inlineCode",{parentName:"p"},"+ 0")," actually does nothing, but I put it there to make it clear: ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames.begin()"),"\nis the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames.begin() + 0"),"."),(0,l.kt)("p",null,"The contents of the array before and after the removal:"),(0,l.kt)(o.Z,{columns:["auto","1fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("p",null,"Before:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"HappyBanana")," ","<","-- gets deleted")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"BadPenguin")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"WickedWitch"))))),(0,l.kt)("div",null,(0,l.kt)("p",null,"After:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"BadPenguin")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"AngryCrab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"SadWolf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"WickedWitch")))))),(0,l.kt)("br",null),(0,l.kt)("p",null,"As you can see the first element was removed and the rest of the elements ",(0,l.kt)("strong",{parentName:"p"},"shifted by one")," index.\nThis is because the array is a ",(0,l.kt)("strong",{parentName:"p"},"contiguous")," block of memory and ",(0,l.kt)("inlineCode",{parentName:"p"},"vector")," ensures that there is no\nempty space left after an element is removed."),(0,l.kt)("admonition",{type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"Before erasing an item from an array, make sure it exists (that is, it's in scope ",(0,l.kt)("inlineCode",{parentName:"p"},"[0, N)"),")."),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Deleting n-th element from an array (safe)"',title:'"\ud83d\udd39',Deleting:!0,"n-th":!0,element:!0,from:!0,an:!0,array:!0,'(safe)"':!0},'int index;\ncin >> index; // don\'t forget to add using std::cin;\n\nif (index >= 0 && index < playerNames.size())\n{\n    playerNames.erase( playerNames.begin() + index );\n}\nelse\n    cout << "Index " << index << " does not exist!";\n'))),(0,l.kt)("h2",{id:"clearing-the-contents"},"Clearing the contents"),(0,l.kt)("p",null,"To clear the contents of a vector, we can use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/vector/clear/"},(0,l.kt)("inlineCode",{parentName:"a"},"clear()"))," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"playerNames.clear();\n")),(0,l.kt)("p",null,"After the call, the array will be empty."),(0,l.kt)("h2",{id:"reading-the-size"},"Reading the size"),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"vector")," can change size whenever you want it to, you may sometimes need to read the number of elements\nit currently contains. The current size can be read using the ",(0,l.kt)("inlineCode",{parentName:"p"},"size()")," method:"),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(f,{mdxType:"FullCode_ReadingSize"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'vector<string> playerNames = {\n    "HappyBanana",\n    "AngryCrab",\n    "SadWolf",\n};\n\n// highlight-next-line\ncout << "The array contains " << playerNames.size() << " elements\\n";\n\n// Adding a new player:\nplayerNames.push_back("WickedWitch");\ncout << "Added new player.\\n";\n// highlight-next-line\ncout << "The array contains " << playerNames.size() << " elements\\n";\n'))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Output"',title:'"Output"'},"The array contains 3 elements\nAdded new player.\nThe array contains 4 elements\n")),(0,l.kt)("p",null,"Just like we previously did with the method ",(0,l.kt)("inlineCode",{parentName:"p"},"push_back"),", we write the name after the dot.\nThen we put the parentheses, and in the case of ",(0,l.kt)("inlineCode",{parentName:"p"},".size")," we leave them empty."),(0,l.kt)("h2",{id:"checking-if-vector-is-empty"},"Checking if vector is empty"),(0,l.kt)("p",null,"To check if a vector is empty, we can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"empty()")," method like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'if (playerNames.empty())\n    cout << "The array is empty!\\n";\nelse\n    cout << "The array is not empty!\\n";\n}\n')),(0,l.kt)("h2",{id:"displaying-elements"},"Displaying elements"),(0,l.kt)("p",null,"If we want to display ",(0,l.kt)("strong",{parentName:"p"},"all")," the elements of an array, we'll have to use a ",(0,l.kt)("em",{parentName:"p"},"loop"),".\nWe will tell more about loops in the future. They allow you to execute the same\npiece of code multiple times."),(0,l.kt)(s.Z,{fullCode:(0,l.kt)(b,{mdxType:"FullCode_DisplayingArrayOfPlayerNames"}),mdxType:"CustomCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Displaying items"',title:'"\ud83d\udd39',Displaying:!0,'items"':!0},"for (string name : playerNames)\n{\n    cout << \"Player name: \" << name << '\\n';\n}\n"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Output"',title:'"Output"'},"Player name: HappyBanana\nPlayer name: AngryCrab\nPlayer name: SadWolf\nPlayer name: WickedWitch\n")),(0,l.kt)("p",null,'To understand this, let me show you how to "read" it:'),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"For")," ",(0,l.kt)("small",null,"(",(0,l.kt)("inlineCode",{parentName:"p"},"for"),")")," ",(0,l.kt)("strong",{parentName:"p"},"each player name")," ",(0,l.kt)("small",null,"(",(0,l.kt)("inlineCode",{parentName:"p"},"name"),")"),"\n",(0,l.kt)("strong",{parentName:"p"},"which is of a type")," ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string")," ",(0,l.kt)("strong",{parentName:"p"},"in an array")," ",(0,l.kt)("inlineCode",{parentName:"p"},"playerNames")," ",(0,l.kt)("strong",{parentName:"p"},"execute"),"\n",(0,l.kt)("strong",{parentName:"p"},"the following block of code"),"...")),(0,l.kt)("p",null,"There is only one statement inside this block of code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"cout << \"Player name: \" << name << '\\n';\n")),(0,l.kt)("p",null,"The loop will write the nicknames of the players one by one\ninto the variable ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", and execute the display instruction (",(0,l.kt)("inlineCode",{parentName:"p"},"cout"),") for each of them."),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"We learned how to do basic operations on ",(0,l.kt)("inlineCode",{parentName:"p"},"std::vector"),' type. Make sure to check out the sublessons because there is still\na lot to practice. You can find them in the sidebar if you expand the "Dynamic arrays" item.'))}W.isMDXComponent=!0},42677:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This section requires improvement. You can help by editing this doc page.")))}i.isMDXComponent=!0},56693:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note, this article is not finished! You can help by editing this doc page.")))}i.isMDXComponent=!0},18169:(e,t,n)=>{function a(e){return"object"!=typeof e?"default":"highlight"===e.kind?e.variant:"default"}function r(e){return"object"!=typeof e?e:"highlight"===e.kind?e.content:e}function l(e,t){return{kind:"highlight",variant:t??"default",content:e}}function i(e,t,n,a){return{kind:"block",startLine:e,endLine:t,startColumn:n,endColumn:a}}function o(e,t,n){return{kind:"range",startLine:e,endLine:e,startColumn:t,endColumn:n}}function s(e){const t=getComputedStyle(e),n=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),a=parseFloat(t.borderLeftWidth)+parseFloat(t.borderRightWidth);return e.offsetWidth-n-a}function p(e,t,n){const a=function(e,t){let n=0,a=null;return function r(l){if(l.nodeType!==Node.TEXT_NODE)for(let i=0;i<l.childNodes.length;i++){const o=l.childNodes[i];if(r(o),a)return;if(o.nodeType!==Node.ELEMENT_NODE)continue;const p=o;if(p.classList.contains("token-line")){if(n===t){const t=p.firstChild;let n=0;(t.nodeType!==Node.ELEMENT_NODE||!t.classList.contains("token"))&&(n=t.getBoundingClientRect().width+2);const r=p.getBoundingClientRect(),l=s(p);return e.getBoundingClientRect(),void(a={top:r.top,left:r.left+n,width:l-n,height:r.height})}++n}}}(e),a}(e,t);if(!a)return null;const r=n.getBoundingClientRect();return a.top-=r.top,a.left-=r.left,a}function m(e,t){return p(e,t,e)}function c(e,t){if("number"==typeof t){const n=m(e,t);if(!n)return null;const a=s(e);return{top:n.top,left:n.left,width:.8*a,height:n.height}}return"block"===t.kind?function(e,t){const n=m(e,t.startLine),a=m(e,t.endLine);if(!n||!a)return null;const r=.61*parseFloat(getComputedStyle(e).fontSize||"16"),l=s(e),i=n.left+t.startColumn*r,o=(t.endColumn-t.startColumn)*r;return{top:n.top,left:i,width:0===t.endColumn?l:o,height:a.top+a.height-n.top}}(e,t):function(e,t){let n=0,a=0,r=null,l=0,i=null,o=0;if(function e(s){if(s.nodeType===Node.TEXT_NODE){const e=s.textContent||"";for(let p=0;p<e.length;p++){if(n===t.startLine&&a===t.startColumn&&(r=s,l=p),r&&n===t.endLine&&a===t.endColumn)return i=s,void(o=p);a++}}else for(let t=0;t<s.childNodes.length;t++){const r=s.childNodes[t];if(e(r),r.classList&&r.classList.contains("token-line")&&(n++,a=0),i)return}}(e),!r||!i)return{top:0,left:0,width:0,height:0};const s=function(){const e=document.createRange();e.setStart(r,l),e.setEnd(i,o);const t=e.getBoundingClientRect();return{top:t.top,left:t.left,width:t.width,height:t.height}}(),p=e.getBoundingClientRect();return{top:s.top-p.top,left:s.left-p.left,width:s.width,height:s.height}}(e,t)}function d(e){return{...e}}n.d(t,{CE:()=>p,Je:()=>c,MU:()=>r,Pb:()=>i,Qb:()=>d,US:()=>a,_V:()=>l,r7:()=>o})},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(87462),r=n(67294);const l="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},66830:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(67294),r=n(60614),l=n(96214),i=n(73935);function o(e){if(!e.container)return null;const[t,n]=a.useState(null);return(0,a.useEffect)((()=>{const t=setInterval((()=>{const a=e.getPortalTarget();a&&(n(a),clearInterval(t))}),200);return()=>clearInterval(t)}),[e.container]),function(e,t,n){const r=a.useRef((()=>{const e=document.createElement("div");if(n.style)for(const t in n.style)e.style[t]=n.style[t];return e})());return(0,a.useEffect)((()=>{if(t)return t.prepend(r.current),()=>{t.removeChild(r.current)}}),[t,r]),t?(0,i.createPortal)(e,r.current):null}(e.children,t,{style:e.portalStyle})}function s(e){return a.createElement("button",{style:{marginRight:5,cursor:"pointer"},title:"Show the full source",onClick:e.onClick},a.createElement(l.Z,{fontSize:"small"}))}function p(e){return a.createElement(o,{container:e.container,getPortalTarget:()=>e.container.querySelector("pre+div"),portalStyle:e.portalStyle},e.children)}const m=function(e){return a.createElement(p,{container:e.container},a.createElement(s,{onClick:e.onShowFullCode}))};var c=n(18169),d=n(93946),u=n(70655),h=n(53247),g=n(71498),k=n(95175),y=n(94229);function N(e){return a.createElement("div",{className:"insp-flow-control-buttons"},e.running&&a.createElement(d.Z,{title:"Pause",color:"success",onClick:e.onPause},a.createElement(h.Z,null)),!e.running&&a.createElement(a.Fragment,null,"(paused)\xa0",a.createElement(d.Z,{title:"Resume",color:"success",onClick:e.onResume},a.createElement(u.Z,null))),a.createElement(d.Z,{title:"Step Backward",color:"info",onClick:e.onStepBackward},a.createElement(g.Z,null)),a.createElement(d.Z,{title:"Step Forward",color:"info",onClick:e.onStepForward},a.createElement(k.Z,null)),a.createElement(d.Z,{title:"Settings",color:"inherit"},a.createElement(y.Z,null)),a.createElement("span",{style:{marginLeft:5}},"Step"),a.createElement("span",{style:{minWidth:30,textAlign:"right"}},e.currentStep||1),"\xa0of ",e.totalSteps||1)}var f=n(94265);const v=function(e){const t=e.variant??"default",n=e.lineBounds.top+e.lineBounds.height/2;return a.createElement("span",{key:e.key,"data-variant":t,className:"insp-code-arrow",style:{top:n,left:`calc(${e.lineBounds.left}px - 2rem)`}},a.createElement(f.Z,{color:"inherit",fontSize:"inherit"}))};const b=function(e){const t=e.variant??"default";return a.createElement("div",{key:e.key,className:"insp-block-highlight","data-variant":t,style:{top:e.bounds.top-2,left:e.bounds.left-2,width:`calc(min(${e.bounds.width+4}px, 80vw))`,height:e.bounds.height+4}})};function w(e){return a.createElement(o,{container:e.container,getPortalTarget:()=>e.container.querySelector("pre>code"),portalStyle:e.portalStyle},e.children)}function C(e){return a.createElement(o,{container:e.container,getPortalTarget:()=>e.container.querySelector(".theme-code-block"),portalStyle:e.portalStyle},e.children)}function x(e){const[t,n]=a.useState(0),[r,l]=a.useState(null);let i;e.setup.stages&&(i=e.setup.stages[t]);const o=i?.highlights??[],s=i?.arrows??[],p=[],m=[];if(e.container&&o.length>0){const t=e.container.querySelector("pre>code");t&&(function(e,t,n){for(const a of t){const t=(0,c.MU)(a),r=(0,c.Je)(e,t);n.push(r)}}(t,o,p),function(e,t,n,a){for(const r of n){const n=(0,c.CE)(e,r.line,t);a.push({arrow:r,bounds:n})}}(t,e.container,s,m))}const d=null!==r,u=e.setup.stages.length,h=()=>{n((e=>(e+1)%u))},g=()=>{l(setInterval((()=>{h()}),e.setup.autoPlayInterval||1e3))},k=()=>{r&&(clearInterval(r),l(null))};return(0,a.useEffect)((()=>(e.setup.runOnStart&&g(),()=>{k()})),[]),a.createElement(a.Fragment,null,e.setup.showControlButtons&&a.createElement(N,{running:d,onResume:g,onPause:k,onStepForward:()=>{k(),h()},onStepBackward:()=>{k(),n((e=>(e-1+u)%u))},currentStep:t+1,totalSteps:u}),a.createElement(w,{container:e.container},p.map(((e,n)=>e&&a.createElement(b,{key:`hgh-${t}-${n}`,bounds:e,variant:(0,c.US)(o[n])})))),a.createElement(C,{container:e.container,portalStyle:{zIndex:1,position:"absolute"}},m.map(((e,n)=>a.createElement(v,{key:`arr-${t}-${n}`,arrow:e.arrow,lineBounds:e.bounds,variant:e.arrow.variant})))))}function T(e){const t=(0,a.useRef)(null),n=(0,a.useRef)(null),[l,i]=a.useState(!1),[o,s]=a.useState(null),[p,c]=a.useState(null);(0,a.useEffect)((()=>{s(t.current)}),[t]),(0,a.useEffect)((()=>{c(n.current)}),[n]);const d="number"==typeof e.maxLines,u={};if(d){const t=1.43*Math.max(5,e.maxLines);u.height=`${t}em`}(0,a.useEffect)((()=>{const e=l?n.current:t.current;if(!e)return;const a=e.querySelector(".prism-code");a&&(a.style.overflowY="auto",a.style.overflowX="auto");const r=e.querySelector(".prism-code")?.parentNode;r&&(r.style.display="flex",r.style.height=`${u.height}`,r.style.overflow="hidden",r.style.resize="vertical",r.style.minHeight="40px",r.style.maxHeight="90vh",r.style.flexDirection="column")}),[l,t,n]);const h=()=>{const e=()=>i(!l),t=document;t.startViewTransition?t.startViewTransition(e):e()};return a.createElement(a.Fragment,null,e.inspectionSetup&&a.createElement(x,{container:o,setup:e.inspectionSetup}),a.createElement("div",{ref:t,style:{display:l?"none":"block"}},e.children),e.fullCode&&a.createElement(a.Fragment,null,a.createElement(m,{container:o,onShowFullCode:h}),a.createElement("div",{ref:n,style:{display:l?"block":"none"}},"string"==typeof e.fullCode?a.createElement(r.Z,{language:"cpp"},e.fullCode):e.fullCode),a.createElement(m,{container:p,onShowFullCode:h})))}T.isMDXComponent=!0},11687:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(87462),r=n(67294),l=n(44996),i=n(72412);function o(e){let t=null;if(e.desc){const n=e.center?{textAlign:"center",display:"block"}:{};t=r.createElement("small",{style:n},(0,i.Z)(e.desc))}const n=e.fullwidth||e.center,o={border:e.border?"1px solid gray":void 0,display:n?"block":"inline-block"},s=e.style||{};s.borderRadius=e.borderRadius||void 0,s.minWidth=e.minwidth||void 0,s.width=e.width||void 0,s.maxWidth=e.maxwidth||void 0,s.minHeight=e.minheight||void 0,s.height=e.height||void 0,s.maxHeight=e.maxheight||void 0,s.display="block",s.imageRendering="-webkit-optimize-contrast",e.center&&(s.margin="0 auto");const p={...e};return"string"==typeof e.src&&(p.src=e.src.startsWith("/img/")?(0,l.Z)(e.src):e.src),delete p.border,delete p.borderRadius,delete p.center,delete p.fullwidth,delete p.style,delete p.minwidth,delete p.width,delete p.maxwidth,delete p.minheight,delete p.height,delete p.maxheight,delete p.desc,r.createElement(r.Fragment,null,r.createElement("div",{style:o},r.createElement("img",(0,a.Z)({},p,{style:s}))),t)}o.isMDXComponent=!0},18510:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(67294),r=n(44996),l=n(34386),i=n(72412);const o="TooltipContent_Lvru",s="TooltipTitle_ukF2";function p(e){let{url:t,title:n,maxWidth:p,children:m}=e;let c=p||"clamp(250px, 25vw, 800px)";"string"==typeof c&&c.endsWith("vw")&&(c=`clamp(250px, ${c}, 800px)`);const d="function"==typeof n?a.createElement(n):n,u=(t||"").startsWith("/")?(0,r.Z)(t):t,h=t?a.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},m):m;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:c}}},title:a.createElement("span",{className:s},(0,i.Z)(d)),placement:"top",arrow:!0},a.createElement("span",{className:o},h))}p.isMDXComponent=!0},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})}}]);