"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[32023],{98088:(e,t,n)=>{n.d(t,{ZP:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={toc:[]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("b",null,"Undefined behaviour")," is a property of a program that's incorrect, but likely compiles. It is incorrect in a way, that the error is only invoked in certain conditions at runtime.",(0,a.kt)("p",null,"Common cases include: ",(0,a.kt)("strong",{parentName:"p"},"out of bounds access"),", ",(0,a.kt)("strong",{parentName:"p"},"reading uninitialized objects"),", ",(0,a.kt)("strong",{parentName:"p"},"dangling pointers/references")," or ",(0,a.kt)("strong",{parentName:"p"},"signed overflow"),"."))}l.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(86010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(87462),a=n(67294),s=n(86010),l=n(12466),i=n(76775),o=n(91980),c=n(67392),p=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=m(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[o,c]=g({queryString:n,groupId:r}),[d,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),f=(()=>{const e=o??d;return u({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),k(e)}),[c,k,s]),tabValues:s}}var f=n(72389);const N="tabList__CuJ",_="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==i&&(d(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:m},l,{className:(0,s.Z)("tabs__item",_,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function C(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function h(e){const t=k(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",N)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(C,(0,r.Z)({},e,t)))}function v(e){const t=(0,f.Z)();return a.createElement(h,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(87462),a=n(67294);const s="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:s,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(74866),s=n(85162),l=n(99372),i=n(72412);const o={};function c(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:c.default||0==t},c.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:o.smallTabs},r.createElement(s.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(c.simplified)),r.createElement(s.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(c.detailed)))):c.value):r.createElement(s.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,i.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var r=n(67294),a=n(72412);const s={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:s.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:s.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:s.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:s.accessPrivate}},o=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:s.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function p(e){r.useContext(l.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?r.createElement("span",{className:s[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:s.symbolProp},(e=>{const t=o(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:s.symbolName},t),r.createElement("td",{className:s.symbolDesc},(0,a.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(44996),s=n(34386),l=n(72412);const i="TooltipContent_Lvru",o="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let d=c||"clamp(250px, 25vw, 800px)";"string"==typeof d&&d.endsWith("vw")&&(d=`clamp(250px, ${d}, 800px)`);const m="function"==typeof n?r.createElement(n):n,u=(t||"").startsWith("/")?(0,a.Z)(t):t,g=t?r.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},p):p;return r.createElement(s.Z,{componentsProps:{tooltip:{style:{maxWidth:d}}},title:r.createElement("span",{className:o},(0,l.Z)(m)),placement:"top",arrow:!0},r.createElement("span",{className:i},g))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>g,U6:()=>m,OS:()=>u});var r=n(67294),a=n(95999);const s="markedText_c6kK",l="since_c1Q3",i="until_jXK6",o="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:s+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:l},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return r.createElement(d,{className:o},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",r.createElement(a.Z,null,"deprecated")),p.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),p.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),p.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),p.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),p.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),p.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),p.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),p.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),p.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),p.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),p.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),p.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),p.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),p.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),p.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),p.set("removed-",r.createElement(a.Z,null,"deleted")),p.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),p.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),p.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),p.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),p.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),p.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),p.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},95009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,i={unversionedId:"std/algo/ranges/_codes/set_intersection/since-cpp20-detailed",id:"std/algo/ranges/_codes/set_intersection/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/set_intersection",slug:"/std/algo/ranges/_codes/set_intersection/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::input_iterator I1,\n  std::sentinel_for<I1> S1,\n  std::input_iterator I2,\n  std::sentinel_for<I2> S2,\n  std::weakly_incrementable O,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\nconstexpr set_intersection_result<I1, I2, O>\n    set_intersection( I1 first1, S1 last1, I2 first2, S2 last2, O result,\n                    Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\ntemplate<\n  ranges::input_range R1,\n  ranges::input_range R2,\n  std::weakly_incrementable O,\n  class Comp = ranges::less,\n  class Proj1 = std::identity,\n  class Proj2 = std::identity\n>\n  requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n                          O, Comp, Proj1, Proj2>\nconstexpr set_intersection_result<ranges::borrowed_iterator_t<R1>,\n                                  ranges::borrowed_iterator_t<R2>, O>\n    set_difference( R1&& r1, R2&& r2, O result, Comp comp = {},\n                    Proj1 proj1 = {}, Proj2 proj2 = {} );\n")))}d.isMDXComponent=!0},34556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},l=void 0,i={unversionedId:"std/algo/ranges/_codes/set_intersection/since-cpp20-simplified",id:"std/algo/ranges/_codes/set_intersection/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/set_intersection",slug:"/std/algo/ranges/_codes/set_intersection/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/set_intersection/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr set_intersection_result<I1, I2, O>\n    set_intersection( I1 first1, S1 last1, I2 first2, S2 last2, O result,\n                    Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );\n\n// (2)\nconstexpr set_intersection_result<ranges::borrowed_iterator_t<R1>,\n                                  ranges::borrowed_iterator_t<R2>, O>\n    set_intersection( R1&& r1, R2&& r2, O result, Comp comp = {},\n                    Proj1 proj1 = {}, Proj2 proj2 = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"I2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::input_iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"S2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I1>"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"R2")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::input_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"O")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::weakly_incrementable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Proj2")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp")," template arguments have the following default types: ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges::less")," for all overloads."),(0,a.kt)("p",null,"Additionaly, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"mergeable<I1, I2, O, Comp, Proj1, Proj2>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>, O, Comp, Proj1, Proj2>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommited here for readability)"))}d.isMDXComponent=!0},33345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>b,frontMatter:()=>u,metadata:()=>k,toc:()=>N});var r=n(87462),a=n(67294),s=n(3905),l=n(55059),i=n(22307),o=n(99801),c=n(18510),p=n(98088),d=n(95009),m=n(34556);const u={title:"ranges::set_intersection algorithm",sidebar_label:"ranges::set_intersection(  )",description:"ranges::set_intersection algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","intersection","set_intersection"],cppreference_origin_rel:"w/cpp/algorithm/ranges/set_intersection"},g=void 0,k={unversionedId:"std/algo/ranges/set_intersection",id:"std/algo/ranges/set_intersection",title:"ranges::set_intersection algorithm",description:"ranges::set_intersection algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/set_intersection.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/set_intersection",permalink:"/CppLangNet/docs/std/algo/ranges/set_intersection",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/set_intersection.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"intersection",permalink:"/CppLangNet/docs/tags/intersection"},{label:"set_intersection",permalink:"/CppLangNet/docs/tags/set-intersection"}],version:"current",frontMatter:{title:"ranges::set_intersection algorithm",sidebar_label:"ranges::set_intersection(  )",description:"ranges::set_intersection algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","intersection","set_intersection"],cppreference_origin_rel:"w/cpp/algorithm/ranges/set_intersection"},sidebar:"defaultSidebar",previous:{title:"ranges::set_union(  )",permalink:"/CppLangNet/docs/std/algo/ranges/set_union"},next:{title:"ranges::set_difference(  )",permalink:"/CppLangNet/docs/std/algo/ranges/set_difference"}},f={},N=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],_={toc:N};function b(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stdrangesset_intersection-algorithm"},"std::ranges::set_intersection() algorithm"),(0,s.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,s.kt)(m.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,s.kt)(d.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,s.kt)("p",null,"With the helper types defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"template< class I1, class I2, class O >\nusing set_intersection_result = ranges::in_in_out_result<I1, I2, O>;\n")),(0,s.kt)("p",null,"Constructs a sorted range beginning at ",(0,s.kt)("inlineCode",{parentName:"p"},"result")," consisting of elements that are found in\nboth sorted input ranges [",(0,s.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,s.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last2"),")."),(0,s.kt)("p",null,"If some element is found ",(0,s.kt)("inlineCode",{parentName:"p"},"m")," times in [",(0,s.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last1"),") and ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," times in [",(0,s.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,s.kt)("inlineCode",{parentName:"p"},"last2"),"),\nthe first ",(0,s.kt)("inlineCode",{parentName:"p"},"min(m, n)")," elements will be copied from the first range to ",(0,s.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,s.kt)("p",null,"The order of equivalent elements is preserved."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"(1)")," Elements are compared using the given binary comparison function ",(0,s.kt)("inlineCode",{parentName:"li"},"comp"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"(2)")," Same as ",(0,s.kt)("strong",{parentName:"li"},"(1)"),", but uses ",(0,s.kt)("inlineCode",{parentName:"li"},"r1")," as the first range and ",(0,s.kt)("inlineCode",{parentName:"li"},"r2")," as the second range, as if using ",(0,s.kt)("inlineCode",{parentName:"li"},"ranges::begin(r1)")," as ",(0,s.kt)("inlineCode",{parentName:"li"},"first1"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"ranges::end(r1)")," as ",(0,s.kt)("inlineCode",{parentName:"li"},"last1"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"ranges::begin(r2)")," as ",(0,s.kt)("inlineCode",{parentName:"li"},"first2"),", and ",(0,s.kt)("inlineCode",{parentName:"li"},"ranges::end(r2)")," as ",(0,s.kt)("inlineCode",{parentName:"li"},"last2"),".")),(0,s.kt)("admonition",{title:"Undefined Behaviour",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)(c.Z,{title:(0,s.kt)(p.ZP,{mdxType:"Term_UndefinedBehaviour"}),mdxType:"Tooltip"},"behavior is undefined")," if:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"The input ranges are not sorted with respect to ",(0,s.kt)("inlineCode",{parentName:"li"},"comp")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"proj1")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"proj2"),", respectively"),(0,s.kt)("li",{parentName:"ul"},"Or the resulting range overlaps with either of the input ranges."))),(0,s.kt)("p",null,"The function-like entities described on this page are ",(0,s.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,s.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)(l.ZP,{mdxType:"SymbolTable"},(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(a.Fragment,null," ",(0,s.kt)("code",null,"first1")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last1")," "),mdxType:"Symbol"},"The first sorted input range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(a.Fragment,null," ",(0,s.kt)("code",null,"r")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"r1")," "),mdxType:"Symbol"},"The first sorted input range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)(a.Fragment,null," ",(0,s.kt)("code",null,"first2")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The second sorted input range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"r2"),mdxType:"Symbol"},"The second sorted input range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"result"),mdxType:"Symbol"},"The beginning of the destination range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"comp"),mdxType:"Symbol"},"Comparator to apply to the projected elements."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"proj1"),mdxType:"Symbol"},"Projection to apply to the elements in the first range."),(0,s.kt)(l.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"proj2"),mdxType:"Symbol"},"Projection to apply to the elements in the second range.")),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("p",null,"A value of type ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::set_intersection_result")," initialized as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  last1,\n  last2,\n  result_last\n}\n")),(0,s.kt)("p",null,"Where ",(0,s.kt)("inlineCode",{parentName:"p"},"result_last")," is the end of the constructed range."),(0,s.kt)("h3",{id:"complexity"},"Complexity"),(0,s.kt)("p",null,"Given ",(0,s.kt)("inlineCode",{parentName:"p"},"N1")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::distance(first1, last1)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"N2")," as ",(0,s.kt)("inlineCode",{parentName:"p"},"ranges::distance(first2, last12)"),":"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"2 ","*"," (N1 + N2) \u2212 1")," comparisons and applications of each projection."),(0,s.kt)("h3",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"(none)")),(0,s.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"set_intersection(1) and set_intersection(2)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct set_intersection_fn\n{\n    template<std::input_iterator I1, std::sentinel_for<I1> S1,\n             std::input_iterator I2, std::sentinel_for<I2> S2,\n             std::weakly_incrementable O, class Comp = ranges::less,\n             class Proj1 = std::identity, class Proj2 = std::identity>\n    requires std::mergeable<I1, I2, O, Comp, Proj1, Proj2>\n    constexpr ranges::set_union_result<I1, I2, O>\n        operator()(I1 first1, S1 last1, I2 first2, S2 last2,\n                   O result, Comp comp = {},\n                   Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        while (!(first1 == last1 or first2 == last2))\n        {\n            if (std::invoke(comp, std::invoke(proj1, *first1), std::invoke(proj2, *first2)))\n                ++first1;\n            else if (std::invoke(comp, std::invoke(proj2, *first2), std::invoke(proj1, *first1)))\n                ++first2;\n            else\n                *result = *first1, ++first1, ++first2, ++result;\n        }\n        return {ranges::next(std::move(first1), std::move(last1)),\n                ranges::next(std::move(first2), std::move(last2)),\n                std::move(result)};\n    }\n\n    template<ranges::input_range R1, ranges::input_range R2,\n             std::weakly_incrementable O, class Comp = ranges::less,\n             class Proj1 = std::identity, class Proj2 = std::identity>\n    requires std::mergeable<ranges::iterator_t<R1>, ranges::iterator_t<R2>,\n                            O, Comp, Proj1, Proj2>\n    constexpr ranges::set_intersection_result<ranges::borrowed_iterator_t<R1>,\n                                              ranges::borrowed_iterator_t<R2>, O>\n        operator()(R1&& r1, R2&& r2, O result, Comp comp = {},\n                   Proj1 proj1 = {}, Proj2 proj2 = {}) const\n    {\n        return (*this)(ranges::begin(r1), ranges::end(r1),\n                       ranges::begin(r2), ranges::end(r2),\n                       std::move(result), std::move(comp),\n                       std::move(proj1), std::move(proj2));\n    }\n};\n\ninline constexpr set_intersection_fn set_intersection {};\n"))),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <vector>\n\nvoid print(const auto& v, const auto& rem)\n{\n    std::cout << "{ ";\n    for (const auto& e : v)\n        std::cout << e << \' \';\n    std::cout << \'}\' << rem;\n}\n\nint main()\n{\n    const auto in1 = {1, 2, 2, 3, 4, 5, 6};\n    const auto in2 = {2, 2, 3, 3, 5, 7};\n    std::vector<int> out {};\n\n    std::ranges::set_intersection(in1, in2, std::back_inserter(out));\n\n    print(in1, " \u2229 "), print(in2, " = "), print(out, "\\n");\n}\n'))),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"{ 1 2 2 3 4 5 6 } \u2229 { 2 2 3 3 5 7 } = { 2 2 3 5 }\n")))))}b.isMDXComponent=!0}}]);