"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[46211],{42465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>x,default:()=>_,frontMatter:()=>w,metadata:()=>T,toc:()=>S});var r=n(87462),a=(n(67294),n(3905)),o=(n(22307),n(45245),n(11687),n(18510),n(56693),n(74866)),i=n(85162);const s={toc:[]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"In function 'int main()':\nerror: 'string' is not a member of 'std'\n    2 |     std::string s = \"Hello\";\n      |          ^~~~~~\nnote: 'std::string' is defined in header '<string>'; did you forget to '#include <string>'?\n  +++ |+#include <string>\n    1 | int main() {\n")))}l.isMDXComponent=!0;const u={toc:[]};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"error C2039: 'string': is not a member of 'std'\npredefined C++ types (compiler internal)(339): message : see declaration of 'std'\nerror C2065: 'string': undeclared identifier \n")))}p.isMDXComponent=!0;const c={toc:[]};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"In function 'int main()':\nerror: conversion from 'int' to non-scalar type 'std::string' {aka 'std::__cxx11::basic_string<char>'} requested\n    4 |     std::string s = 123;\n      |                     ^~~\n")))}d.isMDXComponent=!0;const m={toc:[]};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"error C2440: 'initializing': cannot convert from 'int' to 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'\nnote: No constructor could take the source type, or constructor overload resolution was ambiguous\n")))}g.isMDXComponent=!0;const h={toc:[]};function b(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"In function 'int main()':\nerror: no match for 'operator*=' (operand types are 'std::string' {aka 'std::__cxx11::basic_string<char>'} and 'int')\n    5 |     s *= 15;\n      |     ~~^~~~~\n")))}b.isMDXComponent=!0;const k={toc:[]};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"error C2676: binary '*=': 'std::string' does not define this operator or a conversion to a type acceptable to the predefined operator\n")))}f.isMDXComponent=!0;const y={toc:[]};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"In function 'int main()':\nerror: invalid operands of types 'const char [7]' and 'const char [6]' to binary 'operator+'\n    5 |     std::string s = \"Hello \" + \"World\";\n      |                     ~~~~~~~~ ^ ~~~~~~~\n      |                     |          |\n      |                     |          const char [6]\n      |                     const char [7]\n")))}v.isMDXComponent=!0;const C={toc:[]};function N(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"error C2110: '+': cannot add two pointers\n")))}N.isMDXComponent=!0;const w={toc_max_heading_level:2,hide_title:!0,title:"Variables \xbb Strings \xbb Common Problems"},x=void 0,T={unversionedId:"course/basics/variables/strings/common-problems",id:"course/basics/variables/strings/common-problems",title:"Variables \xbb Strings \xbb Common Problems",description:"Forgotten include",source:"@site/content/learn/course/basics/variables/strings/common-problems.mdx",sourceDirName:"course/basics/variables/strings",slug:"/course/basics/variables/strings/common-problems",permalink:"/CppLangNet/learn/course/basics/variables/strings/common-problems",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/variables/strings/common-problems.mdx",tags:[],version:"current",frontMatter:{toc_max_heading_level:2,hide_title:!0,title:"Variables \xbb Strings \xbb Common Problems"},sidebar:"defaultSidebar",previous:{title:"Variables \xbb Strings \xbb Examples",permalink:"/CppLangNet/learn/course/basics/variables/strings/examples"},next:{title:"Variables \xbb Strings \xbb Exercises",permalink:"/CppLangNet/learn/course/basics/variables/strings/exercises"}},E={},S=[{value:"Forgotten include",id:"forgotten-include",level:2},{value:"Potential error message",id:"potential-error-message",level:3},{value:"Solution",id:"solution",level:3},{value:"Treating numbers as strings",id:"treating-numbers-as-strings",level:2},{value:"Potential error message:",id:"potential-error-message-1",level:3},{value:"Solution",id:"solution-1",level:3},{value:"Treating strings as numbers",id:"treating-strings-as-numbers",level:2},{value:"Potential error message:",id:"potential-error-message-2",level:3},{value:"Solution",id:"solution-2",level:3},{value:"Concatenating two string literals",id:"concatenating-two-string-literals",level:2},{value:"Potential error message:",id:"potential-error-message-3",level:3},{value:"Solution",id:"solution-3",level:3},{value:"Skipping input with std::getline",id:"skipping-input-with-stdgetline",level:2},{value:"Unexpected Behavior",id:"unexpected-behavior",level:3},{value:"Solution",id:"solution-4",level:3}],Z={toc:S};function _(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},Z,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"variables--strings--common-problems"},"Variables \xbb Strings \xbb Common Problems"),(0,a.kt)("h2",{id:"forgotten-include"},"Forgotten include"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'showLineNumbers title="\u274c Erroneous Code"',showLineNumbers:!0,title:'"\u274c',Erroneous:!0,'Code"':!0},'int main()\n{\n    // error-next-line\n    std::string s = "Hello";\n}\n')),(0,a.kt)("h3",{id:"potential-error-message"},"Potential error message"),(0,a.kt)(o.Z,{groupId:"compiler",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"gcc",label:"GCC",default:!0,mdxType:"TabItem"},(0,a.kt)(l,{mdxType:"ErrorMessage_ForgottenIncludeGCC"})),(0,a.kt)(i.Z,{value:"msvc",label:"MSVC",mdxType:"TabItem"},(0,a.kt)(p,{mdxType:"ErrorMessage_ForgottenIncludeMSVC"}))),(0,a.kt)("h3",{id:"solution"},"Solution"),(0,a.kt)("p",null,"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"#include <string>")," to the top of your file."),(0,a.kt)("h2",{id:"treating-numbers-as-strings"},"Treating numbers as strings"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Erroneous Code"',title:'"\u274c',Erroneous:!0,'Code"':!0},"#include <string>\n\nint main()\n{\n    // error-next-line\n    std::string s = 123;\n}\n")),(0,a.kt)("h3",{id:"potential-error-message-1"},"Potential error message:"),(0,a.kt)(o.Z,{groupId:"compiler",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"gcc",label:"GCC",default:!0,mdxType:"TabItem"},(0,a.kt)(d,{mdxType:"ErrorMessage_WrongIntToStringGCC"})),(0,a.kt)(i.Z,{value:"msvc",label:"MSVC",mdxType:"TabItem"},(0,a.kt)(g,{mdxType:"ErrorMessage_WrongIntToStringMSVC"}))),(0,a.kt)("h3",{id:"solution-1"},"Solution"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"std::to_string")," to convert an integer to a string.\nSee ",(0,a.kt)("a",{parentName:"p",href:"#conversions-between-numbers-and-strings"},"Conversions between numbers and strings"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"#numbers-and-strings"},"Numbers and Strings")," for more information."),(0,a.kt)("h2",{id:"treating-strings-as-numbers"},"Treating strings as numbers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Erroneous Code"',title:'"\u274c',Erroneous:!0,'Code"':!0},'#include <string>\n\nint main()\n{\n    std::string s = "123";\n    // error-next-line\n    s *= 15;\n}\n')),(0,a.kt)("h3",{id:"potential-error-message-2"},"Potential error message:"),(0,a.kt)(o.Z,{groupId:"compiler",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"gcc",label:"GCC",default:!0,mdxType:"TabItem"},(0,a.kt)(b,{mdxType:"ErrorMessage_StringIsNotIntGCC"})),(0,a.kt)(i.Z,{value:"msvc",label:"MSVC",mdxType:"TabItem"},(0,a.kt)(f,{mdxType:"ErrorMessage_StringIsNotIntMSVC"}))),(0,a.kt)("h3",{id:"solution-2"},"Solution"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"std::stoi")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"std::stof")," to convert a string into an algebreic value.\nSee ",(0,a.kt)("a",{parentName:"p",href:"#conversions-between-numbers-and-strings"},"Conversions between numbers and strings"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"#numbers-and-strings"},"Numbers and Strings")," for more information."),(0,a.kt)("h2",{id:"concatenating-two-string-literals"},"Concatenating two string literals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Erroneous Code"',title:'"\u274c',Erroneous:!0,'Code"':!0},'#include <string>\n\nint main()\n{\n    //error-next-line\n    std::string s = "Hello " + "World";\n}\n')),(0,a.kt)("h3",{id:"potential-error-message-3"},"Potential error message:"),(0,a.kt)(o.Z,{groupId:"compiler",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"gcc",label:"GCC",default:!0,mdxType:"TabItem"},(0,a.kt)(v,{mdxType:"ErrorMessage_AddingLiteralsGCC"})),(0,a.kt)(i.Z,{value:"msvc",label:"MSVC",mdxType:"TabItem"},(0,a.kt)(N,{mdxType:"ErrorMessage_AddingLiteralsMSVC"}))),(0,a.kt)("h3",{id:"solution-3"},"Solution"),(0,a.kt)("p",null,"Whenever you see ",(0,a.kt)("inlineCode",{parentName:"p"},'"TEXT"')," in a C++ file, that is known as a ",(0,a.kt)("em",{parentName:"p"},"string literal"),". Basically, a fancy term for saying that\nthis is a hardcoded text value. Crucially, however, the type of a string literal is not ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string"),".\nRather, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"const char[N]")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"N")," is the length of the text + 1. The GCC error above showcases this best."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"const char[N]")," is called an ",(0,a.kt)("em",{parentName:"p"},"array"),". We will cover arrays in a later chapter, but the important knowledge here is that\nyou cannot add two arrays together as they are not numbers. ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string")," is what provides us ability to concatenate strings\nvia ",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"."),(0,a.kt)("p",null,"The easiest way to fix this is to simply combine the string literals yourself like ",(0,a.kt)("inlineCode",{parentName:"p"},'"Hello World"'),"."),(0,a.kt)("h2",{id:"skipping-input-with-stdgetline"},"Skipping input with std::getline"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u26a0\ufe0f Buggy Code"',title:'"\u26a0\ufe0f',Buggy:!0,'Code"':!0},'#include <string>\n\nint main()\n{\n    int age;\n    int fullName;\n\n    std::cout << "Enter your age: ";\n    std::cin >> age;\n\n    std::cout << "Enter your full name: ";\n    // warning-next-line\n    std::getline(std::cin, fullName); // This line is seemingly skipped\n\n    std::cout << "\\nYour name is " << fullName << " and your age is " << age;\n}\n')),(0,a.kt)("h3",{id:"unexpected-behavior"},"Unexpected Behavior"),(0,a.kt)("p",null,"You may find that when using ",(0,a.kt)("inlineCode",{parentName:"p"},"std::getline")," after doing some form of ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin >> ..."),", that it appears to skip the ",(0,a.kt)("inlineCode",{parentName:"p"},"std::getline"),".\nIn the above example, it will ask your age, you would input say ",(0,a.kt)("inlineCode",{parentName:"p"},"23"),", and it will ask your full name but not let you enter a name.\nInstead, it will immedaitely output ",(0,a.kt)("inlineCode",{parentName:"p"},"Your name is  and your age is 23"),". "),(0,a.kt)("h3",{id:"solution-4"},"Solution"),(0,a.kt)("p",null,"Understanding why it does this is a bit tricky. The key aspect to remember is when you use ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin >> ..."),", it will take input\nfrom ",(0,a.kt)("em",{parentName:"p"},"stdin")," until it sees whitespace (a space, a newline, or a tab). When you press ",(0,a.kt)("inlineCode",{parentName:"p"},"Enter")," on your keyboard to input your age,\nit places a ",(0,a.kt)("em",{parentName:"p"},"newline character")," ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n")," onto ",(0,a.kt)("em",{parentName:"p"},"stdin"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin")," then reads the number you typed, and stops at that newline\n",(0,a.kt)("strong",{parentName:"p"},"without removing the ",(0,a.kt)("inlineCode",{parentName:"strong"},"\\n")," character"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"std::getline")," uses the presence of these ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n")," characters to determine where a full line ends.\nSo, when it attempts to read from ",(0,a.kt)("em",{parentName:"p"},"stdin")," (",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin"),") to read a line up to the next ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n"),",\nit immediately sees the ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n")," character that was left by the previous ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin >> age;"),".\nTherefore, it interprets this as an empty line and sets ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName")," to be an empty string ",(0,a.kt)("inlineCode",{parentName:"p"},'""'),"."),(0,a.kt)("p",null,"The solution to this is another ",(0,a.kt)("em",{parentName:"p"},"method")," called ",(0,a.kt)("inlineCode",{parentName:"p"},"ignore"),". This method will tell ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin")," to\nskip the remaining newline character that was left from the previous operation. Whenever you plan on using ",(0,a.kt)("inlineCode",{parentName:"p"},"std::getline")," after\na ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin >> ...")," operation, you should put the method call ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin.ignore();")," in between, like in the abridged example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 How to use the ignore method"',title:'"\ud83d\udd39',How:!0,to:!0,use:!0,the:!0,ignore:!0,'method"':!0},"int age;\nstd::string fullName;\n\nstd::cin >> age;\n\n//highlight-next-line\nstd::cin.ignore();\n\nstd::getline(std::cin, fullName);\n")))}_.isMDXComponent=!0},56693:(e,t,n)=>{n.d(t,{ZP:()=>i});var r=n(87462),a=(n(67294),n(3905));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Note, this article is not finished! You can help by editing this doc page.")))}i.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),a=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(87462),a=n(67294),o=n(86010),i=n(12466),s=n(76775),l=n(91980),u=n(67392),p=n(50012);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,u]=g({queryString:n,groupId:r}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=l??c;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var b=n(72389);const k="tabList__CuJ",f="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==s&&(c(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",f,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function C(e){const t=h(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",k)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return a.createElement(C,(0,r.Z)({key:String(t)},e))}},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(87462),a=n(67294);const o="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:o,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},45245:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(67294);const a="slideShow_tFOv";function o(e){let t=e.src+"?";const n=[];!1===e.autoStart?n.push("start=false"):n.push("start=true"),!1===e.loop?n.push("loop=false"):n.push("loop=true"),"number"==typeof e.delay?n.push(`delayms=${e.delay}`):n.push("delayms=1000");const o={};e.fullWidth?o.width="100%":o.width="80%","number"==typeof e.aspectRatio?o.aspectRatio=`${e.aspectRatio} / 1`:o.aspectRatio=e.aspectRatio||"16 / 9",t+=n.join("&");return r.createElement("div",{style:e.centered?{display:"flex",margin:"0 auto",justifyContent:"center"}:void 0},r.createElement("iframe",{className:a,style:o,src:t,frameBorder:0,allowFullScreen:!0}))}},11687:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(87462),a=n(67294),o=n(44996),i=n(72412);function s(e){let t=null;if(e.desc){const n=e.center?{textAlign:"center",display:"block"}:{};t=a.createElement("small",{style:n},(0,i.Z)(e.desc))}const n=e.fullwidth||e.center,s={border:e.border?"1px solid gray":void 0,display:n?"block":"inline-block"},l=e.style||{};l.borderRadius=e.borderRadius||void 0,l.minWidth=e.minwidth||void 0,l.width=e.width||void 0,l.maxWidth=e.maxwidth||void 0,l.minHeight=e.minheight||void 0,l.height=e.height||void 0,l.maxHeight=e.maxheight||void 0,l.display="block",l.imageRendering="-webkit-optimize-contrast",e.center&&(l.margin="0 auto");const u={...e};return"string"==typeof e.src&&(u.src=e.src.startsWith("/img/")?(0,o.Z)(e.src):e.src),delete u.border,delete u.borderRadius,delete u.center,delete u.fullwidth,delete u.style,delete u.minwidth,delete u.width,delete u.maxwidth,delete u.minheight,delete u.height,delete u.maxheight,delete u.desc,a.createElement(a.Fragment,null,a.createElement("div",{style:s},a.createElement("img",(0,r.Z)({},u,{style:l}))),t)}s.isMDXComponent=!0},18510:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(67294),a=n(44996),o=n(34386),i=n(72412);const s="TooltipContent_Lvru",l="TooltipTitle_ukF2";function u(e){let{url:t,title:n,maxWidth:u,children:p}=e;let c=u||"clamp(250px, 25vw, 800px)";"string"==typeof c&&c.endsWith("vw")&&(c=`clamp(250px, ${c}, 800px)`);const d="function"==typeof n?r.createElement(n):n,m=(t||"").startsWith("/")?(0,a.Z)(t):t,g=t?r.createElement("a",{href:m,target:"_blank",rel:"noreferrer"},p):p;return r.createElement(o.Z,{componentsProps:{tooltip:{style:{maxWidth:c}}},title:r.createElement("span",{className:l},(0,i.Z)(d)),placement:"top",arrow:!0},r.createElement("span",{className:s},g))}u.isMDXComponent=!0},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})}}]);