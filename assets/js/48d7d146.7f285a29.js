"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[87132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,g=u["".concat(l,".").concat(p)]||u[p]||m[p]||i;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},36217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));n(11687);const i={},s="Variables \xbb Strings \xbb Examples",o={unversionedId:"course/basics/variables/strings/examples",id:"course/basics/variables/strings/examples",title:"Variables \xbb Strings \xbb Examples",description:"Personal details",source:"@site/content/learn/course/basics/variables/strings/examples.mdx",sourceDirName:"course/basics/variables/strings",slug:"/course/basics/variables/strings/examples",permalink:"/CppLangNet/learn/course/basics/variables/strings/examples",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/variables/strings/examples.mdx",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"3. Strings",permalink:"/CppLangNet/learn/course/basics/variables/strings"},next:{title:"Variables \xbb Strings \xbb Common Problems",permalink:"/CppLangNet/learn/course/basics/variables/strings/common-problems"}},l={},c=[{value:"Personal details",id:"personal-details",level:2},{value:"Team Name",id:"team-name",level:2},{value:"Numbers and Strings",id:"numbers-and-strings",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"variables--strings--examples"},"Variables \xbb Strings \xbb Examples"),(0,a.kt)("h2",{id:"personal-details"},"Personal details"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    // Setup the four variables we will read the user\'s information into\n    std::string firstName;\n    std::string lastName;\n    std::string favoriteColor;\n    int age;\n\n    // Ask the user 4 questions and store their answers\n    std::cout << "What is your first name? ";\n    std::cin >> firstName;\n\n    std::cout << "What is your last name? ";\n    std::cin >> lastName;\n\n    std::cout << "What is your age? ";\n    std::cin >> age;\n\n    std::cout << "What is your favorite color? ";\n    std::cin >> favoriteColor;\n\n    // Output the user\'s information whilst calculating the difference between their age and first name\'s length\n    std::cout << "\\n\\nWelcome, " << firstName << " " << lastName << "!\\n";\n    std::cout << "You are " << age << " years old, and your favorite color is " << favoriteColor << "\\n";\n    std::cout << "There are " << firstName.size() << " characters in your first name... ";\n    std::cout << (age - firstName.size()) << " less than your age!\\n";\n}\n')),(0,a.kt)("h2",{id:"team-name"},"Team Name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string animal;\n    std::string adjective;\n    int teamSize;\n\n    std::cout << "I\'m going to help you make a team name!\\n";\n\n    std::cout << "Enter an animal: ";\n    std::cin >> animal;\n\n    std::cout << "Enter an adjective: ";\n    std::cin >> adjective;\n\n    std::cout << "Enter the size of the team: ";\n    std::cin >> teamSize;\n\n    // Form the team name by concatenating the three answers we have so far\n    std::string teamName = adjective + animal + std::to_string(teamSize);\n    std::cout << "Your current team name is \\"" << teamName << "\\"!";\n\n    std::string pluralNoun;\n    std::cout << "Enter a plural noun: ";\n    std::cin >> pluralNoun;\n\n    // Finalize the team name by appending the plural noun\n    teamName += " sans " + pluralNoun;\n    std::cout << "Your final team name is \\"" << teamName << "\\"!";\n}\n')),(0,a.kt)("h2",{id:"numbers-and-strings"},"Numbers and Strings"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    int a;\n    int b;\n\n    std::cout << "Input two numbers: ";\n    std::cin >> a >> b;\n\n    int sum = a + b;\n    // Use an int-to-string conversion to concatenate the two numbers\n    std::string concatStr = std::to_string(a) + std::to_string(b);\n\n    std::cout << "Their sum is " << sum << " and their concatenation is " << concatStr << "\\n";\n\n    // Perform a string-to-int conversion and compute the difference\n    int concatVal = std::stoi(concatStr);\n    int diff = concatVal - sum;\n\n    std::cout << "Their difference is " << diff;\n}\n')))}m.isMDXComponent=!0},11687:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(87462),a=n(67294),i=n(44996),s=n(72412);function o(e){let t=null;if(e.desc){const n=e.center?{textAlign:"center",display:"block"}:{};t=a.createElement("small",{style:n},(0,s.Z)(e.desc))}const n=e.fullwidth||e.center,o={border:e.border?"1px solid gray":void 0,display:n?"block":"inline-block"},l=e.style||{};l.borderRadius=e.borderRadius||void 0,l.minWidth=e.minwidth||void 0,l.width=e.width||void 0,l.maxWidth=e.maxwidth||void 0,l.minHeight=e.minheight||void 0,l.height=e.height||void 0,l.maxHeight=e.maxheight||void 0,l.display="block",l.imageRendering="-webkit-optimize-contrast",e.center&&(l.margin="0 auto");const c={...e};return"string"==typeof e.src&&(c.src=e.src.startsWith("/img/")?(0,i.Z)(e.src):e.src),delete c.border,delete c.borderRadius,delete c.center,delete c.fullwidth,delete c.style,delete c.minwidth,delete c.width,delete c.maxwidth,delete c.minheight,delete c.height,delete c.maxheight,delete c.desc,a.createElement(a.Fragment,null,a.createElement("div",{style:o},a.createElement("img",(0,r.Z)({},c,{style:l}))),t)}o.isMDXComponent=!0},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})}}]);