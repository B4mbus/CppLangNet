"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[72006,90552,6445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(o,".").concat(u)]||m[u]||d[u]||l;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),a=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>_});var r=n(87462),a=n(67294),l=n(86010),s=n(12466),i=n(76775),o=n(91980),c=n(67392),p=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=m(e),[s,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[o,c]=f({queryString:n,groupId:r}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),v=(()=>{const e=o??d;return u({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{v&&i(v)}),[v]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,l]),tabValues:l}}var v=n(72389);const b="tabList__CuJ",h="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==i&&(d(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:m},s,{className:(0,l.Z)("tabs__item",h,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function y(e){const t=g(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",b)},a.createElement(k,(0,r.Z)({},e,t)),a.createElement(N,(0,r.Z)({},e,t)))}function _(e){const t=(0,v.Z)();return a.createElement(y,(0,r.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>r});const r=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(87462),a=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,a.createElement("div",(0,r.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),a=n(74866),l=n(85162),s=n(99372),i=n(72412);const o={};function c(e){const t=e.content||{};return r.createElement(a.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:c.default||0==t},c.simplified?r.createElement(r.Fragment,null,r.createElement(a.Z,{groupId:"view_mode",className:o.smallTabs},r.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,i.Z)(c.simplified)),r.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,i.Z)(c.detailed)))):c.value):r.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,i.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var r=n(67294),a=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const i={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},o=e=>e.none?i.None:e.pub||e.public?i.Public:e.prot||e.protected?i.Protected:e.priv||e.private?i.Private:i.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return r.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},r.createElement("tbody",null,n))})(r.Children.toArray(e.children))}function p(e){r.useContext(s.z);let t=(0,a.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const i=e.linkName||e.autoLink;!e.noLink&&i&&(t=r.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?r.createElement("span",{className:l[t]},n):null;return r.createElement("tr",null,!e.none&&r.createElement("td",{className:l.symbolProp},(e=>{const t=o(e);return r.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),r.createElement("td",{className:l.symbolName},t),r.createElement("td",{className:l.symbolDesc},(0,a.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>f,U6:()=>m,OS:()=>u});var r=n(67294),a=n(95999);const l="markedText_c6kK",s="since_c1Q3",i="until_jXK6",o="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function d(e){let{children:t,className:n}=e;return r.createElement("span",{className:l+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return r.createElement(d,{className:s},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return r.createElement(d,{className:i},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return r.createElement(d,{className:o},t,"\xa0",r.createElement("span",{className:c},r.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",r.createElement(a.Z,null,"deprecated")),p.set("deprecated-cpp98",r.createElement(a.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",r.createElement(a.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",r.createElement(a.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",r.createElement(a.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",r.createElement(a.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",r.createElement(a.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",r.createElement(a.Z,null,"deprecated in C++23")),p.set("until-cpp98",r.createElement(a.Z,null,"until C++98")),p.set("until-cpp03",r.createElement(a.Z,null,"until C++03")),p.set("until-cpp11",r.createElement(a.Z,null,"until C++11")),p.set("until-cpp14",r.createElement(a.Z,null,"until C++14")),p.set("until-cpp17",r.createElement(a.Z,null,"until C++17")),p.set("until-cpp20",r.createElement(a.Z,null,"until C++20")),p.set("until-cpp23",r.createElement(a.Z,null,"until C++23")),p.set("since-cpp98",r.createElement(a.Z,null,"since C++98")),p.set("since-cpp03",r.createElement(a.Z,null,"since C++03")),p.set("since-cpp11",r.createElement(a.Z,null,"since C++11")),p.set("since-cpp14",r.createElement(a.Z,null,"since C++14")),p.set("since-cpp17",r.createElement(a.Z,null,"since C++17")),p.set("since-cpp20",r.createElement(a.Z,null,"since C++20")),p.set("since-cpp23",r.createElement(a.Z,null,"since C++23")),p.set("removed-",r.createElement(a.Z,null,"deleted")),p.set("removed-cpp98",r.createElement(a.Z,null,"removed in C++98")),p.set("removed-cpp03",r.createElement(a.Z,null,"removed in C++03")),p.set("removed-cpp11",r.createElement(a.Z,null,"removed in C++11")),p.set("removed-cpp14",r.createElement(a.Z,null,"removed in C++14")),p.set("removed-cpp17",r.createElement(a.Z,null,"removed in C++17")),p.set("removed-cpp20",r.createElement(a.Z,null,"removed in C++20")),p.set("removed-cpp23",r.createElement(a.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function r(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>r})},7002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,i={unversionedId:"std/algo/ranges/_codes/remove_if/since-cpp20-detailed",id:"std/algo/ranges/_codes/remove_if/since-cpp20-detailed",title:"since-cpp20-detailed",description:"",source:"@site/content/docs/std/algo/ranges/_codes/remove_if/since-cpp20-detailed.mdx",sourceDirName:"std/algo/ranges/_codes/remove_if",slug:"/std/algo/ranges/_codes/remove_if/since-cpp20-detailed",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/remove_if/since-cpp20-detailed",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/remove_if/since-cpp20-detailed.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate<\n  std::permutable I,\n  std::sentinel_for<I> S,\n  class Proj = std::identity,\n  std::indirect_unary_predicate<std::projected<I, Proj>> Pred\n>\nconstexpr ranges::subrange<I> remove_if( I first, S last, Pred pred, Proj proj = {} );\n\n// (2)\ntemplate<\n  ranges::forward_range R,\n  class Proj = std::identity,\n  std::indirect_unary_predicate<\n  std::projected<ranges::iterator_t<R>, Proj>> Pred\n>\n  requires std::permutable<ranges::iterator_t<R>>\nconstexpr ranges::borrowed_subrange_t<R>\n    remove_if( R&& r, Pred pred, Proj proj = {} );\n")))}d.isMDXComponent=!0},11277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={},s=void 0,i={unversionedId:"std/algo/ranges/_codes/remove_if/since-cpp20-simplified",id:"std/algo/ranges/_codes/remove_if/since-cpp20-simplified",title:"since-cpp20-simplified",description:"The type of arguments are generic and have the following constraints:",source:"@site/content/docs/std/algo/ranges/_codes/remove_if/since-cpp20-simplified.mdx",sourceDirName:"std/algo/ranges/_codes/remove_if",slug:"/std/algo/ranges/_codes/remove_if/since-cpp20-simplified",permalink:"/CppLangNet/docs/std/algo/ranges/_codes/remove_if/since-cpp20-simplified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/_codes/remove_if/since-cpp20-simplified.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\nconstexpr ranges::subrange<I> remove_if( I first, S last, Pred pred, Proj proj = {} );\n\n// (2)\nconstexpr ranges::borrowed_subrange_t<R> remove_if( R&& r, Pred pred, Proj proj = {} );\n")),(0,a.kt)("p",null,"The type of arguments are generic and have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::permutable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"S")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::sentinel_for<I>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"R")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::ranges::forward_range")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Pred"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::indirect_unary_predicate<std::projected<I, Proj>> ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(2)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::projected<ranges::iterator_t<R>, Proj>>")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"T")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Proj")," - ",(0,a.kt)("strong",{parentName:"li"},"(none)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Proj")," template argument has a default type of ",(0,a.kt)("inlineCode",{parentName:"p"},"std::identity")," for all overloads."),(0,a.kt)("p",null,"Additionally, each overload has the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"(1)")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"std::permutable<ranges::iterator_t<R>>"))),(0,a.kt)("p",null,"(The ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," namespace was ommitted here for readability)"))}d.isMDXComponent=!0},39703:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>k,frontMatter:()=>d,metadata:()=>u,toc:()=>g});var r=n(87462),a=n(67294),l=n(3905),s=n(55059),i=n(22307),o=n(99801),c=n(7002),p=n(11277);const d={title:"ranges::remove_if algorithm",sidebar_label:"ranges::remove_if(  )",description:"ranges::remove_if algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","remove","remove_if","delete","erase"],cppreference_origin_rel:"w/cpp/algorithm/ranges/remove"},m=void 0,u={unversionedId:"std/algo/ranges/remove_if",id:"std/algo/ranges/remove_if",title:"ranges::remove_if algorithm",description:"ranges::remove_if algorithm C++ documentation",source:"@site/content/docs/std/algo/ranges/remove_if.mdx",sourceDirName:"std/algo/ranges",slug:"/std/algo/ranges/remove_if",permalink:"/CppLangNet/docs/std/algo/ranges/remove_if",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ranges/remove_if.mdx",tags:[{label:"ranges",permalink:"/CppLangNet/docs/tags/ranges"},{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"remove",permalink:"/CppLangNet/docs/tags/remove"},{label:"remove_if",permalink:"/CppLangNet/docs/tags/remove-if"},{label:"delete",permalink:"/CppLangNet/docs/tags/delete"},{label:"erase",permalink:"/CppLangNet/docs/tags/erase"}],version:"current",frontMatter:{title:"ranges::remove_if algorithm",sidebar_label:"ranges::remove_if(  )",description:"ranges::remove_if algorithm C++ documentation",hide_title:!0,tags:["ranges","algorithm","remove","remove_if","delete","erase"],cppreference_origin_rel:"w/cpp/algorithm/ranges/remove"}},f={},g=[{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],v=(b="Since",function(e){return console.warn("Component "+b+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var b;const h={toc:g};function k(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdrangesremove_if-algorithm"},"std::ranges::remove_if() algorithm"),(0,l.kt)(o.Z,{content:{"since-cpp20":{simplified:(0,l.kt)(p.default,{mdxType:"Signature_SinceCpp20_Simplified"}),detailed:(0,l.kt)(c.default,{mdxType:"Signature_SinceCpp20_Detailed"})}},mdxType:"SwitchView"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Removes all elements for which ",(0,l.kt)("inlineCode",{parentName:"p"},"std::invoke(pred, std::invoke(proj, *i))")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)"),", but uses ",(0,l.kt)("inlineCode",{parentName:"p"},"r")," as the source range, as if using ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::begin(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::end(r)")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),"."))),(0,l.kt)("p",null,"Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range."),(0,l.kt)("admonition",{type:"important"},(0,l.kt)("p",{parentName:"admonition"},"Relative order of the elements that remain is preserved and the physical size of the container is unchanged.")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"Iterators pointing to an element between the new ",(0,l.kt)("em",{parentName:"p"},"logical")," end and the ",(0,l.kt)("em",{parentName:"p"},"physical")," end of the range are still ",(0,l.kt)("a",{href:"#"},"dereferenceable"),", ",(0,l.kt)(v,{v:"cpp11",mdxType:"Since"},"but the elements themselves have unspecified values (as per ",(0,l.kt)("a",{href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," post-condition)."))),(0,l.kt)("p",null,"The function-like entities described on this page are ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/algo/niebloids"},(0,l.kt)("strong",{parentName:"a"},"niebloids")),"."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(a.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to process."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"r"),mdxType:"Symbol"},"The range of elements to process."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"pred"),mdxType:"Symbol"},"Predicate to apply to the projected elements."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"proj"),mdxType:"Symbol"},"Projection to apply to the elements.")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n  ret,\n  last\n}\n")),(0,l.kt)("p",null,"Where [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"ret"),") is the resulting subrange after removal, and the elements in subrange [",(0,l.kt)("inlineCode",{parentName:"p"},"ret"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") are all in valid but unspecified state."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Given ",(0,l.kt)("strong",{parentName:"p"},"N")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"ranges::distance(first, last)")),(0,l.kt)("p",null,"Exactly ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," applications of the projection and predicate, and ",(0,l.kt)("inlineCode",{parentName:"p"},"N - 1")," move operations at worst."),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"remove_if(1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct remove_if_fn\n{\n    template<std::permutable I, std::sentinel_for<I> S, class Proj = std::identity,\n             std::indirect_unary_predicate<std::projected<I, Proj>> Pred>\n    constexpr ranges::subrange<I>\n        operator()(I first, S last, Pred pred, Proj proj = {}) const\n    {\n        first = ranges::find_if(std::move(first), last, pred, proj);\n        if (first != last)\n        {\n            for (I i {std::next(first)}; i != last; ++i)\n            {\n                if (!std::invoke(pred, std::invoke(proj, *i)))\n                {\n                    *first = ranges::iter_move(i);\n                    ++first;\n                }\n            }\n        }\n        return {first, last};\n    }\n\n    template<ranges::forward_range R, class Proj = std::identity,\n             std::indirect_unary_predicate<\n                 std::projected<ranges::iterator_t<R>, Proj>> Pred>\n    requires std::permutable<ranges::iterator_t<R>>\n    constexpr ranges::borrowed_subrange_t<R>\n        operator()(R&& r, Pred pred, Proj proj = {}) const\n    {\n        return (*this)(ranges::begin(r), ranges::end(r), pred, std::move(proj));\n    }\n};\n\ninline constexpr remove_if_fn remove_if {};\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,"A call to ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"remove_if"))," is typically followed by a call to a container's erase member function, which erases the unspecified values and reduces the ",(0,l.kt)("em",{parentName:"p"},"physical size")," of the container to match its new ",(0,l.kt)("em",{parentName:"p"},"logical size"),".\nThese two invocations together constitute a so-called ",(0,l.kt)("a",{parentName:"p",href:"#"},"Erase\u2013remove idiom"),(0,l.kt)(v,{v:"cpp20",mdxType:"Since"},", which can be achieved by the free function std::erase that has overloads for all standard sequence containers, or std::erase_if that has overloads for all standard containers")),(0,l.kt)("p",null,"The similarly-named container member functions ",(0,l.kt)("a",{parentName:"p",href:"#"},"list::remove"),", ",(0,l.kt)("a",{parentName:"p",href:"#"},"list::remove_if"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/lists/forward-list/remove"},"forward_list::remove"),", and ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/lists/forward-list/remove"},"forward_list::remove_if")," erase the removed elements."),(0,l.kt)("p",null,"These algorithms cannot be used with associative containers such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/sets/set"},"std::set")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/std/containers/maps/map"},"std::map")," because their iterator types do not dereference to ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," types (the keys in these containers are not modifiable)."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(i.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <cctype>\n#include <iomanip>\n#include <iostream>\n#include <string>\n#include <string_view>\n\nint main()\n{\n    std::string v1 {"No - Diagnostic - Required"};\n    std::cout << std::quoted(v1) << " (v1, size: " << v1.size() << ")\\n";\n    const auto ret = std::ranges::remove(v1, \' \');\n    std::cout << std::quoted(v1) << " (v1 after `remove`, size: " << v1.size() << ")\\n";\n    std::cout << \' \' << std::string(std::distance(v1.begin(), ret.begin()), \'^\') << \'\\n\';\n    v1.erase(ret.begin(), ret.end());\n    std::cout << std::quoted(v1) << " (v1 after `erase`, size: " << v1.size() << ")\\n\\n";\n\n    // remove_if with custom unary predicate:\n    auto rm = [](char c) { return !std::isupper(c); };\n    std::string v2 {"Substitution Failure Is Not An Error"};\n    std::cout << std::quoted(v2) << " (v2, size: " << v2.size() << ")\\n";\n    const auto [first, last] = std::ranges::remove_if(v2, rm);\n    std::cout << std::quoted(v2) << " (v2 after `remove_if`, size: " << v2.size() << ")\\n";\n    std::cout << \' \' << std::string(std::distance(v2.begin(), first), \'^\') << \'\\n\';\n    v2.erase(first, last);\n    std::cout << std::quoted(v2) << " (v2 after `erase`, size: " << v2.size() << ")\\n\\n";\n\n    // creating a view into a container that is modified by `remove_if`:\n    for (std::string s : {"Small Object Optimization", "Non-Type Template Parameter"})\n        std::cout << std::quoted(s) << " => "\n                  << std::string_view {begin(s), std::ranges::remove_if(s, rm).begin()}\n                  << \'\\n\';\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},'"No _ Diagnostic _ Required" (v1, size: 26)\n"No_Diagnostic_Requiredired" (v1 after `remove_if`, size: 26)\n ^^^^^^^^^^^^^^^^^^^^^^\n"No_Diagnostic_Required" (v1 after `erase`, size: 22)\n\n"Substitution Failure Is Not An Error" (v2, size: 36)\n"SFINAEtution Failure Is Not An Error" (v2 after `remove_if_if`, size: 36)\n ^^^^^^\n"SFINAE" (v2 after `erase`, size: 6)\n\n"Small Object Optimization" => SOO\n"Non-Type Template Parameter" => NTTP\n')))))}k.isMDXComponent=!0}}]);