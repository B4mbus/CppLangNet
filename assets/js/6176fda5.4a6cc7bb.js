"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[15626],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={},a=void 0,s={unversionedId:"std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",id:"std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",title:"printing-vector-in-reverse",description:"",source:"@site/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse.mdx",sourceDirName:"std/algo/_codes/main-page/operations-with-iterators",slug:"/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse.mdx",tags:[],version:"current",frontMatter:{}},c={},p=[],l=(u="Columns",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n\n    // We obtain the reverse iterator here,\n    // we use  the `c` version because we don't intend to change the contents of the vector,\n    // we only want to print it\n    std::vector<int>::const_reverse_iterator begin = numbers.crbegin();\n    std::vector<int>::const_reverse_iterator end = numbers.crend();\n\n    // here we first check if begin is not equal to end, if it is, then we've traversed the entire container\n    // if it's not, we print the number\n    // then we increment the iterator\n    for(; begin != end; ++begin) {\n        // *begin means \"access the element the iterator points to\"\n        std::cout << *begin << ' ';\n    }\n}\n"))),(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"96 22 -5 1 2137 12 5\n")))))}m.isMDXComponent=!0}}]);