"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[73658],{3905:(n,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var e=r(67294);function a(n,t,r){return t in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n}function o(n,t){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.push.apply(r,e)}return r}function s(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(r,t))}))}return n}function c(n,t){if(null==n)return{};var r,e,a=function(n,t){if(null==n)return{};var r,e,a={},o=Object.keys(n);for(e=0;e<o.length;e++)r=o[e],t.indexOf(r)>=0||(a[r]=n[r]);return a}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(e=0;e<o.length;e++)r=o[e],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var i=e.createContext({}),p=function(n){var t=e.useContext(i),r=t;return n&&(r="function"==typeof n?n(t):s(s({},t),n)),r},l=function(n){var t=p(n.components);return e.createElement(i.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return e.createElement(e.Fragment,{},t)}},y=e.forwardRef((function(n,t){var r=n.components,a=n.mdxType,o=n.originalType,i=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),y=p(r),d=a,f=y["".concat(i,".").concat(d)]||y[d]||u[d]||o;return r?e.createElement(f,s(s({ref:t},l),{},{components:r})):e.createElement(f,s({ref:t},l))}));function d(n,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var o=r.length,s=new Array(o);s[0]=y;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=n,c.mdxType="string"==typeof n?n:a,s[1]=c;for(var p=2;p<o;p++)s[p]=r[p];return e.createElement.apply(null,s)}return e.createElement.apply(null,r)}y.displayName="MDXCreateElement"},40285:(n,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var e=r(87462),a=(r(67294),r(3905));const o={},s=void 0,c={unversionedId:"std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20",id:"std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/transform_inclusive_scan",slug:"/std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/transform_inclusive_scan/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},p=[],l={toc:p};function u(n){let{components:t,...r}=n;return(0,a.kt)("wrapper",(0,e.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt, class OutputIt, class BinaryOperation, class UnaryOperation >\nconstexpr OutputIt transform_inclusive_scan( InputIt first, InputIt last, OutputIt d_first, BinaryOperation binary_op,\n                                             UnaryOperation unary_op );\n\n// (2) (3)\ntemplate< class InputIt, class OutputIt, class BinaryOperation, class UnaryOperation, class T >\nconstexpr OutputIt transform_inclusive_scan( InputIt first, InputIt last, OutputIt d_first, BinaryOperation binary_op,\n                                             UnaryOperation unary_op, T init );\n\n// (3) (2)\ntemplate< class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryOperation, class UnaryOperation >\nForwardIt2 transform_inclusive_scan( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first,\n                                     BinaryOperation binary_op, UnaryOperation unary_op );\n\n// (4)\ntemplate<\n  class ExecutionPolicy,\n  class ForwardIt1,\n  class ForwardIt2,\n  class BinaryOperation,\n  class UnaryOperation,\n  class T\n>\nForwardIt2 transform_inclusive_scan( ExecutionPolicy&& policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first,\n                                     BinaryOperation binary_op, UnaryOperation unary_op, T init );\n")))}u.isMDXComponent=!0}}]);