"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[17631],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(h,r(r({ref:n},c),{},{components:t})):o.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(87462),a=(t(67294),t(3905)),i=t(22307);const r={title:"Booleans",description:"Lesson: booleans in C++",tags:["condition","if","else","else-if","compound","bool","boolean"],hide_title:!0},l="Booleans",s={unversionedId:"course/basics/conditions/booleans",id:"course/basics/conditions/booleans",title:"Booleans",description:"Lesson: booleans in C++",source:"@site/content/learn/course/basics/conditions/booleans.mdx",sourceDirName:"course/basics/conditions",slug:"/course/basics/conditions/booleans",permalink:"/CppLangNet/learn/course/basics/conditions/booleans",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/conditions/booleans.mdx",tags:[{label:"condition",permalink:"/CppLangNet/learn/tags/condition"},{label:"if",permalink:"/CppLangNet/learn/tags/if"},{label:"else",permalink:"/CppLangNet/learn/tags/else"},{label:"else-if",permalink:"/CppLangNet/learn/tags/else-if"},{label:"compound",permalink:"/CppLangNet/learn/tags/compound"},{label:"bool",permalink:"/CppLangNet/learn/tags/bool"},{label:"boolean",permalink:"/CppLangNet/learn/tags/boolean"}],version:"current",frontMatter:{title:"Booleans",description:"Lesson: booleans in C++",tags:["condition","if","else","else-if","compound","bool","boolean"],hide_title:!0},sidebar:"defaultSidebar",previous:{title:"Compound Conditions",permalink:"/CppLangNet/learn/course/basics/conditions/compound"},next:{title:"Conditions \xbb Tips and style",permalink:"/CppLangNet/learn/course/basics/conditions/tips"}},p={},c=[{value:"The <code>bool</code> type",id:"the-bool-type",level:2},{value:"Input/Output with <code>bool</code>",id:"inputoutput-with-bool",level:2},{value:"<code>int</code>\u2194<code>bool</code> conversions",id:"intbool-conversions",level:2},{value:"Unintended Conversions",id:"unintended-conversions",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"booleans"},"Booleans"),(0,a.kt)("h2",{id:"the-bool-type"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"bool")," type"),(0,a.kt)("p",null,"If you recall from the ",(0,a.kt)("a",{parentName:"p",href:"/learn/course/basics/variables/#variable-type"},"Variables lesson"),",\none of basic types listed was ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),". This type represents a ",(0,a.kt)("strong",{parentName:"p"},"boolean"),", which is a\nsingle true/false value."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/learn/course/basics/conditions/intro/#boolean-expressions"},"Boolean Expressions"),"\nwe learned about early in this Conditions lesson create a boolean value when evaluated.\nSo, we can make variables that are the results of such boolean expressions, and then\nfurther use these ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," variables in the conditions of if statements."),(0,a.kt)("p",null,"C++ provides two built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," constants - ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". You can use these wherever\na ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," or boolean expression is expected. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Boolean literals"',title:'"\ud83d\udd39',Boolean:!0,'literals"':!0},"bool var1 = true;\nbool var2 = false;\n")),(0,a.kt)("p",null,"There are more interesting things we can do with ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," variables, too.\nAny boolean expression is valid to assign here. Combining this with\nif statements can make for shorter and more readable code in some cases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Using boolean variables to determine the weather"',title:'"\ud83d\udd39',Using:!0,boolean:!0,variables:!0,to:!0,determine:!0,the:!0,'weather"':!0},'std::string name;\n\nstd::cout << "Enter your first name: ";\nstd::cin >> name;\n\n// User is lucky if their name has more than 5 characters\n// highlight-next-line\nbool isLucky = name.size() > 5; \n\n// Try changing these values yourself and see what happens!\n// highlight-start\nbool isTuesday = true;\nbool isCloudy = false;\n// highlight-end\n\nstd::string weather = "sunny";\n\nif (not isTuesday and isCloudy) {\n    weather = "raining";\n} else if (isTuesday) {\n    if (isCloudy) {\n        weather = "overcast";\n    } else if (not isLucky) {\n        weather = "downpouring";\n    }\n}\n\nstd::cout << "It is currently " << weather << " in your location!";\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/learn/course/basics/conditions/intro/#compound-boolean-expressions"},"logical operators")," previously introduced\ncan also be used to create new boolean variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Using logical operators on bools"',title:'"\ud83d\udd39',Using:!0,logical:!0,operators:!0,on:!0,'bools"':!0},'bool isPrecipitating = weather == "raining" or weather == "downpouring";\nbool isRainbowMade   = isPrecipitating and not isCloudy;\nbool isBoringDay     = not isRainbowMade;\n')),(0,a.kt)("h2",{id:"inputoutput-with-bool"},"Input/Output with ",(0,a.kt)("inlineCode",{parentName:"h2"},"bool")),(0,a.kt)("p",null,"If you did any self-driven exploration with this new ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," type, you may have noticed a peculiar thing...\nPrinting out a ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," does not display a ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," in the terminal. Instead, it prints out a ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),".\nThis is simply a default behavior in C++ that is related to the ",(0,a.kt)("a",{parentName:"p",href:"#intbool-conversions"},"next section"),"."),(0,a.kt)("p",null,"You can easily change this behavior by changing one of ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cout"),'\'s settings.\nSimply "print" out the ',(0,a.kt)("inlineCode",{parentName:"p"},"std::boolalhpa")," built-in constant, and it will make all future boolean operations on ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cout"),"\nprint out ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"false")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("admonition",{title:"Header include",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Make sure you ",(0,a.kt)("inlineCode",{parentName:"p"},"#include <iomanip>")," to use ",(0,a.kt)("inlineCode",{parentName:"p"},"std::boolalpha"),".")),(0,a.kt)(i.Z,{columns:["2fr","1fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Printing true/false"',title:'"\ud83d\udd39',Printing:!0,'true/false"':!0},'std::cout << true << " " << false << "\\n";\n// highlight-next-line\nstd::cout << std::boolalpha;\nstd::cout << true << " " << false << "\\n";\n'))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"1 0\ntrue false\n")))),(0,a.kt)("p",null,"Conversely, ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cin")," by default will only accept a ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," when inputting into a ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),' variable.\nThis behavior can also be changed by "inputting" into the ',(0,a.kt)("inlineCode",{parentName:"p"},"std::boolalpha")," flag.\nIn the example below, the user will first input ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", which represents ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nThen, they will input ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," once the ",(0,a.kt)("inlineCode",{parentName:"p"},"std::boolalpha")," setting was applied."),(0,a.kt)(i.Z,{columns:["2fr","1fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Inputting true/false"',title:'"\ud83d\udd39',Inputting:!0,'true/false"':!0},'bool var;\n\nstd::cout << "Integral form: ";\nstd::cin >> var;\n\n// highlight-next-line\nstd::cin >> std::boolalpha;\n\nstd::cout << "Alphanumeric form: ";\nstd::cin >> var;\n'))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Input/Output"',title:'"Input/Output"'},"Integral form: 1\nAlphanumeric form: true\n")))),(0,a.kt)("p",null,"As an exercise, try modifying the ",(0,a.kt)("a",{parentName:"p",href:"#the-bool-type"},"weather example")," from above to accept user input, using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"std::boolalpha")," modifier you just learned."),(0,a.kt)("admonition",{title:"Fun Fact",type:"note"},(0,a.kt)("p",{parentName:"admonition"},'The name "boolalpha" comes from a portmanteau of boolean and alphanumeric.')),(0,a.kt)("h2",{id:"intbool-conversions"},(0,a.kt)("inlineCode",{parentName:"h2"},"int"),"\u2194",(0,a.kt)("inlineCode",{parentName:"h2"},"bool")," conversions"),(0,a.kt)("p",null,"C++ has another rather annoying behavior where booleans and integers can implicitly convert between each other.\nA boolean value of ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," is equivalent to an integer value of ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),".\nConversely, an integral value of ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," is equivalent to a boolean value of ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),",\nand any non-zero integer is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 A sampling of int\u2194bool conversions"',title:'"\ud83d\udd39',A:!0,sampling:!0,of:!0,"int\u2194bool":!0,'conversions"':!0},"int x = true; // x is 1\nint y = false; // y is 0\n\nbool a = 1; // a is true\nbool b = 25; // b is true\nbool c = -194; // c is true\nbool d = 0; // d is false\n")),(0,a.kt)("p",null,"While this behavior may seem neat, it can unexpectedly crop up in many places where they are not wanted.\nFor this reason, if you want to intentionally trigger an ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),"\u2194",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," conversion, then you should ",(0,a.kt)("em",{parentName:"p"},"cast"),"\nthe value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Performing a cast"',title:'"\ud83d\udd39',Performing:!0,a:!0,'cast"':!0},"int x = static_cast<int>(true); // Modern-style cast\nint y = (int) false;            // C-style cast\n\nbool a = static_cast<bool>(1);\nbool b = (bool) 0;\n")),(0,a.kt)("p",null,'There are two primary ways to perform a cast like this in C++ - a "static cast" and a "c-style cast".\nYou will learn the differences between these in the Intermediate course. For now just know that,\nin the case of ',(0,a.kt)("inlineCode",{parentName:"p"},"int"),"\u2194",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," conversions, both of the options are equivalent.\nHowever, the ",(0,a.kt)("inlineCode",{parentName:"p"},"static_cast")," method is generally preferred for Modern C++."),(0,a.kt)("h3",{id:"unintended-conversions"},"Unintended Conversions"),(0,a.kt)("p",null,"These conversions can cause issues where you least expect them to. One example is in the\n",(0,a.kt)("a",{parentName:"p",href:"/learn/course/basics/conditions/intro/#compound-boolean-expressions"},"compound boolean expressions"),"\nyou learned about earlier.\nNormally, if you want to combine multiple boolean expressions together, you use the logical operators like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"if (x > 10 && x < 25) { ... }\n")),(0,a.kt)("p",null,"You may be tempted to rewrite the condition as ",(0,a.kt)("code",null,"10 ","<"," x ","<"," 25"),".\n",(0,a.kt)("strong",{parentName:"p"},"This will result in incorrect behavior"),", as this expression will always evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nThis is because there is secretly an implicit ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),"\ud83e\udc62",(0,a.kt)("inlineCode",{parentName:"p"},"int")," conversion occurring.\nThis expression gets interpreted as ",(0,a.kt)("code",null,"(10 ","<"," x) ","<"," 25"),".\nLet's see how this causes this condition to always evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by using\nthe ",(0,a.kt)("a",{parentName:"p",href:"/learn/course/basics/conditions/intro/#order-of-operations"},"operator precedence table"),":"),(0,a.kt)(i.Z,{columns:["1fr","1fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Incorrect operator chaining with x = 15"',title:'"\ud83d\udd39',Incorrect:!0,operator:!0,chaining:!0,with:!0,x:!0,"":"",'15"':!0},"10 < x < 25    // Initial expression\n10 < 15 < 25   // Substitute x\n(10 < 15) < 25 // Operator precedence\n(true) < 25    // Evaluate subexpression\n1 < 25         // bool\ud83e\udc62int conversion\ntrue           // Evaluate subexpression\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Incorrect operator chaining with x = 7"',title:'"\ud83d\udd39',Incorrect:!0,operator:!0,chaining:!0,with:!0,x:!0,"":"",'7"':!0},"10 < x < 25   // Initial expression\n10 < 7 < 25   // Substitute x\n(10 < 7) < 25 // Operator precedence\n(false) < 25  // Evaluate subexpression\n0 < 25        // bool\ud83e\udc62int conversion\ntrue          // Evaluate subexpression\n")))),(0,a.kt)("p",null,"This same issue can occur in other similar scenarios, as well.\nFor example, when checking if a single variable is one of many possibilities,\nthe correct way would be ",(0,a.kt)("inlineCode",{parentName:"p"},"x == 5 || x == 10 || x == 15"),".\nThe tempting option of ",(0,a.kt)("inlineCode",{parentName:"p"},"x == 5 || 10 || 15")," ",(0,a.kt)("strong",{parentName:"p"},"will not work")," for a similar reason to the above.\nIt will always be true. Let's see why:"),(0,a.kt)(i.Z,{columns:["1fr","1fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Incorrect operator chaining with x = 5"',title:'"\ud83d\udd39',Incorrect:!0,operator:!0,chaining:!0,with:!0,x:!0,"":"",'5"':!0},"x == 5 || 10 || 15     // Initial expression\n5 == 5 || 10 || 15     // Substitute x\n((5 == 5) || 10) || 15 // Operator precedence\n((true) || 10) || 15   // Evaluate subexpression\n(true || true) || 15   // int\ud83e\udc62bool conversion\ntrue || 15             // Evaluate subexpression\ntrue || true           // int\ud83e\udc62bool conversion\ntrue                   // Evaluate subexpression\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Incorrect operator chaining with x = 7"',title:'"\ud83d\udd39',Incorrect:!0,operator:!0,chaining:!0,with:!0,x:!0,"":"",'7"':!0},"x == 5 || 10 || 15     // Initial expression\n7 == 5 || 10 || 15     // Substitute x\n((7 == 5) || 10) || 15 // Operator precedence\n((false) || 10) || 15  // Evaluate subexpression\n(false || true) || 15  // int\ud83e\udc62bool conversion\ntrue || 15             // Evaluate subexpression\ntrue || true           // int\ud83e\udc62bool conversion\ntrue                   // Evaluate subexpression\n")))),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"In summary, we learned about:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"How to break down conditional cases in our code into ",(0,a.kt)("a",{parentName:"li",href:"/learn/course/basics/conditions/intro/#conditional-statements"},"if statements")),(0,a.kt)("li",{parentName:"ul"},"How to form a logical expression out of ",(0,a.kt)("a",{parentName:"li",href:"/learn/course/basics/conditions/intro/#boolean-expressions"},"boolean operations")),(0,a.kt)("li",{parentName:"ul"},"How to ",(0,a.kt)("a",{parentName:"li",href:"/learn/course/basics/conditions/compound/#compound-conditional-statements"},"combine multiple conditions")," into a mutually exclusive group"),(0,a.kt)("li",{parentName:"ul"},"How to ",(0,a.kt)("a",{parentName:"li",href:"/learn/course/basics/conditions/compound/#nesting-conditional-statements"},"nest if statements")," inside of each other"),(0,a.kt)("li",{parentName:"ul"},"How to reduce reptition by applying the ",(0,a.kt)("a",{parentName:"li",href:"/learn/course/basics/conditions/compound/#using-variables-to-reduce-repetition"},"DRY Principle")),(0,a.kt)("li",{parentName:"ul"},"How to use ",(0,a.kt)("a",{parentName:"li",href:"#the-bool-type"},"boolean variables")," to improve our code")),(0,a.kt)("p",null,"This was a long journey, but the skills you have picked up here in this lesson are very fundamental\nto the road ahead. Read over the concepts presented in this lesson multiple times, as the basics\nof logic and conditions are a very important skill to have."))}d.isMDXComponent=!0},22307:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(87462),a=t(67294);const i="columns_Terr";function r(e){const n=e.style||{};n.gap=e.spacing||20,e.columns?n.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):n.gridTemplateColumns="repeat(2, 1fr)";const t={...e};return delete t.columns,delete t.spacing,delete t.breakAt,a.createElement("div",(0,o.Z)({className:i,"data-break-at":e.breakAt??"md"},t,{style:n}),e.children)}r.isMDXComponent=!0}}]);