"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[6163,34437,73441,72674,15626,37435],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=l(t),y=i,u=p["".concat(s,".").concat(y)]||p[y]||c[y]||r;return t?a.createElement(u,o(o({ref:n},d),{},{components:t})):a.createElement(u,o({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m.mdxType="string"==typeof e?e:i,o[1]=m;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(67294),i=t(86010);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>N});var a=t(87462),i=t(67294),r=t(86010),o=t(12466),m=t(76775),s=t(91980),l=t(67392),d=t(50012);function c(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function y(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const a=(0,m.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[o,m]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!y({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,l]=u({queryString:t,groupId:a}),[c,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),k=(()=>{const e=s??c;return y({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{k&&m(k)}),[k]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!y({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);m(e),l(e),g(e)}),[l,g,r]),tabValues:r}}var k=t(72389);const f="tabList__CuJ",h="tabItem_LNqP";function b(e){let{className:n,block:t,selectedValue:m,selectValue:s,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),p=e=>{const n=e.currentTarget,t=d.indexOf(n),a=l[t].value;a!==m&&(c(n),s(a))},y=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:m===n?0:-1,"aria-selected":m===n,key:n,ref:e=>d.push(e),onKeyDown:y,onClick:p},o,{className:(0,r.Z)("tabs__item",h,o?.className,{"tabs__item--active":m===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function x(e){const n=g(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",f)},i.createElement(b,(0,a.Z)({},e,n)),i.createElement(v,(0,a.Z)({},e,n)))}function N(e){const n=(0,k.Z)();return i.createElement(x,(0,a.Z)({key:String(n)},e))}},98839:(e,n,t)=>{t.d(n,{z:()=>a});const a=t(67294).createContext({name:"Unknown",folder:"unknown"})},99801:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(67294),i=t(74866),r=t(85162),o=t(99372),m=t(72412);const s={};function l(e){const n=e.content||{};return a.createElement(i.Z,null,Object.entries(n).map(((e,n)=>{let[t,l]=e;return l.value||l.simplified||l.detailed?a.createElement(r.Z,{value:t,label:o.gJ.get(t),default:l.default||0==n},l.simplified?a.createElement(a.Fragment,null,a.createElement(i.Z,{groupId:"view_mode",className:s.smallTabs},a.createElement(r.Z,{value:"simplified",label:"Simplified",default:!0},(0,m.Z)(l.simplified)),a.createElement(r.Z,{value:"detailed",label:"Detailed"},(0,m.Z)(l.detailed)))):l.value):a.createElement(r.Z,{value:t,label:o.gJ.get(t),default:0==n},(0,m.Z)(l))})))}},55059:(e,n,t)=>{t.d(n,{mN:()=>d,ZP:()=>l});var a=t(67294),i=t(72412);const r={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=t(98839);const m={None:{Order:0,ShortName:"",FullName:"",Style:r.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:r.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:r.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:r.accessPrivate}},s=e=>e.none?m.None:e.pub||e.public?m.Public:e.prot||e.protected?m.Protected:e.priv||e.private?m.Private:m.Public;function l(e){return(n=>{if(0===n.length)return null;const t=n.sort(((e,n)=>s(e).Order<s(n).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:r.symbolTable},a.createElement("tbody",null,t))})(a.Children.toArray(e.children))}function d(e){a.useContext(o.z);let n=(0,i.Z)(e.name),t=null;e.desc?t=e.desc:e.children&&(t=e.children);const m=e.linkName||e.autoLink;!e.noLink&&m&&(n=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},n));const l=(e,n,t)=>!0===e?a.createElement("span",{className:r[n]},t):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:r.symbolProp},(e=>{const n=s(e);return a.createElement("span",{className:n.Style},n.ShortName)})(e),l(e.static,"modStatic","static"),l(e.constexpr,"modConstexpr","constexpr"),l(e.const,"modConst","const"),l(e.volatile,"modVolatile","volatile"),l(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:r.symbolName},n),a.createElement("td",{className:r.symbolDesc},(0,i.Z)(t)))}d.isMDXComponent=!0,l.isMDXComponent=!0,l.Symbol=d},99372:(e,n,t)=>{t.d(n,{gJ:()=>d,eH:()=>u,U6:()=>p,OS:()=>y});var a=t(67294),i=t(95999);const r="markedText_c6kK",o="since_c1Q3",m="until_jXK6",s="removed_A_Kf",l="versionNumber_BiUX",d=new Map;function c(e){let{children:n,className:t}=e;return a.createElement("span",{className:r+(t?" "+t:"")},n)}function p(e){let{children:n,v:t}=e;return a.createElement(c,{className:o},n,"\xa0",a.createElement("span",{className:l},a.createElement("small",null,"(",d.get(`since-${t}`),")")))}function y(e){let{children:n,v:t}=e;return a.createElement(c,{className:m},n,"\xa0",a.createElement("span",{className:l},a.createElement("small",null,"(",d.get(`until-${t}`),")")))}function u(e){let{children:n,v:t}=e;return a.createElement(c,{className:s},n,"\xa0",a.createElement("span",{className:l},a.createElement("small",null,"(",d.get(`removed-${t}`),")")))}d.set("cpp98","C++98"),d.set("cpp03","C++03"),d.set("cpp11","C++11"),d.set("cpp14","C++14"),d.set("cpp17","C++17"),d.set("cpp20","C++20"),d.set("cpp23","C++23"),d.set("deprecated-",a.createElement(i.Z,null,"deprecated")),d.set("deprecated-cpp98",a.createElement(i.Z,null,"deprecated in C++98")),d.set("deprecated-cpp03",a.createElement(i.Z,null,"deprecated in C++03")),d.set("deprecated-cpp11",a.createElement(i.Z,null,"deprecated in C++11")),d.set("deprecated-cpp14",a.createElement(i.Z,null,"deprecated in C++14")),d.set("deprecated-cpp17",a.createElement(i.Z,null,"deprecated in C++17")),d.set("deprecated-cpp20",a.createElement(i.Z,null,"deprecated in C++20")),d.set("deprecated-cpp23",a.createElement(i.Z,null,"deprecated in C++23")),d.set("until-cpp98",a.createElement(i.Z,null,"until C++98")),d.set("until-cpp03",a.createElement(i.Z,null,"until C++03")),d.set("until-cpp11",a.createElement(i.Z,null,"until C++11")),d.set("until-cpp14",a.createElement(i.Z,null,"until C++14")),d.set("until-cpp17",a.createElement(i.Z,null,"until C++17")),d.set("until-cpp20",a.createElement(i.Z,null,"until C++20")),d.set("until-cpp23",a.createElement(i.Z,null,"until C++23")),d.set("since-cpp98",a.createElement(i.Z,null,"since C++98")),d.set("since-cpp03",a.createElement(i.Z,null,"since C++03")),d.set("since-cpp11",a.createElement(i.Z,null,"since C++11")),d.set("since-cpp14",a.createElement(i.Z,null,"since C++14")),d.set("since-cpp17",a.createElement(i.Z,null,"since C++17")),d.set("since-cpp20",a.createElement(i.Z,null,"since C++20")),d.set("since-cpp23",a.createElement(i.Z,null,"since C++23")),d.set("removed-",a.createElement(i.Z,null,"deleted")),d.set("removed-cpp98",a.createElement(i.Z,null,"removed in C++98")),d.set("removed-cpp03",a.createElement(i.Z,null,"removed in C++03")),d.set("removed-cpp11",a.createElement(i.Z,null,"removed in C++11")),d.set("removed-cpp14",a.createElement(i.Z,null,"removed in C++14")),d.set("removed-cpp17",a.createElement(i.Z,null,"removed in C++17")),d.set("removed-cpp20",a.createElement(i.Z,null,"removed in C++20")),d.set("removed-cpp23",a.createElement(i.Z,null,"removed in C++23"))},72412:(e,n,t)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}t.d(n,{Z:()=>a})},13027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={},o=void 0,m={unversionedId:"std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",id:"std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",title:"printing-vector-in-reverse",description:"",source:"@site/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse.mdx",sourceDirName:"std/algo/_codes/main-page/operations-with-iterators",slug:"/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector-in-reverse.mdx",tags:[],version:"current",frontMatter:{}},s={},l=[],d=(c="Columns",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n\n    // We obtain the reverse iterator here,\n    // we use  the `c` version because we don't intend to change the contents of the vector,\n    // we only want to print it\n    std::vector<int>::const_reverse_iterator begin = numbers.crbegin();\n    std::vector<int>::const_reverse_iterator end = numbers.crend();\n\n    // here we first check if begin is not equal to end, if it is, then we've traversed the entire container\n    // if it's not, we print the number\n    // then we increment the iterator\n    for(; begin != end; ++begin) {\n        // *begin means \"access the element the iterator points to\"\n        std::cout << *begin << ' ';\n    }\n}\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"96 22 -5 1 2137 12 5\n")))))}y.isMDXComponent=!0},59421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={},o=void 0,m={unversionedId:"std/algo/_codes/main-page/operations-with-iterators/printing-vector",id:"std/algo/_codes/main-page/operations-with-iterators/printing-vector",title:"printing-vector",description:"",source:"@site/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector.mdx",sourceDirName:"std/algo/_codes/main-page/operations-with-iterators",slug:"/std/algo/_codes/main-page/operations-with-iterators/printing-vector",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/operations-with-iterators/printing-vector.mdx",tags:[],version:"current",frontMatter:{}},s={},l=[],d=(c="Columns",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n\n    // We obtain the iterator here,\n    // we use  the `c` version because we don't intend to change the contents of the vector,\n    // we only want to print it\n    std::vector<int>::const_iterator begin = numbers.cbegin();\n    std::vector<int>::const_iterator end = numbers.cend();\n\n    // here we first check if begin is not equal to end, if it is, then we've traversed the entire container\n    // if it's not, we print the number\n    // then we increment the iterator\n    for(; begin != end; ++begin) {\n        // *begin means \"access the element the iterator points to\"\n        std::cout << *begin << ' ';\n    }\n}\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"5 12 2137 1 -5 22 96\n")))))}y.isMDXComponent=!0},22072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={},o=void 0,m={unversionedId:"std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0",id:"std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0",title:"setting-all-numbers-to-0",description:"",source:"@site/content/docs/std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0.mdx",sourceDirName:"std/algo/_codes/main-page/operations-with-iterators",slug:"/std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/operations-with-iterators/setting-all-numbers-to-0.mdx",tags:[],version:"current",frontMatter:{}},s={},l=[],d=(c="Columns",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n\n    // We obtain the iterator here,\n    // we use the ordinary version because we do intend to change the contents of the vector,\n    std::vector<int>::iterator begin = numbers.begin();\n    std::vector<int>::iterator end = numbers.end();\n\n    // here we first check if begin is not equal to end, if it is, then we've traversed the entire container\n    // if it's not, we print the number\n    // then we increment the iterator\n    for(; begin != end; ++begin) {\n        // *begin means \"access the element the iterator points to\"\n        *begin = 0;\n    }\n\n    // Let's print out the container and see the result:\n\n    // NOTE: we have to reassign the value to begin because we've changed it while iterating over it\n    begin = numbers.begin();\n    for(; begin != end; ++begin) {\n        // *begin means \"access the element the iterator points to\"\n        *begin = 0;\n    }\n}\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"0 0 0 0 0 0 0\n")))))}y.isMDXComponent=!0},63904:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={},o=void 0,m={unversionedId:"std/algo/_codes/main-page/sorting/ordinary",id:"std/algo/_codes/main-page/sorting/ordinary",title:"ordinary",description:"",source:"@site/content/docs/std/algo/_codes/main-page/sorting/ordinary.mdx",sourceDirName:"std/algo/_codes/main-page/sorting",slug:"/std/algo/_codes/main-page/sorting/ordinary",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/sorting/ordinary",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/sorting/ordinary.mdx",tags:[],version:"current",frontMatter:{}},s={},l=[],d=(c="Columns",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n    std::sort(numbers.begin(), numbers.end());\n\n    for(int number : numbers) {\n        std::cout << number << ' ';\n    }\n}\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"-5 1 5 12 22 96 2137\n")))))}y.isMDXComponent=!0},27728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const r={},o=void 0,m={unversionedId:"std/algo/_codes/main-page/sorting/rangified",id:"std/algo/_codes/main-page/sorting/rangified",title:"rangified",description:"",source:"@site/content/docs/std/algo/_codes/main-page/sorting/rangified.mdx",sourceDirName:"std/algo/_codes/main-page/sorting",slug:"/std/algo/_codes/main-page/sorting/rangified",permalink:"/CppLangNet/docs/std/algo/_codes/main-page/sorting/rangified",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/_codes/main-page/sorting/rangified.mdx",tags:[],version:"current",frontMatter:{}},s={},l=[],d=(c="Columns",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:l};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{spacing:"20px",columns:["8fr","4fr"],mdxType:"Columns"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="main.cpp" showLineNumbers',title:'"main.cpp"',showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = { 5, 12, 2137, 1, -5, 22, 96 };\n    std::ranges::sort(numbers);\n\n    for(int number : numbers) {\n        std::cout << number << ' ';\n    }\n}\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result (console)"',title:'"Result','(console)"':!0},"-5 1 5 12 22 96 2137\n")))))}y.isMDXComponent=!0},90302:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>u,default:()=>b,frontMatter:()=>y,metadata:()=>g,toc:()=>f});var a=t(87462),i=(t(67294),t(3905)),r=t(99801),o=t(55059),m=t(99372),s=t(27728),l=t(63904),d=t(59421),c=t(13027),p=t(22072);const y={sidebar_position:1,title:"Summary",slug:"/std/algo/"},u=void 0,g={unversionedId:"std/algo/index",id:"std/algo/index",title:"Summary",description:"The C++ algorithm library is a collection of functions that are designed to make it easier to write correct,",source:"@site/content/docs/std/algo/index.mdx",sourceDirName:"std/algo",slug:"/std/algo/",permalink:"/CppLangNet/docs/std/algo/",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Summary",slug:"/std/algo/"},sidebar:"defaultSidebar",previous:{title:"The standard library",permalink:"/CppLangNet/docs/std/"},next:{title:"ranges::find(  )",permalink:"/CppLangNet/docs/std/algo/ranges/find"}},k={},f=[{value:"Searching",id:"searching",level:2},{value:"Determining conditions",id:"determining-conditions",level:2},{value:"Other non-modifying",id:"other-non-modifying",level:2},{value:"Random operations",id:"random-operations",level:2},{value:"Modifying",id:"modifying",level:2},{value:"Partitioning",id:"partitioning",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Binary search (on sorted ranges)",id:"binary-search-on-sorted-ranges",level:2},{value:"Set (on sorted ranges)",id:"set-on-sorted-ranges",level:2},{value:"Other operations on sorted ranges",id:"other-operations-on-sorted-ranges",level:2},{value:"Heap",id:"heap",level:2},{value:"Min/max",id:"minmax",level:2},{value:"Comparison",id:"comparison",level:2},{value:"Permutation",id:"permutation",level:2},{value:"Numeric",id:"numeric",level:2},{value:"Operations on uninitialized memory",id:"operations-on-uninitialized-memory",level:2},{value:"C algorithms",id:"c-algorithms",level:2}],h={toc:f};function b(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"algorithms"},"Algorithms"),(0,i.kt)("p",null,"The C++ algorithm library is a collection of functions that are designed to make it easier to write ",(0,i.kt)("strong",{parentName:"p"},"correct"),",\n",(0,i.kt)("strong",{parentName:"p"},"efficient"),", ",(0,i.kt)("strong",{parentName:"p"},"expressive")," and ",(0,i.kt)("strong",{parentName:"p"},"reusable")," code."),(0,i.kt)("p",null,"It provides a set of common, highly optimized algorithms that can be used to perform a variety of tasks,\nsuch as searching for an item in a list, sorting a collection of data, or manipulating the contents of a container."),(0,i.kt)("p",null,"One of the main benefits of using the algorithm library is that it allows you to write code that is easier to understand and less error prone.\nAll the algorithms have ",(0,i.kt)("strong",{parentName:"p"},"almost universally recognized names")," which helps understanding what certain parts of code using them do without having to do a lot of digging.\nBecause the algorithms from the standard library have been thoroughly ",(0,i.kt)("strong",{parentName:"p"},"tested")," and ",(0,i.kt)("strong",{parentName:"p"},"optimized"),", you can rely on them to work correctly and efficiently.\nThis can save you time and effort when developing software and it can help to reduce the risk of introducing bugs into your code."),(0,i.kt)("p",null,"Another benefit of the algorithm library is that it promotes ",(0,i.kt)("strong",{parentName:"p"},"code reuse"),".\nBy using the algorithms provided by the library, you can avoid having to reimplement common operations, which can save time and make it easier to maintain your code."),(0,i.kt)("p",null,"Overall, the C++ algorithm library is an important tool for C++ programmers that makes it easier to write ",(0,i.kt)("strong",{parentName:"p"},"reliable"),", ",(0,i.kt)("strong",{parentName:"p"},"efficient"),", and ",(0,i.kt)("strong",{parentName:"p"},"reusable")," code."),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To use the algorithms you have to include the ",(0,i.kt)("inlineCode",{parentName:"p"},"<algorithm>")," header, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n")),(0,i.kt)("p",null,"Then you can use them in code:"),(0,i.kt)(r.Z,{content:{"Rangified version":(0,i.kt)(s.default,{mdxType:"Sorting_Example_Rangified"}),"Ordinary version":(0,i.kt)(l.default,{mdxType:"Sorting_Example_Ordinary"})},mdxType:"SwitchView"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Rangified vs ordinary version"),(0,i.kt)("div",null,(0,i.kt)("p",null,"As you can see in the example above, there are two versions of algorithms. The ",(0,i.kt)("strong",{parentName:"p"},"rangified")," one and the ",(0,i.kt)("strong",{parentName:"p"},"ordinary")," one.\nThe rangified version came to C++ with the ",(0,i.kt)("strong",{parentName:"p"},"C++20")," standard. If you have a new enough compiler, you should be able to use it."),(0,i.kt)("p",null,"The basic difference between the two is that the ordinary version only accepts iterators,\nwhile the rangified version is more convenient and allows one to pass the whole range and enables the use of ",(0,i.kt)("a",{parentName:"p",href:"#"},"projections"),"."),(0,i.kt)("p",null,"The rangified version is also ",(0,i.kt)("strong",{parentName:"p"},"less error-prone"),", as you can't pass invalid iterators by mistake (it also handles a few advanced things better than the ordinary version)."),(0,i.kt)("p",null,"All that being said, using the rangified version is more beneficial and convenient, so if you have a possibility of choosing so, prefer the rangified version."))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Ranges and iterators"),(0,i.kt)("div",null,(0,i.kt)("h1",{id:"iterators"},"Iterators"),(0,i.kt)("p",null,"Iteration is the action of repeating a process, in case of containers, ",(0,i.kt)("strong",{parentName:"p"},"iteration")," means traversing the container in a particular order while obtaining each of it's elements."),(0,i.kt)("p",null,"Iterators are special objects with ",(0,i.kt)("a",{parentName:"p",href:"#"},"pointer")," semantics (having semantics of something basically means acting like something,\npointer semantics mean that the iterator objects act like pointers in most ways, they can be dereferenced, incremented, etc.. ",(0,i.kt)("strong",{parentName:"p"},"Pointers are also valid iterators"),"),\nthat are used to iterate over containers (like strings, arrays, maps, sets, etc.)."),(0,i.kt)("p",null,"They are obtained via the ",(0,i.kt)("inlineCode",{parentName:"p"},"begin()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"end()")," functions, and their variants:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cbegin()"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"cend()")," - return a ",(0,i.kt)("strong",{parentName:"li"},"const iterator")," to a container (you cannot change the contents via it)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rbegin()"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"rend()")," - return a ",(0,i.kt)("strong",{parentName:"li"},"reverse iterator")," to a container (iteration in reverse order)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"crbegin()"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"crend()")," - return a ",(0,i.kt)("strong",{parentName:"li"},"const reverse iterator")," to a container (iteration in reverse order and you cannot change the contents via it)")),(0,i.kt)("p",null,"Not every container has all the variations, for example ",(0,i.kt)("a",{parentName:"p",href:"/docs/std/containers/sets/unordered-set"},"std::unordered_set")," doesn't have the ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cr")," versions."),(0,i.kt)("p",null,"Different iterators have different types and they work a little bit differently, but the most basic things you can do with an iterator is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"increment it (",(0,i.kt)("inlineCode",{parentName:"li"},"it++")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"++it"),"), which traverses onto the next object in a container"),(0,i.kt)("li",{parentName:"ul"},"dereference it (",(0,i.kt)("inlineCode",{parentName:"li"},"*it"),"), which returns the value that the iterator points to")),(0,i.kt)("p",null," Here are a few examples of using iterators with ",(0,i.kt)("a",{parentName:"p",href:"/docs/std/containers/arrays/vector"},"std::vector"),":"),(0,i.kt)(r.Z,{content:{"Printing vector":(0,i.kt)(d.default,{mdxType:"Iterator_Example_Printing"}),"Printing vector in reverse":(0,i.kt)(c.default,{mdxType:"Iterator_Example_Printing_Reverse"}),"Zeroing vector":(0,i.kt)(p.default,{mdxType:"Iterator_Example_Zeroing"})},mdxType:"SwitchView"}),(0,i.kt)("p",null,"Now, notice how we had to manually specify the type (",(0,i.kt)("inlineCode",{parentName:"p"},"std::vector<int>::iterator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"std::vector<int>::reverse_iterator"),", etc.) every time. It is not very convenient. For that purpose you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"auto")," placeholder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"auto begin = numbers.begin();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"auto begin = numbers.rbegin();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"auto begin = numbers.crbegin();\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"auto")," deduces the type for us and it has no performance penalty. The code is easier to read that way, so if you can, prefer it. Read more about it here: ",(0,i.kt)("a",{parentName:"p",href:"#"},"auto"),"."),(0,i.kt)("h1",{id:"ranges"},"Ranges"),(0,i.kt)("p",null,"Now what exactly is a range? The exact definition and inner workings in C++ are a little bit complicated, but a range can be defined as anything that we can iterate over. An array, vector, string, map, etc.."),(0,i.kt)("p",null,"All rangified algorithms accept a range. The same way iterators can be different types and have slightly different behaviours, some ranges also differ from others and cannot be used with some algorithms."))),(0,i.kt)("h1",{id:"list-of-algorithms"},"List of algorithms"),(0,i.kt)("h2",{id:"searching"},"Searching"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find"),mdxType:"Symbol"},"Finds the first element satisfying specific criteria."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/find",name:"find",mdxType:"Symbol"},"Finds the first element satisfying specific criteria.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_if"),mdxType:"Symbol"},"Finds the first element satisfying specific predicate."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/find_if",name:"find_if",mdxType:"Symbol"},"Finds the first element satisfying specific predicate.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_if_not",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_if_not"),mdxType:"Symbol"},"Finds the first element **not** satisfying specific predicate."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/find_if_not",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"find_if_not"),mdxType:"Symbol"},"Finds the first element **not** satisfying specific predicate.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_first_of",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_first_of"),mdxType:"Symbol"},"Searches for any of the elements from one range in another."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/find_first_of",name:"find_first_of",mdxType:"Symbol"},"Searches for any of the elements from one range in another.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_end",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_end"),mdxType:"Symbol"},"Finds the last sequence of elements in a certain range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/find_end",name:"find_end",mdxType:"Symbol"},"Finds the last sequence of elements in a certain range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_last",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_last"),mdxType:"Symbol"},"Finds the last element equal to some value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_last_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_last_if"),mdxType:"Symbol"},"Finds the last element satisfying specific criteria.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/find_last_if_not",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::find_last_if_not"),mdxType:"Symbol"},"Finds the last element **not** satisfying specific criteria.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/adjacent_find",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::adjacent_find"),mdxType:"Symbol"},"Finds the first two adjacent items that satisfy a condition."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/adjacent_find",name:"adjacent_find",mdxType:"Symbol"},"Finds the first two adjacent items that satisfy a condition.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/search",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::search"),mdxType:"Symbol"},"Search for a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/search",name:"search",mdxType:"Symbol"},"Search for a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/search_n",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::search_n"),mdxType:"Symbol"},"Searches a range for a consecutive sequence of an element."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/search_n",name:"search_n",mdxType:"Symbol"},"Searches a range for a consecutive sequence of an element.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"determining-conditions"},"Determining conditions"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/all_of",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::all_of"),mdxType:"Symbol"},"Checks if all elements in a range hold a condition."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/all_of",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"all_of"),mdxType:"Symbol"},"Checks if all elements in a range hold a condition.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/any_of",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::any_of"),mdxType:"Symbol"},"Checks if any elements in a range hold a condition."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/any_of",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"any_of"),mdxType:"Symbol"},"Checks if any elements in a range hold a condition.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/none_of",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::none_of"),mdxType:"Symbol"},"Checks if no elements in a range hold a condition."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/none_of",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"none_of"),mdxType:"Symbol"},"Checks if no elements in a range hold a condition.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/count",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::count"),mdxType:"Symbol"},"Returns the number of certain elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/count",name:"count",mdxType:"Symbol"},"Returns the number of certain elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/count_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::count_if"),mdxType:"Symbol"},"Returns the number of elements satisfying specific criteria."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/count_if",name:"count_if",mdxType:"Symbol"},"Returns the number of elements satisfying specific criteria.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/mismatch",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::mismatch"),mdxType:"Symbol"},"Finds the first position where two ranges differ."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/mismatch",name:"mismatch",mdxType:"Symbol"},"Finds the first position where two ranges differ.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/starts_with",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::starts_with"),mdxType:"Symbol"},"Checks whether a range starts with another range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/ends_with",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::ends_with"),mdxType:"Symbol"},"Checks whether a range ends with another range.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"other-non-modifying"},"Other non-modifying"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/for_each",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::for_each"),mdxType:"Symbol"},"Applies a function to a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/for_each",name:"for_each",mdxType:"Symbol"},"Applies a function to a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/for_each_n",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::for_each_n"),mdxType:"Symbol"},"Applies a function to a range of elements consisting of an iterator and a size."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/for_each_n",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"for_each_n"),mdxType:"Symbol"},"Applies a function to a range of elements consisting of an iterator and a size.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"random-operations"},"Random operations"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/random_shuffle",name:(0,i.kt)(m.eH,{v:"cpp17",mdxType:"Removed"},"random_shuffle"),mdxType:"Symbol"},(0,i.kt)("span",{class:"inline-danger"},"Deprecated in C++14 and removed in C++17, use ",(0,i.kt)("a",{href:"/docs/std/algo/ordinary/shuffle"},(0,i.kt)("code",null,"std::shuffle"))," instead. ")," ",(0,i.kt)("br",null),"Randomly re-orders elements in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/shuffle",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::shuffle"),mdxType:"Symbol"},"Randomly re-orders elements in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/shuffle",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"shuffle"),mdxType:"Symbol"},"Randomly re-orders elements in a range. ",(0,i.kt)("br",null),"Preffered method over ",(0,i.kt)("a",{href:"/docs/std/algo/ordinary/random_shuffle"},(0,i.kt)("code",null,"std::random_shuffle")),".")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/sample",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::sample"),mdxType:"Symbol"},"Selects ",(0,i.kt)("code",null,"n")," random elements from a sequence."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/sample",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"sample"),mdxType:"Symbol"},"Selects ",(0,i.kt)("code",null,"n")," random elements from a sequence.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"modifying"},"Modifying"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/swap",name:"swap",mdxType:"Symbol"},"Swaps the values of two objects.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::copy"),mdxType:"Symbol"},"Copies a range of elements to a new location."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/copy",name:"copy",mdxType:"Symbol"},"Copies a range of elements to a new location.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/copy_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::copy_if"),mdxType:"Symbol"},"Copies elements from a range that satisfy a condition to a new location."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/copy_if",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"copy_if"),mdxType:"Symbol"},"Copies elements from a range that satisfy a condition to a new location.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/copy_n",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::copy_n"),mdxType:"Symbol"},"Copies a number elements from a range to a new location."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/copy_n",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"copy_n"),mdxType:"Symbol"},"Copies a number elements from a range to a new location.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/copy_backward",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::copy_backward"),mdxType:"Symbol"},"Copies a range of elements in backwards order."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/copy_backward",name:"copy_backward",mdxType:"Symbol"},"Copies a range of elements in backwards order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/move",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::move"),mdxType:"Symbol"},"Moves a range of elements to a new location."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/move",name:"move",mdxType:"Symbol"},"Moves a range of elements to a new location.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/move_backward",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::move_backward"),mdxType:"Symbol"},"Moves a range of elements to a new location in backwards order."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/move_backward",name:"move_backward",mdxType:"Symbol"},"Moves a range of elements to a new location in backwards order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/transform",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::transform"),mdxType:"Symbol"},"Applies a function to a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/transform",name:"transform",mdxType:"Symbol"},"Applies a function to a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/reverse",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::reverse"),mdxType:"Symbol"},"Reverses the order of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/reverse",name:"reverse",mdxType:"Symbol"},"Reverses the order of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/reverse_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::reverse_copy"),mdxType:"Symbol"},"Creates a reversed copy of a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/reverse_copy",name:"reverse_copy",mdxType:"Symbol"},"Creates a reversed copy of a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/fill",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::fill"),mdxType:"Symbol"},"Copy-assigns the given value to every element in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/fill",name:"fill",mdxType:"Symbol"},"Copy-assigns the given value to every element in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/fill_n",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::fill_n"),mdxType:"Symbol"},"Copy-assigns a value to a number of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/fill_n",name:"fill_n",mdxType:"Symbol"},"Copy-assigns a value to a number of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/generate",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::generate"),mdxType:"Symbol"},"Assigns the results of successive function calls to every element in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/generate",name:"generate",mdxType:"Symbol"},"Assigns the results of successive function calls to every element in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/remove",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::remove"),mdxType:"Symbol"},"Removes elements equal to ",(0,i.kt)("code",null,"value"),"."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/remove",name:"remove",mdxType:"Symbol"},"Removes elements equal to ",(0,i.kt)("code",null,"value"),".")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/remove_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::remove_if"),mdxType:"Symbol"},"Removes elements satisfying specific criteria."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/remove_if",name:"remove_if",mdxType:"Symbol"},"Removes elements satisfying specific criteria.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/remove_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::remove_copy"),mdxType:"Symbol"},"Copies a range of elements omitting those that are equal to ",(0,i.kt)("code",null,"value"),"."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/remove_copy",name:"remove_copy",mdxType:"Symbol"},"Copies a range of elements omitting those that are equal to ",(0,i.kt)("code",null,"value"),".")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/remove_copy_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::remove_copy_if"),mdxType:"Symbol"},"Copies a range of elements omitting those that satisfy a predicate."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/remove_copy_if",name:"remove_copy_if",mdxType:"Symbol"},"Copies a range of elements omitting those that satisfy a predicate.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/replace",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::replace"),mdxType:"Symbol"},"Replaces old values with new values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/replace",name:"replace",mdxType:"Symbol"},"Replaces old values with new values.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/replace_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::replace_if"),mdxType:"Symbol"},"Replaces values satisfying a predicate with new values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/replace_if",name:"replace_if",mdxType:"Symbol"},"Replaces values satisfying a predicate with new values.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/replace_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::replace_copy"),mdxType:"Symbol"},"Copies a range, replacing elements equal to old value with new value."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/replace_copy",name:"replace_copy",mdxType:"Symbol"},"Copies a range, replacing elements equal to old value with new value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/replace_copy_if",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::replace_copy_if"),mdxType:"Symbol"},"Copies a range, replacing elements that satisfy a predicate with new value."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/replace_copy_if",name:"replace_copy_if",mdxType:"Symbol"},"Copies a range, replacing elements that satisfy a predicate with new value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/swap_ranges",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::swap_ranges"),mdxType:"Symbol"},"Swaps two ranges."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/swap_ranges",name:"swap_ranges",mdxType:"Symbol"},"Swaps two ranges.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/iter_swap",name:"iter_swap",mdxType:"Symbol"},"Swaps the values of the elements the given iterators are pointing to.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/rotate",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::rotate"),mdxType:"Symbol"},"Rotates elements in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/rotate",name:"rotate",mdxType:"Symbol"},"Rotates elements in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/rotate_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::rotate_copy"),mdxType:"Symbol"},"Copies and rotates a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/rotate_copy",name:"rotate_copy",mdxType:"Symbol"},"Copies and rotates a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/shift_left",name:(0,i.kt)(m.U6,{v:"cpp23",mdxType:"Since"},"ranges::shift_left"),mdxType:"Symbol"},"Shifts elements in a range left."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/shift_left",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"shift_left"),mdxType:"Symbol"},"Shifts elements in a range left.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/shift_right",name:(0,i.kt)(m.U6,{v:"cpp23",mdxType:"Since"},"ranges::shift_right"),mdxType:"Symbol"},"Shifts elements in a range right."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/shift_right",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"shift_right"),mdxType:"Symbol"},"Shifts elements in a range right.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/unique",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::unique"),mdxType:"Symbol"},"Removes consecutive duplicates of an element in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/unique",name:"unique",mdxType:"Symbol"},"Removes consecutive duplicates of an element in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/unique_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::unique_copy"),mdxType:"Symbol"},"Creates a copy of range with no consecutive duplicates."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/unique_copy",name:"unique_copy",mdxType:"Symbol"},"Creates a copy of range with no consecutive duplicates.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"partitioning"},"Partitioning"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_partitioned",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::is_partitioned"),mdxType:"Symbol"},"Determines if the range is partitioned by the given predicate."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_partitioned",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"is_partitioned"),mdxType:"Symbol"},"Determines if the range is partitioned by the given predicate.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/partition",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::partition"),mdxType:"Symbol"},"Divides a range of elements into two groups based on a predicate."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partition",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"partition"),mdxType:"Symbol"},"Divides a range of elements into two groups based on a predicate.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/partition_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::partition_copy"),mdxType:"Symbol"},"Copies a range dividing the elements into two groups."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partition_copy",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"partition_copy"),mdxType:"Symbol"},"Copies a range dividing the elements into two groups.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/stable_partition",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::stable_partition"),mdxType:"Symbol"},"Divides elements into two groups while preserving their relative order."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/stable_partition",name:"stable_partition",mdxType:"Symbol"},"Divides elements into two groups while preserving their relative order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/partition_point",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::partition_point"),mdxType:"Symbol"},"Locates the partition point of a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partition_point",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"},"partition_point"),mdxType:"Symbol"},"Locates the partition point of a range.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"sorting"},"Sorting"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/sort",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::sort"),mdxType:"Symbol"},"Sorts a range into (by default) ascending order."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/sort",name:"sort",mdxType:"Symbol"},"Sorts a range into (by default) ascending order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/stable_sort",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::stable_sort"),mdxType:"Symbol"},"Sorts a range into (by default) ascending order while preserving the order between equal elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/stable_sort",name:"stable_sort",mdxType:"Symbol"},"Sorts a range into (by default) ascending order while preserving the order between equal elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/partial_sort",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::partial_sort"),mdxType:"Symbol"},"Sorts the first ",(0,i.kt)("b",null,"N")," elements of a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partial_sort",name:"partial_sort",mdxType:"Symbol"},"Sorts the first ",(0,i.kt)("b",null,"N")," elements of a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/partial_sort_copy",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::partial_sort_copy"),mdxType:"Symbol"},"Copies and partially sorts a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partial_sort_copy",name:"partial_sort_copy",mdxType:"Symbol"},"Copies and partially sorts a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/nth_element",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::stable_sort"),mdxType:"Symbol"},"Partially sorts the given range making sure that it is partitioned by the given element."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/nth_element",name:"stable_sort",mdxType:"Symbol"},"Partially sorts the given range making sure that it is partitioned by the given element.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_sorted",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::is_sorted"),mdxType:"Symbol"},"Checks whether a range is sorted."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_sorted",name:"is_sorted",mdxType:"Symbol"},"Checks whether a range is sorted.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_sorted_until",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::is_sorted_until"),mdxType:"Symbol"},"Finds the largest sorted subrange."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_sorted_until",name:"is_sorted_until",mdxType:"Symbol"},"Finds the largest sorted subrange.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"binary-search-on-sorted-ranges"},"Binary search (on sorted ranges)"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/binary_search",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::binary_search"),mdxType:"Symbol"},"Searches for an element in a partially-ordered range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/binary_search",name:"binary_search",mdxType:"Symbol"},"Searches for an element in a partially-ordered range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/lower_bound",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::lower_bound"),mdxType:"Symbol"},"Returns an iterator to the first element ",(0,i.kt)("em",null,"not less")," than the given value."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/lower_bound",name:"lower_bound",mdxType:"Symbol"},"Returns an iterator to the first element ",(0,i.kt)("em",null,"not less")," than the given value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/upper_bound",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::upper_bound"),mdxType:"Symbol"},"Returns an iterator to the first element ",(0,i.kt)("em",null,"greater")," than the given value."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/upper_bound",name:"upper_bound",mdxType:"Symbol"},"Returns an iterator to the first element ",(0,i.kt)("em",null,"greater")," than the given value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/equal_range",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::equal_range"),mdxType:"Symbol"},"Returns range of elements matching a specific key."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/equal_range",name:"equal_range",mdxType:"Symbol"},"Returns range of elements matching a specific key.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"set-on-sorted-ranges"},"Set (on sorted ranges)"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/includes",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::includes"),mdxType:"Symbol"},"Returns ",(0,i.kt)("code",null,"true")," if a sequence is a subsequence of another."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/includes",name:"includes",mdxType:"Symbol"},"Returns ",(0,i.kt)("code",null,"true")," if a sequence is a subsequence of another.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/set_difference",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::set_difference"),mdxType:"Symbol"},"Computes the difference between two sets."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/set_difference",name:"set_difference",mdxType:"Symbol"},"Computes the difference between two sets.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/set_intersection",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::set_intersection"),mdxType:"Symbol"},"Computes the intersection between two sets."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/set_intersection",name:"set_intersection",mdxType:"Symbol"},"Computes the intersection between two sets.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/set_symmetric_difference",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::set_symmetric_difference"),mdxType:"Symbol"},"Computes the symmetric difference between two sets."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/set_symmetric_difference",name:"set_symmetric_difference",mdxType:"Symbol"},"Computes the symmetric difference between two sets.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/set_union",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::set_union"),mdxType:"Symbol"},"Computes the union between two sets."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/set_union",name:"set_union",mdxType:"Symbol"},"Computes the union between two sets.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"other-operations-on-sorted-ranges"},"Other operations on sorted ranges"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/merge",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::merge"),mdxType:"Symbol"},"Merges two sorted ranges."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/merge",name:"merge",mdxType:"Symbol"},"Merges two sorted ranges.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/inplace_merge",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::inplace_merge"),mdxType:"Symbol"},"Merges two sorted ranges in-place."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/inplace_merge",name:"inplace_merge",mdxType:"Symbol"},"Merges two sorted ranges in-place.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"heap"},"Heap"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_heap",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::is_heap"),mdxType:"Symbol"},"Checks if the given range is a max heap."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_heap",name:"is_heap",mdxType:"Symbol"},"Checks if the given range is a max heap.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_heap_until",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::is_heap_until"),mdxType:"Symbol"},"Checks if the given range is a max heap."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_heap_until",name:"is_heap_until",mdxType:"Symbol"},"Checks if the given range is a max heap.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/make_heap",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::make_heap"),mdxType:"Symbol"},"Creates a max heap out of a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/make_heap",name:"make_heap",mdxType:"Symbol"},"Creates a max heap out of a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/push_heap",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::push_heap"),mdxType:"Symbol"},"Adds an element to a max heap."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/push_heap",name:"push_heap",mdxType:"Symbol"},"Adds an element to a max heap.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/pop_heap",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::pop_heap"),mdxType:"Symbol"},"Adds an element to a max heap."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/pop_heap",name:"pop_heap",mdxType:"Symbol"},"Adds an element to a max heap.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/sort_heap",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::sort_heap"),mdxType:"Symbol"},"Turns a max heap into a range of elements sorted in ascending order."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/sort_heap",name:"sort_heap",mdxType:"Symbol"},"Turns a max heap into a range of elements sorted in ascending order.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"minmax"},"Min/max"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/min",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::min"),mdxType:"Symbol"},"Returns the smallest of the given values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/min",name:"min",mdxType:"Symbol"},"Returns the smallest of the given values.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/max",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::max"),mdxType:"Symbol"},"Returns the greatest of the given values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/max",name:"max",mdxType:"Symbol"},"Returns the greatest of the given values.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/max_element",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::max_element"),mdxType:"Symbol"},"Returns the largest element in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/max_element",name:"max_element",mdxType:"Symbol"},"Returns the largest element in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/min_element",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::min_element"),mdxType:"Symbol"},"Returns the smallest element in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/min_element",name:"min_element",mdxType:"Symbol"},"Returns the smallest element in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/minmax",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::minmax"),mdxType:"Symbol"},"Returns the smallest and largest from the given values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/minmax",name:"minmax",mdxType:"Symbol"},"Returns the smallest and largest from the given values.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/minmax_element",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::minmax_element"),mdxType:"Symbol"},"Returns the smallest and the largest elements in a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/minmax_element",name:"minmax_element",mdxType:"Symbol"},"Returns the smallest and the largest elements in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/clamp",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::clamp"),mdxType:"Symbol"},"Clamps a value between a pair of boundary values."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/clamp",name:"clamp",mdxType:"Symbol"},"Clamps a value between a pair of boundary values.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"comparison"},"Comparison"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/equal",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::equal"),mdxType:"Symbol"},"Determines if two sets of elements are the same."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/equal",name:"equal",mdxType:"Symbol"},"Determines if two sets of elements are the same.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/lexicographical_compare",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"},"ranges::lexicographical_compare"),mdxType:"Symbol"},"Returns ",(0,i.kt)("code",null,"true")," if one range is lexicographically less than another."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/lexicographical_compare",name:"lexicographical_compare",mdxType:"Symbol"},"Returns ",(0,i.kt)("code",null,"true")," if one range is lexicographically less than another.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/lexicographical_compare_three_way",name:"lexicographical_compare_three_way",mdxType:"Symbol"},"Compares two ranges using three-way comparison.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"permutation"},"Permutation"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/is_permutation",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"}," ranges::is_permutation "),mdxType:"Symbol"},"Determines if a sequence is a permutation of another sequence."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/is_permutation",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"}," is_permutation "),mdxType:"Symbol"},"Determines if a sequence is a permutation of another sequence.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/next_permutation",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"}," ranges::next_permutation "),mdxType:"Symbol"},"Generates the next greater lexicographic permutation of a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/next_permutation",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"}," next_permutation "),mdxType:"Symbol"},"Generates the next greater lexicographic permutation of a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/prev_permutation",name:(0,i.kt)(m.U6,{v:"cpp20",mdxType:"Since"}," ranges::prev_permutation "),mdxType:"Symbol"},"Generates the prev smaller lexicographic permutation of a range of elements."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/prev_permutation",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"}," prev_permutation "),mdxType:"Symbol"},"Generates the prev smaller lexicographic permutation of a range of elements.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"numeric"},"Numeric"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/iota",name:(0,i.kt)(m.U6,{v:"cpp23",mdxType:"Since"}," ranges::iota "),mdxType:"Symbol"},"Fills a range with successive increments of the starting value."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/iota",name:(0,i.kt)(m.U6,{v:"cpp11",mdxType:"Since"}," iota "),mdxType:"Symbol"},"Fills a range with successive increments of the starting value.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/accumulate",name:"accumulate",mdxType:"Symbol"},"Sums up or ",(0,i.kt)("a",{href:"https://en.wikipedia.org/wiki/Fold_(higher-order_function)"},(0,i.kt)("b",null,"folds/reduces"))," a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/inner_product",name:"inner_product",mdxType:"Symbol"},"Computes the inner product of two ranges of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/adjacent_difference",name:"adjacent_difference",mdxType:"Symbol"},"Computes the differences between adjacent elements in a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/partial_sum",name:"partial_sum",mdxType:"Symbol"},"Computes the partial sum of a range of elements.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/reduce",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"reduce"),mdxType:"Symbol"},"Similar to ",(0,i.kt)("a",{href:"/docs/std/algo/reduce"},"std::accumulate"),", except out of order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/exclusive_scan",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"exclusive_scan"),mdxType:"Symbol"},"Similar to ",(0,i.kt)("a",{href:"/docs/std/algo/partial_sum"},"std::partial_sum"),", excludes the ith input element from the ith sum.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/inclusive_scan",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"inclusive_scan"),mdxType:"Symbol"},"Similar to ",(0,i.kt)("a",{href:"/docs/std/algo/partial_sum"},"std::partial_sum"),", includes the ith input element from the ith sum.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/transform_reduce",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"transform_reduce"),mdxType:"Symbol"},"Applies an invocable, then reduces out of order.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/transform_exclusive_scan",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"transform_exclusive_scan"),mdxType:"Symbol"},"Applies an invocable, then calculates exclusive scan.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/transform_inclusive_scan",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"transform_inclusive_scan"),mdxType:"Symbol"},"Applies an invocable, then calculates inclusive scan.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"operations-on-uninitialized-memory"},"Operations on uninitialized memory"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_copy",name:"uninitialized_copy",mdxType:"Symbol"},"Copies a range of objects to an uninitialized area of memory."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_copy",name:"uninitialized_copy",mdxType:"Symbol"},"Copies a range of objects to an uninitialized area of memory.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_copy_n",name:"uninitialized_copy_n",mdxType:"Symbol"},"Copies an amount of elements from a range to an uninitialized area of memory."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_copy_n",name:"uninitialized_copy_n",mdxType:"Symbol"},"Copies an amount of elements from a range to an uninitialized area of memory.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_fill",name:"uninitialized_fill",mdxType:"Symbol"},"Fills an uninitialized range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_fill",name:"uninitialized_fill",mdxType:"Symbol"},"Fills an uninitialized range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_fill_n",name:"uninitialized_fill_n",mdxType:"Symbol"},"Fills an uninitialized range defined by start and count."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_fill_n",name:"uninitialized_fill_n",mdxType:"Symbol"},"Fills an uninitialized range defined by start and count.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_fill_n",name:"uninitialized_fill_n",mdxType:"Symbol"},"Fills an uninitialized range defined by start and count."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_fill_n",name:"uninitialized_fill_n",mdxType:"Symbol"},"Fills an uninitialized range defined by start and count.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_move",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_move"),mdxType:"Symbol"},"Moves a number of objects to an uninitialized area of memory."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_move",name:"uninitialized_move",mdxType:"Symbol"},"Moves a number of objects to an uninitialized area of memory.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_move_n",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_move_n"),mdxType:"Symbol"},"Moves a number of objects to an uninitialized area of memory."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_move_n",name:"uninitialized_move_n",mdxType:"Symbol"},"Moves a number of objects to an uninitialized area of memory.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_default_construct",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_default_construct"),mdxType:"Symbol"},"Constructs objects by ",(0,i.kt)("a",{href:"#"},"default-initialization")," in an uninitialized area of memory, defined by a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_default_construct",name:"uninitialized_default_construct",mdxType:"Symbol"},"Moves a number of objects to an uninitialized area of memory.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_default_construct_n",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_default_construct_n"),mdxType:"Symbol"},"Constructs objects by default-initialization in an uninitialized area of memory, defined by a start and a count."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_default_construct_n",name:"uninitialized_default_construct_n",mdxType:"Symbol"},"Constructs objects by default-initialization in an uninitialized area of memory, defined by a start and a count.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_value_construct",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_value_construct"),mdxType:"Symbol"},"Constructs objects by value-initialization in an uninitialized area of memory, defined by a range."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_value_construct",name:"uninitialized_value_construct",mdxType:"Symbol"},"Constructs objects by value-initialization in an uninitialized area of memory, defined by a range.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/uninitialized_value_construct_n",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"uninitialized_value_construct_n"),mdxType:"Symbol"},"Constructs objects by value-initialization in an uninitialized area of memory, defined by a start and size."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/uninitialized_value_construct_n",name:"uninitialized_value_construct_n",mdxType:"Symbol"},"Constructs objects by value-initialization in an uninitialized area of memory, defined by a start and size.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/destroy",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"destroy"),mdxType:"Symbol"},"Destroys a range of objects."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/destroy",name:"destroy",mdxType:"Symbol"},"Destroys a range of objects.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/destroy_n",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"destroy_n"),mdxType:"Symbol"},"Destroys a number of objects."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/destroy_n",name:"destroy_n",mdxType:"Symbol"},"Destroys a number of objects.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/destroy_at",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"destroy_at"),mdxType:"Symbol"},"Destroys an object at a given address."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/destroy_at",name:"destroy_at",mdxType:"Symbol"},"Destroys an object at a given address.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Rangified:(0,i.kt)(o.mN,{linkName:"./ranges/construct_at",name:(0,i.kt)(m.U6,{v:"cpp17",mdxType:"Since"},"construct_at"),mdxType:"Symbol"},"Creates an object at a given address."),Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/construct_at",name:"construct_at",mdxType:"Symbol"},"Creates an object at a given address.")},mdxType:"SwitchView"})),(0,i.kt)("h2",{id:"c-algorithms"},"C algorithms"),(0,i.kt)(o.ZP,{mdxType:"SymbolTable"},(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/qsort",name:"qsort",mdxType:"Symbol"},"Sorts a range of elements with unspecified type.")},mdxType:"SwitchView"}),(0,i.kt)(r.Z,{content:{Ordinary:(0,i.kt)(o.mN,{linkName:"./ordinary/bsearch",name:"bsearch",mdxType:"Symbol"},"Searches an array for an element of unspecified type.")},mdxType:"SwitchView"})))}b.isMDXComponent=!0}}]);