"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[40891],{14064:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}s.isMDXComponent=!0},98088:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("b",null,"Undefined behaviour")," is a property of a program that's incorrect, but likely compiles. It is incorrect in a way, that the error is only invoked in certain conditions at runtime.",(0,r.kt)("p",null,"Common cases include: ",(0,r.kt)("strong",{parentName:"p"},"out of bounds access"),", ",(0,r.kt)("strong",{parentName:"p"},"reading uninitialized objects"),", ",(0,r.kt)("strong",{parentName:"p"},"dangling pointers/references")," or ",(0,r.kt)("strong",{parentName:"p"},"signed overflow"),"."))}s.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),r=n(67294),l=n(86010),s=n(12466),o=n(76775),i=n(91980),c=n(67392),p=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[i,c]=f({queryString:n,groupId:a}),[u,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=i??u;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),k(e)}),[c,k,l]),tabValues:l}}var g=n(72389);const y="tabList__CuJ",I="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==o&&(u(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},s,{className:(0,l.Z)("tabs__item",I,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=k(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",y)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(h,(0,a.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(87462),r=n(67294);const l="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),l=n(85162),s=n(99372),o=n(72412);const i={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(c.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(c.detailed)))):c.value):a.createElement(l.Z,{value:n,label:s.gJ.get(n),default:0==t},(0,o.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var s=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},i=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function p(e){a.useContext(s.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(44996),l=n(34386),s=n(72412);const o="TooltipContent_Lvru",i="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let u=c||"clamp(250px, 25vw, 800px)";"string"==typeof u&&u.endsWith("vw")&&(u=`clamp(250px, ${u}, 800px)`);const d="function"==typeof n?a.createElement(n):n,m=(t||"").startsWith("/")?(0,r.Z)(t):t,f=t?a.createElement("a",{href:m,target:"_blank",rel:"noreferrer"},p):p;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:u}}},title:a.createElement("span",{className:i},(0,s.Z)(d)),placement:"top",arrow:!0},a.createElement("span",{className:o},f))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>f,U6:()=>d,OS:()=>m});var a=n(67294),r=n(95999);const l="markedText_c6kK",s="since_c1Q3",o="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function u(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(u,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(u,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return a.createElement(u,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",a.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),p.set("removed-",a.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},39852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/set_intersection/since-cpp17",id:"std/algo/ordinary/_codes/set_intersection/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/set_intersection/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/set_intersection",slug:"/std/algo/ordinary/_codes/set_intersection/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/set_intersection/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/set_intersection/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2, class OutputIt >\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                           InputIt2 first2, InputIt2 last2, OutputIt d_first );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class OutputIt, class Compare >\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                           InputIt2 first2, InputIt2 last2,\n                           OutputIt d_first, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1,\n          class ForwardIt2, class ForwardIt3 >\nForwardIt3 set_intersection( ExecutionPolicy&& policy,\n                             ForwardIt1 first1, ForwardIt1 last1,\n                             ForwardIt2 first2, ForwardIt2 last2,\n                             ForwardIt3 d_first );\n\n// (4)\ntemplate< class ExecutionPolicy, class ForwardIt1,\n          class ForwardIt2, class ForwardIt3, class Compare >\nForwardIt3 set_intersection( ExecutionPolicy&& policy,\n                             ForwardIt1 first1, ForwardIt1 last1,\n                             ForwardIt2 first2, ForwardIt2 last2,\n                             ForwardIt3 d_first, Compare comp );\n")))}u.isMDXComponent=!0},50572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/set_intersection/since-cpp20",id:"std/algo/ordinary/_codes/set_intersection/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/set_intersection/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/set_intersection",slug:"/std/algo/ordinary/_codes/set_intersection/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/set_intersection/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/set_intersection/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2, class OutputIt >\nconstexpr OutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                                     InputIt2 first2, InputIt2 last2, OutputIt d_first );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class OutputIt, class Compare >\nconstexpr OutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                                     InputIt2 first2, InputIt2 last2,\n                                     OutputIt d_first, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class ForwardIt1,\n          class ForwardIt2, class ForwardIt3 >\nForwardIt3 set_intersection( ExecutionPolicy&& policy,\n                             ForwardIt1 first1, ForwardIt1 last1,\n                             ForwardIt2 first2, ForwardIt2 last2,\n                             ForwardIt3 d_first );\n\n// (4)\ntemplate< class ExecutionPolicy, class ForwardIt1,\n          class ForwardIt2, class ForwardIt3, class Compare >\nForwardIt3 set_intersection( ExecutionPolicy&& policy,\n                             ForwardIt1 first1, ForwardIt1 last1,\n                             ForwardIt2 first2, ForwardIt2 last2,\n                             ForwardIt3 d_first, Compare comp );\n")))}u.isMDXComponent=!0},28093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,o={unversionedId:"std/algo/ordinary/_codes/set_intersection/until-cpp17",id:"std/algo/ordinary/_codes/set_intersection/until-cpp17",title:"until-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/set_intersection/until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/set_intersection",slug:"/std/algo/ordinary/_codes/set_intersection/until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/set_intersection/until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/set_intersection/until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt1, class InputIt2, class OutputIt >\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                           InputIt2 first2, InputIt2 last2, OutputIt d_first );\n\n// (2)\ntemplate< class InputIt1, class InputIt2, class OutputIt, class Compare >\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                           InputIt2 first2, InputIt2 last2,\n                           OutputIt d_first, Compare comp );\n")))}u.isMDXComponent=!0},88658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>y,default:()=>N,frontMatter:()=>g,metadata:()=>I,toc:()=>h});var a=n(87462),r=n(67294),l=n(3905),s=n(55059),o=n(22307),i=n(99801),c=n(18510),p=n(99372),u=n(14064),d=n(98088),m=n(28093),f=n(39852),k=n(50572);const g={title:"set_intersection algorithm",sidebar_label:"set_intersection(  )",description:"set_intersection algorithm C++ documentation",hide_title:!0,tags:["algorithm","set","intersection","set_intersection"],cppreference_origin_rel:"w/cpp/algorithm/set_intersection"},y=void 0,I={unversionedId:"std/algo/ordinary/set_intersection",id:"std/algo/ordinary/set_intersection",title:"set_intersection algorithm",description:"set_intersection algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/set_intersection.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/set_intersection",permalink:"/CppLangNet/docs/std/algo/ordinary/set_intersection",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/set_intersection.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"set",permalink:"/CppLangNet/docs/tags/set"},{label:"intersection",permalink:"/CppLangNet/docs/tags/intersection"},{label:"set_intersection",permalink:"/CppLangNet/docs/tags/set-intersection"}],version:"current",frontMatter:{title:"set_intersection algorithm",sidebar_label:"set_intersection(  )",description:"set_intersection algorithm C++ documentation",hide_title:!0,tags:["algorithm","set","intersection","set_intersection"],cppreference_origin_rel:"w/cpp/algorithm/set_intersection"},sidebar:"defaultSidebar",previous:{title:"set_union(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/set_union"},next:{title:"set_difference(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/set_difference"}},v={},h=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Examples",id:"examples",level:3}],b={toc:h};function N(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdset_intersection-algorithm"},"std::set_intersection() algorithm"),(0,l.kt)(i.Z,{content:{"since-cpp20":(0,l.kt)(k.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,l.kt)(f.default,{mdxType:"Signature_SinceCpp17"}),"until-cpp17":(0,l.kt)(m.default,{mdxType:"Signature_UntilCpp17"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"Constructs a sorted range beginning at ",(0,l.kt)("inlineCode",{parentName:"p"},"d_first")," consisting of elements that are found in both sorted ranges [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") and [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),")."),(0,l.kt)("p",null,"If [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") contains ",(0,l.kt)("inlineCode",{parentName:"p"},"m elements")," that are equivalent to each other and [",(0,l.kt)("inlineCode",{parentName:"p"},"first2"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last2"),") contains ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," elements that are equivalent to them,\nthe final ",(0,l.kt)("inlineCode",{parentName:"p"},"std::max(mn, n)")," elements will be copied from [",(0,l.kt)("inlineCode",{parentName:"p"},"first1"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last1"),") to the output range, preserving order."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Both ranges must be sorted with respect to ",(0,l.kt)("inlineCode",{parentName:"p"},"operator<"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Both ranges must be sorted with respect to ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(3 - 4)")," Same as ",(0,l.kt)("strong",{parentName:"p"},"(1)")," and ",(0,l.kt)("strong",{parentName:"p"},"(2)"),", but executed according to policy."),(0,l.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,l.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,l.kt)(p.OS,{v:"cpp20",mdxType:"Until"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," is ",(0,l.kt)("code",null,"true"),". "),(0,l.kt)(p.U6,{v:"cpp20",mdxType:"Since"}," ",(0,l.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," is ",(0,l.kt)("code",null,"true"),". ")))),(0,l.kt)("admonition",{title:"Undefined Behaviour",type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"If either of the input ranges is not sorted (using ",(0,l.kt)("inlineCode",{parentName:"p"},"operator<")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"comp"),", respectively) or overlaps with the output range,\nthe ",(0,l.kt)(c.Z,{title:(0,l.kt)(d.ZP,{mdxType:"Term_UndefinedBehaviour"}),mdxType:"Tooltip"},"behavior is undefined"),".")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last2")," "),mdxType:"Symbol"},"The first sorted range of elements to examine."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last3")," "),mdxType:"Symbol"},"The second sorted range of elements to examine."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"d_first"),mdxType:"Symbol"},"The beginning of the destination range."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"policy"),mdxType:"Symbol"},"The execution policy to use. See ",(0,l.kt)("a",{href:""},"execution policy")," for details."),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"comp"),mdxType:"Symbol"},(0,l.kt)("p",null,"Comparison function object (i.e. an object that satisfies the requirements of ",(0,l.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),").\nThe signature of the comparison function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool cmp(const Type1 &a, const Type2 &b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),", but must not modify arguments."),(0,l.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,l.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,l.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,l.kt)(p.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,l.kt)("code",null,"Type1")," unless for ",(0,l.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,l.kt)("li",{parentName:"ul"},"The types ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"RandomIt")," can be implicitly converted to both of them.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(s.ZP,{mdxType:"SymbolTable"},(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"InputIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"InputIt2")," "),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator")," ",(0,l.kt)("br",null)),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"ForwardIt1")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"ForwardIt2")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"ForwardIt3")),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyForwardIterator"},"LegacyForwardIterator")," ",(0,l.kt)("br",null)),(0,l.kt)(s.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"OutputIt1"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyOutputIterator"},"LegacyOutputIterator"))),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"Iterator past the end of the constructed range."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Given ",(0,l.kt)("inlineCode",{parentName:"p"},"M")," std::distance(first1, last1) and ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"std::distance(first2, last2)"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1, 3)")," at most ",(0,l.kt)("strong",{parentName:"li"},"2 ","*"," (M + N) - 1")," comparisons using ",(0,l.kt)("inlineCode",{parentName:"li"},"operator<"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(2, 4)")," at most ",(0,l.kt)("strong",{parentName:"li"},"2 ","*"," (M + N) - 1")," comparison with ",(0,l.kt)("inlineCode",{parentName:"li"},"comp"),".")),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"The overloads with a template parameter named ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,l.kt)("a",{parentName:"li",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,l.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,l.kt)(c.Z,{title:(0,l.kt)(u.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,l.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,l.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,l.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"set_intersection(1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt1, class InputIt2, class OutputIt>\nOutputIt set_intersection(InputIt1 first1, InputIt1 last1,\n                          InputIt2 first2, InputIt2 last2, OutputIt d_first)\n{\n    while (first1 != last1 && first2 != last2)\n    {\n        if (*first1 < *first2)\n            ++first1;\n        else\n        {\n            if (!(*first2 < *first1))\n                *d_first++ = *first1++; // *first1 and *first2 are equivalent.\n            ++first2;\n        }\n    }\n    return d_first;\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"set_intersection(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt1, class InputIt2, class OutputIt, class Compare>\nOutputIt set_intersection(InputIt1 first1, InputIt1 last1,\n                          InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp)\n{\n    while (first1 != last1 && first2 != last2)\n    {\n        if (comp(*first1, *first2))\n            ++first1;\n        else\n        {\n            if (!comp(*first2, *first1))\n                *d_first++ = *first1++; // *first1 and *first2 are equivalent.\n            ++first2;\n        }\n    }\n    return d_first;\n}\n"))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <vector>\n\nint main()\n{\n    std::vector<int> v1 {7, 2, 3, 4, 5, 6, 7, 8};\n    std::vector<int> v2 {5, 7, 9, 7};\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n\n    std::vector<int> v_intersection;\n    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(),\n                          std::back_inserter(v_intersection));\n\n    for (int n : v_intersection)\n        std::cout << n << ' ';\n    std::cout << '\\n';\n}\n"))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Possible Output"',title:'"Possible','Output"':!0},"5 7 7\n")))))}N.isMDXComponent=!0}}]);