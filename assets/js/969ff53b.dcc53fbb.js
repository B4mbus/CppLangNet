"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[60737],{14064:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aspects and semantics that are ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,r.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}l.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),r=n(67294),o=n(86010),l=n(12466),s=n(76775),i=n(91980),c=n(67392),p=n(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=m(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,c]=g({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),k=(()=>{const e=i??d;return u({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{k&&s(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var k=n(72389);const h="tabList__CuJ",y="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==s&&(d(t),i(a))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:m},l,{className:(0,o.Z)("tabs__item",y,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function C(e){const t=(0,k.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(87462),r=n(67294);const o="columns_Terr";function l(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:o,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}l.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),o=n(85162),l=n(99372),s=n(72412);const i={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(o.Z,{value:n,label:l.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:i.smallTabs},a.createElement(o.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(c.simplified)),a.createElement(o.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(c.detailed)))):c.value):a.createElement(o.Z,{value:n,label:l.gJ.get(n),default:0==t},(0,s.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var a=n(67294),r=n(72412);const o={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var l=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:o.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:o.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:o.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:o.accessPrivate}},i=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>i(e).Order<i(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:o.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function p(e){a.useContext(l.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:o[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:o.symbolProp},(e=>{const t=i(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:o.symbolName},t),a.createElement("td",{className:o.symbolDesc},(0,r.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(44996),o=n(34386),l=n(72412);const s="TooltipContent_Lvru",i="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let d=c||"clamp(250px, 25vw, 800px)";"string"==typeof d&&d.endsWith("vw")&&(d=`clamp(250px, ${d}, 800px)`);const m="function"==typeof n?a.createElement(n):n,u=(t||"").startsWith("/")?(0,r.Z)(t):t,g=t?a.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},p):p;return a.createElement(o.Z,{componentsProps:{tooltip:{style:{maxWidth:d}}},title:a.createElement("span",{className:i},(0,l.Z)(m)),placement:"top",arrow:!0},a.createElement("span",{className:s},g))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>g,U6:()=>m,OS:()=>u});var a=n(67294),r=n(95999);const o="markedText_c6kK",l="since_c1Q3",s="until_jXK6",i="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function d(e){let{children:t,className:n}=e;return a.createElement("span",{className:o+(n?" "+n:"")},t)}function m(e){let{children:t,v:n}=e;return a.createElement(d,{className:l},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`since-${n}`),")")))}function u(e){let{children:t,v:n}=e;return a.createElement(d,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`until-${n}`),")")))}function g(e){let{children:t,v:n}=e;return a.createElement(d,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",a.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),p.set("removed-",a.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},69230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l=void 0,s={unversionedId:"std/algo/ordinary/_codes/sort/since-cpp17",id:"std/algo/ordinary/_codes/sort/since-cpp17",title:"since-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/sort/since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/sort",slug:"/std/algo/ordinary/_codes/sort/since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/sort/since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/sort/since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nvoid sort( RandomIt first, RandomIt last );\n\n// (2)\ntemplate< class RandomIt, class Compare >\nvoid sort( RandomIt first, RandomIt last, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class RandomIt >\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last );\n\n// (4)\ntemplate< class ExecutionPolicy, class RandomIt, class Compare >\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Compare comp );\n")))}d.isMDXComponent=!0},98160:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l=void 0,s={unversionedId:"std/algo/ordinary/_codes/sort/since-cpp20",id:"std/algo/ordinary/_codes/sort/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/sort/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/sort",slug:"/std/algo/ordinary/_codes/sort/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/sort/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/sort/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nconstexpr void sort( RandomIt first, RandomIt last );\n\n// (2)\ntemplate< class RandomIt, class Compare >\nconstexpr void sort( RandomIt first, RandomIt last, Compare comp );\n\n// (3)\ntemplate< class ExecutionPolicy, class RandomIt >\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last );\n\n// (4)\ntemplate< class ExecutionPolicy, class RandomIt, class Compare >\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last, Compare comp );\n")))}d.isMDXComponent=!0},58271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l=void 0,s={unversionedId:"std/algo/ordinary/_codes/sort/until-cpp17",id:"std/algo/ordinary/_codes/sort/until-cpp17",title:"until-cpp17",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/sort/until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/sort",slug:"/std/algo/ordinary/_codes/sort/until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/sort/until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/sort/until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},i={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class RandomIt >\nvoid sort( RandomIt first, RandomIt last );\n\n// (3)\ntemplate< class RandomIt, class Compare >\nvoid sort( RandomIt first, RandomIt last, Compare comp );\n")))}d.isMDXComponent=!0},95642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>k,default:()=>N,frontMatter:()=>f,metadata:()=>h,toc:()=>b});var a=n(87462),r=n(67294),o=n(3905),l=n(55059),s=n(22307),i=n(99801),c=n(18510),p=n(99372),d=n(14064),m=n(58271),u=n(69230),g=n(98160);const f={title:"sort algorithm",sidebar_label:"sort(  )",description:"sort algorithm C++ documentation",hide_title:!0,tags:["algorithm","sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/sort"},k=void 0,h={unversionedId:"std/algo/ordinary/sort",id:"std/algo/ordinary/sort",title:"sort algorithm",description:"sort algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/sort.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/sort",permalink:"/CppLangNet/docs/std/algo/ordinary/sort",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/sort.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"sort",permalink:"/CppLangNet/docs/tags/sort"},{label:"ascending",permalink:"/CppLangNet/docs/tags/ascending"},{label:"order",permalink:"/CppLangNet/docs/tags/order"}],version:"current",frontMatter:{title:"sort algorithm",sidebar_label:"sort(  )",description:"sort algorithm C++ documentation",hide_title:!0,tags:["algorithm","sort","ascending","order"],cppreference_origin_rel:"w/cpp/algorithm/sort"},sidebar:"defaultSidebar",previous:{title:"ranges::is_sorted_until(  )",permalink:"/CppLangNet/docs/std/algo/ranges/is_sorted_until"},next:{title:"stable_sort(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/stable_sort"}},y={},b=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],v={toc:b};function N(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stdsort-algorithm"},"std::sort() algorithm"),(0,o.kt)(i.Z,{content:{"since-cpp20":(0,o.kt)(g.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp17":(0,o.kt)(u.default,{mdxType:"Signature_SinceCpp17"}),"until-cpp17":(0,o.kt)(m.default,{mdxType:"Signature_UntilCpp17"})},mdxType:"SwitchView"}),(0,o.kt)("p",null,"Sorts the elements in the range [",(0,o.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,o.kt)("inlineCode",{parentName:"p"},"last"),") in ascending order."),(0,o.kt)("p",null,"A sequence is sorted with respect to a comparator ",(0,o.kt)("inlineCode",{parentName:"p"},"comp")," if for any iterator ",(0,o.kt)("inlineCode",{parentName:"p"},"it")," pointing to the sequence and any non-negative integer ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," such that ",(0,o.kt)("inlineCode",{parentName:"p"},"it + n")," is a valid iterator pointing to an element of the sequence, ",(0,o.kt)("inlineCode",{parentName:"p"},"comp(*(it + n), *it)")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"*(it + n) < *it"),") evaluates to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"The order of equal elements is not guaranteed to be preserved.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"(1)")," Elements are compared using ",(0,o.kt)("inlineCode",{parentName:"p"},"operator<"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"(2)")," Elements are compared using the given binary comparison function ",(0,o.kt)("inlineCode",{parentName:"p"},"comp"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"(3, 4)")," Same as ",(0,o.kt)("strong",{parentName:"p"},"(1)")," and ",(0,o.kt)("strong",{parentName:"p"},"(2)"),", but executed according to policy."),(0,o.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,o.kt)("p",{parentName:"admonition"},"These overloads participate in overload resolution only if"),(0,o.kt)(p.OS,{v:"cpp20",mdxType:"Until"}," ",(0,o.kt)("code",null,"std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>")," is ",(0,o.kt)("code",null,"true"),". "),(0,o.kt)(p.U6,{v:"cpp20",mdxType:"Since"}," ",(0,o.kt)("code",null,"std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>")," is ",(0,o.kt)("code",null,"true"),". ")))),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)(l.ZP,{mdxType:"SymbolTable"},(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)(r.Fragment,null," ",(0,o.kt)("code",null,"first")," ",(0,o.kt)("br",null)," ",(0,o.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to sort."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"policy"),mdxType:"Symbol"},"The execution policy to use. See ",(0,o.kt)("a",{href:"#"},"execution policy")," for details."),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"cmp"),mdxType:"Symbol"},(0,o.kt)("p",null,"Comparison function object (i.e. an object that satisfies the requirements of ",(0,o.kt)("a",{parentName:"p",href:"/docs/named_req/Compare"},"Compare"),").\nThe signature of the comparison function should be equivalent to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"bool cmp(const Type1 &a, const Type2 &b);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,o.kt)("inlineCode",{parentName:"li"},"const&"),", but must not modify arguments."),(0,o.kt)("li",{parentName:"ul"},"Must accept all values of type (possibly const) ",(0,o.kt)("inlineCode",{parentName:"li"},"Type")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Type2"),", regardless of ",(0,o.kt)("a",{parentName:"li",href:"#"},"value category")," (so ",(0,o.kt)("inlineCode",{parentName:"li"},"Type1&")," is not allowed, ",(0,o.kt)(p.U6,{v:"cpp11",mdxType:"Since"},"nor is ",(0,o.kt)("code",null,"Type1")," unless for ",(0,o.kt)("code",null,"Type1")," a move is equivalent to a copy"),")"),(0,o.kt)("li",{parentName:"ul"},"The types ",(0,o.kt)("inlineCode",{parentName:"li"},"Type1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,o.kt)("inlineCode",{parentName:"li"},"RandomIt")," can be implicitly converted to both of them.")))),(0,o.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,o.kt)(l.ZP,{mdxType:"SymbolTable"},(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"RandomIt"),mdxType:"Symbol"},(0,o.kt)("a",{href:"/docs/named_req/ValueSwappable"},"ValueSwappable")," ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"/docs/named_req/LegacyRandomAccessIterator"},"LegacyRandomAccessIterator")),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)(r.Fragment,null," Type of dereferenced ",(0,o.kt)("code",null,"RandomIt")," "),mdxType:"Symbol"},(0,o.kt)("a",{href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"/docs/named_req/MoveConstructible"},"MoveConstructible")),(0,o.kt)(l.mN,{none:!0,noLink:!0,name:(0,o.kt)("code",null,"Compare"),mdxType:"Symbol"},(0,o.kt)("a",{href:"/docs/named_req/Compare"},"Compare"))),(0,o.kt)("h3",{id:"return-value"},"Return value"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(none)")),(0,o.kt)("h3",{id:"complexity"},"Complexity"),(0,o.kt)("p",null,"Regardless of implementation, guaranteed ",(0,o.kt)("strong",{parentName:"p"},"O(N ","*"," log(N))")," comparisons, where ",(0,o.kt)("strong",{parentName:"p"},"N")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"std::distance(first, last)"),"."),(0,o.kt)("h3",{id:"exceptions"},"Exceptions"),(0,o.kt)("p",null,"The overloads with a template parameter named ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,o.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,o.kt)("a",{parentName:"li",href:"#"},(0,o.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,o.kt)("a",{parentName:"li",href:"#"},(0,o.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor any other ",(0,o.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,o.kt)(c.Z,{title:(0,o.kt)(d.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,o.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,o.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,o.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,o.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,o.kt)("p",null,"See implementations from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950"},"libstdc++")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/llvm/llvm-project/blob/e7fc254875ca9e82b899d5354fae9b5b779ff485/libcxx/include/__algorithm/sort.h#L264"},"libc++"),"."),(0,o.kt)("h3",{id:"notes"},"Notes"),(0,o.kt)("p",null,"Before ",(0,o.kt)("a",{parentName:"p",href:"https://cplusplus.github.io/LWG/issue713"},(0,o.kt)("inlineCode",{parentName:"a"},"LWG713")),", the complexity requirement allowed ",(0,o.kt)("inlineCode",{parentName:"p"},"sort()")," to be implemented using only Quicksort,\nwhich may need ",(0,o.kt)("strong",{parentName:"p"},"O(N",(0,o.kt)("sup",null,"2"),")")," comparisons in the worst case."),(0,o.kt)("p",null,"Introsort can handle all cases with ",(0,o.kt)("strong",{parentName:"p"},"O(N ","*"," log(N))")," comparisons (without incurring additional overhead in the average case), and thus is usually used for implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"sort()"),"."),(0,o.kt)("p",null,"libc++ has not implemented the corrected time complexity requirement until ",(0,o.kt)("a",{parentName:"p",href:"https://reviews.llvm.org/D113413"},(0,o.kt)("inlineCode",{parentName:"a"},"LLVM 14")),"."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <algorithm>\n#include <array>\n#include <functional>\n#include <iostream>\n#include <string_view>\n\nint main()\n{\n    std::array<int, 10> s {5, 7, 4, 2, 8, 6, 1, 9, 0, 3};\n\n    auto print = [&s](std::string_view const rem)\n    {\n        for (auto a : s)\n            std::cout << a << \' \';\n        std::cout << ": " << rem << \'\\n\';\n    };\n\n    std::sort(s.begin(), s.end());\n    print("sorted with the default operator<");\n\n    std::sort(s.begin(), s.end(), std::greater<int>());\n    print("sorted with the standard library compare function object");\n\n    struct\n    {\n        bool operator()(int a, int b) const { return a < b; }\n    }\n    customLess;\n\n    std::sort(s.begin(), s.end(), customLess);\n    print("sorted with a custom function object");\n\n    std::sort(s.begin(), s.end(), [](int a, int b)\n                                  {\n                                      return a > b;\n                                  });\n    print("sorted with a lambda expression");\n}\n'))),(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"0 1 2 3 4 5 6 7 8 9 : sorted with the default operator<\n9 8 7 6 5 4 3 2 1 0 : sorted with the standard library compare function object\n0 1 2 3 4 5 6 7 8 9 : sorted with a custom function object\n9 8 7 6 5 4 3 2 1 0 : sorted with a lambda expression\n")))))}N.isMDXComponent=!0}}]);