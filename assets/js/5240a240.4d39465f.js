"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[92993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},76694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=(n(42677),n(22307)),s=n(74866),o=n(85162);const l={sidebar_position:3,sidebar_label:"3. Strings",title:"Strings",description:"Lesson: basics of string/text type in C++",tags:["string","text","type","variable","declaration","definition","initialization","conversion","float","int","concatenation","append"],hide_title:!0},p=void 0,u={unversionedId:"course/basics/variables/strings",id:"course/basics/variables/strings",title:"Strings",description:"Lesson: basics of string/text type in C++",source:"@site/content/learn/course/basics/variables/strings.mdx",sourceDirName:"course/basics/variables",slug:"/course/basics/variables/strings",permalink:"/CppLangNet/learn/course/basics/variables/strings",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/variables/strings.mdx",tags:[{label:"string",permalink:"/CppLangNet/learn/tags/string"},{label:"text",permalink:"/CppLangNet/learn/tags/text"},{label:"type",permalink:"/CppLangNet/learn/tags/type"},{label:"variable",permalink:"/CppLangNet/learn/tags/variable"},{label:"declaration",permalink:"/CppLangNet/learn/tags/declaration"},{label:"definition",permalink:"/CppLangNet/learn/tags/definition"},{label:"initialization",permalink:"/CppLangNet/learn/tags/initialization"},{label:"conversion",permalink:"/CppLangNet/learn/tags/conversion"},{label:"float",permalink:"/CppLangNet/learn/tags/float"},{label:"int",permalink:"/CppLangNet/learn/tags/int"},{label:"concatenation",permalink:"/CppLangNet/learn/tags/concatenation"},{label:"append",permalink:"/CppLangNet/learn/tags/append"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"3. Strings",title:"Strings",description:"Lesson: basics of string/text type in C++",tags:["string","text","type","variable","declaration","definition","initialization","conversion","float","int","concatenation","append"],hide_title:!0},sidebar:"defaultSidebar",previous:{title:"2. Operations",permalink:"/CppLangNet/learn/course/basics/variables/operations"},next:{title:"Variables \xbb Strings \xbb Examples",permalink:"/CppLangNet/learn/course/basics/variables/strings/examples"}},m={},c=[{value:"Motivation",id:"motivation",level:2},{value:"A type for storing text",id:"a-type-for-storing-text",level:2},{value:"Initialization",id:"initialization",level:3},{value:"String operations",id:"string-operations",level:2},{value:"User interaction",id:"user-interaction",level:3},{value:"Combining Strings",id:"combining-strings",level:3},{value:"Reading the length",id:"reading-the-length",level:3},{value:"Conversions between numbers and strings",id:"conversions-between-numbers-and-strings",level:3},{value:"Summary",id:"summary",level:2}],d={toc:c};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"strings"},"Strings"),(0,r.kt)("p",null,"In this lesson, you will learn how to use variables that store text.\nAs humans, text is the primary medium through which we interact with computer programs.\nLearning basic text storage and manipulation is crucial to making functional applications that people can and want to use."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"The world runs on text. Variables that can store text turn out to quite useful because of this.\nConsider a program which reads the user's name, then greets them with the number of characters in their name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Program that loads a name"',title:'"\ud83d\udd39',Program:!0,that:!0,loads:!0,a:!0,'name"':!0},'#include <iostream>\n// highlight-next-line\n#include <string>\n\nint main()\n{\n    // highlight-next-line\n    std::string name;\n    std::cout << "Enter your name: ";\n    //highlight-next-line\n    std::cin >> name;\n    std::cout << "Welcome, " << name << "!\\n";\n    std::cout << "Your name has " << name.size() << " characters.\\n";\n}\n')),(0,r.kt)("h2",{id:"a-type-for-storing-text"},"A type for storing text"),(0,r.kt)("p",null,"In previous lessons, we talked about different types of variables, though we focused on those\nthat store numbers. We mentioned the ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," type, which stores\n",(0,r.kt)("strong",{parentName:"p"},"a single character"),"."),(0,r.kt)("p",null,"In programming, text is a series of characters \u2060\u2014 known as a ",(0,r.kt)("strong",{parentName:"p"},"string"),".\nC++ provides us with the type ",(0,r.kt)("a",{parentName:"p",href:"/docs/std/containers/strings/string"},(0,r.kt)("inlineCode",{parentName:"a"},"std::string"))," to store and manipulate strings."),(0,r.kt)("admonition",{title:"Header file",type:"important"},(0,r.kt)("p",{parentName:"admonition"},"You must include the ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," header to use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string")," in your code,\nin the same way as we did earlier with ",(0,r.kt)("inlineCode",{parentName:"p"},"iostream"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <string>\n"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string")," type is used just like any other.\nHere, we make two variables \u2014 one of type ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", and another of type ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int number;\nstd::string text;\n")),(0,r.kt)("h3",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"Assigning the initial value is the same as for variables of other types,\nbut note that text is specified between ",(0,r.kt)("strong",{parentName:"p"},"double quotes"),", not single quotes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Initializing and outputting a string variable"',title:'"\ud83d\udd39',Initializing:!0,and:!0,outputting:!0,a:!0,string:!0,'variable"':!0},'std::string welcome = "Hello, World!";\nstd::cout << welcome;\n')),(0,r.kt)("p",null,"If no value is given, the string will be ",(0,r.kt)("em",{parentName:"p"},"empty"),". The text is length 0,\nand printing it to the console will show nothing."),(0,r.kt)("h2",{id:"string-operations"},"String operations"),(0,r.kt)("h3",{id:"user-interaction"},"User interaction"),(0,r.kt)("p",null,"We can display the strings using ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout")," and load them using ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 A welcome message"',title:'"\ud83d\udd39',A:!0,welcome:!0,'message"':!0},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string name;\n    std::cout << "Enter your name: ";\n    std::cin >> name;\n    std::cout << "Welcome, " << name << "!\\n";\n}\n')),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," takes the input text until it encounters the first whitespace character, such as a space, tab, or newline.\nBecause of this, if we enter our first and last name, only the first name will go into the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," variable.\nTo get the whole line of text, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::getline"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Reading a whole line of text"',title:'"\ud83d\udd39',Reading:!0,a:!0,whole:!0,line:!0,of:!0,'text"':!0},"std::string fullName;\nstd::getline(std::cin, fullName);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"std::getline")," is a ",(0,r.kt)("em",{parentName:"p"},"function")," that takes two arguments - an ",(0,r.kt)("em",{parentName:"p"},"input stream")," to read the line from, and an ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string")," variable to store the line in.\nThis example shows how you can use this function to read a line from ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin"),'.\nSo, this function is "called" by putting the name of the function ',(0,r.kt)("inlineCode",{parentName:"p"},"std::getline"),", then parentheses ",(0,r.kt)("inlineCode",{parentName:"p"},"(...)"),", and inside the parentheses the\narguments we want to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin, fullName"),"."),(0,r.kt)("h3",{id:"combining-strings"},"Combining Strings"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"+=")," operators can be used to ",(0,r.kt)("em",{parentName:"p"},"concatenate")," and ",(0,r.kt)("em",{parentName:"p"},"append")," strings together.\nConsider the following abridged example with an input of ",(0,r.kt)("inlineCode",{parentName:"p"},"Dwayne Johnson"),":"),(0,r.kt)(i.Z,{columns:["2fr","1fr"],mdxType:"Columns"},(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Concatenation and Appending"',title:'"\ud83d\udd39',Concatenation:!0,and:!0,'Appending"':!0},'std::string firstName;\nstd::string lastName;\n\nstd::cin >> firstName;\nstd::cin >> lastName;\n\n// Concatenation\n// highlight-next-line\nstd::string coolName = firstName + " \\"The Rock\\" " + lastName;\nstd::cout << "Your cool name is:\\n" << coolName << "\\n\\n";\n\n// Appending\n// highlight-next-line\ncoolName += " Mk II";\nstd::cout << "Your new name is:\\n" << coolName;\n'))),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result"',title:'"Result"'},'Your cool name is:\nDwayne "The Rock" Johnson\n\nYour new name is:\nDwayne "The Rock" Johnson Mk II\n')))),(0,r.kt)("p",null,"Notice how ",(0,r.kt)("inlineCode",{parentName:"p"},"coolName")," is the result of ",(0,r.kt)("em",{parentName:"p"},"concatenating")," three strings - ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"The Rock"'),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName"),".\nThen, see how we modify ",(0,r.kt)("inlineCode",{parentName:"p"},"coolName")," by ",(0,r.kt)("em",{parentName:"p"},"appending")," ",(0,r.kt)("inlineCode",{parentName:"p"},'" Mk II"')," to it."),(0,r.kt)("h3",{id:"reading-the-length"},"Reading the length"),(0,r.kt)("p",null,"To check how many characters are in a string we use the so-called ",(0,r.kt)("em",{parentName:"p"},"method")," ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),".\nWe'll talk more about functions and methods later in the course, as they are a very important concept."),(0,r.kt)("p",null,"Let's see how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," method in practice. Consider the following example with an input of ",(0,r.kt)("inlineCode",{parentName:"p"},"Johnny"),":"),(0,r.kt)(i.Z,{columns:["2fr","1fr"],mdxType:"Columns"},(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Program that counts the size of a name"',title:'"\ud83d\udd39',Program:!0,that:!0,counts:!0,the:!0,size:!0,of:!0,a:!0,'name"':!0},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string name;\n    std::cout << "Enter your name: ";\n    std::cin >> name;\n\n    std::cout << "\\nWelcome, " << name << "!\\n";\n    // highlight-next-line\n    std::cout << "Your name has " << name.size() << " characters.\\n";\n}\n'))),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Result"',title:'"Result"'},"Welcome, Johnny!\nYour name has 6 characters.\n")))),(0,r.kt)("p",null,"We call the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," method by doing ",(0,r.kt)("inlineCode",{parentName:"p"},"name.size()"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},".")," indicates that we are accessing something on\nour ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," variable. ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," is the name of the method we are accessing. The ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," ",(0,r.kt)("em",{parentName:"p"},"calls")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," method.\nThis gives back to us the total number of characters in the string. These terms aren't crucial to remember now,\nbut you will see them later in the Functions and Methods lessons; just remember how to use it."),(0,r.kt)("p",null,"Just to reiterate, we specify the variable (",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"), then we write ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," after the period and then ",(0,r.kt)("strong",{parentName:"p"},"empty")," round brackets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\ud83d\udd39 Calling the size method"',title:'"\ud83d\udd39',Calling:!0,the:!0,size:!0,'method"':!0},"name.size()\n")),(0,r.kt)("h3",{id:"conversions-between-numbers-and-strings"},"Conversions between numbers and strings"),(0,r.kt)("p",null,"Numbers and strings cannot be freely converted to each other without a specialized ",(0,r.kt)("em",{parentName:"p"},"function")," that does it for us.\nThis is because number types and string types in C++ are disinctly ",(0,r.kt)("strong",{parentName:"p"},"different"),", and not generally compatible.\nWhile it may be annoying, this is actually very important for making bug-free code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'53\n"53"\n')),(0,r.kt)("p",null,"The first value is the arithmetic number ",(0,r.kt)("inlineCode",{parentName:"p"},"53"),". It represents a value that we can perform mathematical operations on.\nThe second value is text consisting of the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"'5'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'3'"),". We can't perform math on strings; rather,\nthe string operations we can perform are concatenations."),(0,r.kt)("p",null,"These are the incorrect ways of trying to convert between strings and numbers, all causing compilation errors:"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"bad1",label:"\u274c Incorrect",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Assigning a number variable into a string"',title:'"\u274c',Assigning:!0,a:!0,number:!0,variable:!0,into:!0,'string"':!0},"int number = 53;\n// error-next-line\nstd::string str = number; // Error\n"))),(0,r.kt)(o.Z,{value:"bad2",label:"\u274c Incorrect",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Assigning an integer literal into a string"',title:'"\u274c',Assigning:!0,an:!0,integer:!0,literal:!0,into:!0,a:!0,'string"':!0},"// error-next-line\nstd::string str = 53; // Error\n"))),(0,r.kt)(o.Z,{value:"bad3",label:"\u274c Incorrect",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Assigning an string into a number"',title:'"\u274c',Assigning:!0,an:!0,string:!0,into:!0,a:!0,'number"':!0},'std::string str = "53";\n// error-next-line\nint number = str; // Error\n'))),(0,r.kt)(o.Z,{value:"bad4",label:"\u274c Incorrect",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u274c Assigning an string literal into a number"',title:'"\u274c',Assigning:!0,an:!0,string:!0,literal:!0,into:!0,a:!0,'number"':!0},'// error-next-line\nint number = "53"; // Error\n')))),(0,r.kt)("p",null,"To convert from a number type (like ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),") to string, we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"std::to_string")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="\u2714 Converting a number to a text"',title:'"\u2714',Converting:!0,a:!0,number:!0,to:!0,'text"':!0},"int number = 53;\nstd::string numberInStr = std::to_string(number);\n")),(0,r.kt)("p",null,"In the same way, if we have a number stored inside a string, we can\nconvert it to an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"std::stoi")," (",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"s"),"tring ",(0,r.kt)("strong",{parentName:"em"},"to")," ",(0,r.kt)("strong",{parentName:"em"},"i"),"nt"),") and\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," type with ",(0,r.kt)("inlineCode",{parentName:"p"},"std::stof")," (",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"s"),"tring ",(0,r.kt)("strong",{parentName:"em"},"to")," ",(0,r.kt)("strong",{parentName:"em"},"f"),"loat"),"):"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"stoi",label:"\ud83d\udd35 std::stoi",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Convert std::string to int"',title:'"Convert',"std::string":!0,to:!0,'int"':!0},'std::string numberInStr = "53";\nint number = std::stoi(numberInStr);\n'))),(0,r.kt)(o.Z,{value:"stof",label:"\ud83d\udfe3 std::stof",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Convert std::string to float"',title:'"Convert',"std::string":!0,to:!0,'float"':!0},'std::string numberInStr = "53.5"; // do not put `f` at the end in the text\nfloat number = std::stof(numberInStr);\n')))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In this lesson, we learned about the ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string")," type, which is a type that represents a sequence of characters."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Head over to sublessons to find out more about ",(0,r.kt)("strong",{parentName:"p"},"strings"),":"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./examples"},"\ud83d\udca1 Examples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./common-problems"},"\ud83d\udc1e Common problems")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./exercises"},"\ud83d\udcda Exercises")))))}g.isMDXComponent=!0},42677:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={toc:[]};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This section requires improvement. You can help by editing this doc page.")))}s.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const i="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),i=n(86010),s=n(12466),o=n(76775),l=n(91980),p=n(67392),u=n(50012);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=c(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,p]=g({queryString:n,groupId:a}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),b=(()=>{const e=l??m;return d({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),h(e)}),[p,h,i]),tabValues:i}}var b=n(72389);const k="tabList__CuJ",f="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),c=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==o&&(m(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:c},s,{className:(0,i.Z)("tabs__item",f,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},22307:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(87462),r=n(67294);const i="columns_Terr";function s(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:i,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}s.isMDXComponent=!0}}]);