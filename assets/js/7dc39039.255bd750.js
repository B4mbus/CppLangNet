"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[21047],{14064:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),l=(a(67294),a(3905));const s={toc:[]};function o(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Aspects and semantics that are ",(0,l.kt)("strong",{parentName:"p"},"implementation-defined")," are not guaranteed by\nthe standard in any way, rather they are left out to the implementation (compiler vendor standard library, most of the times).\nFor example, most mathematical functions incur some ",(0,l.kt)("strong",{parentName:"p"},"implementation-defined")," behaviour."))}o.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),l=a(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(s,o),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>x});var n=a(87462),l=a(67294),s=a(86010),o=a(12466),p=a(76775),r=a(91980),i=a(67392),c=a(50012);function d(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}function m(e){const{values:t,children:a}=e;return(0,l.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:a}=e;const n=(0,p.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,r._X)(s),(0,l.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,s=m(e),[o,p]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[r,i]=k({queryString:a,groupId:n}),[d,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(a);return[n,(0,l.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:n}),y=(()=>{const e=r??d;return u({value:e,tabValues:s})?e:null})();(0,l.useLayoutEffect)((()=>{y&&p(y)}),[y]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);p(e),i(e),h(e)}),[i,h,s]),tabValues:s}}var y=a(72389);const f="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:p,selectValue:r,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=i[a].value;n!==p&&(d(t),r(n))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},t)},i.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:p===t?0:-1,"aria-selected":p===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:m},o,{className:(0,s.Z)("tabs__item",g,o?.className,{"tabs__item--active":p===t})}),a??t)})))}function w(e){let{lazy:t,children:a,selectedValue:n}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=h(e);return l.createElement("div",{className:(0,s.Z)("tabs-container",f)},l.createElement(b,(0,n.Z)({},e,t)),l.createElement(w,(0,n.Z)({},e,t)))}function x(e){const t=(0,y.Z)();return l.createElement(v,(0,n.Z)({key:String(t)},e))}},98839:(e,t,a)=>{a.d(t,{z:()=>n});const n=a(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(87462),l=a(67294);const s="columns_Terr";function o(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const a={...e};return delete a.columns,delete a.spacing,delete a.breakAt,l.createElement("div",(0,n.Z)({className:s,"data-break-at":e.breakAt??"md"},a,{style:t}),e.children)}o.isMDXComponent=!0},99801:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),l=a(74866),s=a(85162),o=a(99372),p=a(72412);const r={};function i(e){const t=e.content||{};return n.createElement(l.Z,null,Object.entries(t).map(((e,t)=>{let[a,i]=e;return i.value||i.simplified||i.detailed?n.createElement(s.Z,{value:a,label:o.gJ.get(a),default:i.default||0==t},i.simplified?n.createElement(n.Fragment,null,n.createElement(l.Z,{groupId:"view_mode",className:r.smallTabs},n.createElement(s.Z,{value:"simplified",label:"Simplified",default:!0},(0,p.Z)(i.simplified)),n.createElement(s.Z,{value:"detailed",label:"Detailed"},(0,p.Z)(i.detailed)))):i.value):n.createElement(s.Z,{value:a,label:o.gJ.get(a),default:0==t},(0,p.Z)(i))})))}},55059:(e,t,a)=>{a.d(t,{mN:()=>c,ZP:()=>i});var n=a(67294),l=a(72412);const s={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var o=a(98839);const p={None:{Order:0,ShortName:"",FullName:"",Style:s.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:s.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:s.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:s.accessPrivate}},r=e=>e.none?p.None:e.pub||e.public?p.Public:e.prot||e.protected?p.Protected:e.priv||e.private?p.Private:p.Public;function i(e){return(t=>{if(0===t.length)return null;const a=t.sort(((e,t)=>r(e).Order<r(t).Order));return n.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:s.symbolTable},n.createElement("tbody",null,a))})(n.Children.toArray(e.children))}function c(e){n.useContext(o.z);let t=(0,l.Z)(e.name),a=null;e.desc?a=e.desc:e.children&&(a=e.children);const p=e.linkName||e.autoLink;!e.noLink&&p&&(t=n.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const i=(e,t,a)=>!0===e?n.createElement("span",{className:s[t]},a):null;return n.createElement("tr",null,!e.none&&n.createElement("td",{className:s.symbolProp},(e=>{const t=r(e);return n.createElement("span",{className:t.Style},t.ShortName)})(e),i(e.static,"modStatic","static"),i(e.constexpr,"modConstexpr","constexpr"),i(e.const,"modConst","const"),i(e.volatile,"modVolatile","volatile"),i(e.virtual,"modVirtual","virtual")),n.createElement("td",{className:s.symbolName},t),n.createElement("td",{className:s.symbolDesc},(0,l.Z)(a)))}c.isMDXComponent=!0,i.isMDXComponent=!0,i.Symbol=c},18510:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),l=a(44996),s=a(34386),o=a(72412);const p="TooltipContent_Lvru",r="TooltipTitle_ukF2";function i(e){let{url:t,title:a,maxWidth:i,children:c}=e;let d=i||"clamp(250px, 25vw, 800px)";"string"==typeof d&&d.endsWith("vw")&&(d=`clamp(250px, ${d}, 800px)`);const m="function"==typeof a?n.createElement(a):a,u=(t||"").startsWith("/")?(0,l.Z)(t):t,k=t?n.createElement("a",{href:u,target:"_blank",rel:"noreferrer"},c):c;return n.createElement(s.Z,{componentsProps:{tooltip:{style:{maxWidth:d}}},title:n.createElement("span",{className:r},(0,o.Z)(m)),placement:"top",arrow:!0},n.createElement("span",{className:p},k))}i.isMDXComponent=!0},99372:(e,t,a)=>{a.d(t,{gJ:()=>c,eH:()=>k,U6:()=>m,OS:()=>u});var n=a(67294),l=a(95999);const s="markedText_c6kK",o="since_c1Q3",p="until_jXK6",r="removed_A_Kf",i="versionNumber_BiUX",c=new Map;function d(e){let{children:t,className:a}=e;return n.createElement("span",{className:s+(a?" "+a:"")},t)}function m(e){let{children:t,v:a}=e;return n.createElement(d,{className:o},t,"\xa0",n.createElement("span",{className:i},n.createElement("small",null,"(",c.get(`since-${a}`),")")))}function u(e){let{children:t,v:a}=e;return n.createElement(d,{className:p},t,"\xa0",n.createElement("span",{className:i},n.createElement("small",null,"(",c.get(`until-${a}`),")")))}function k(e){let{children:t,v:a}=e;return n.createElement(d,{className:r},t,"\xa0",n.createElement("span",{className:i},n.createElement("small",null,"(",c.get(`removed-${a}`),")")))}c.set("cpp98","C++98"),c.set("cpp03","C++03"),c.set("cpp11","C++11"),c.set("cpp14","C++14"),c.set("cpp17","C++17"),c.set("cpp20","C++20"),c.set("cpp23","C++23"),c.set("deprecated-",n.createElement(l.Z,null,"deprecated")),c.set("deprecated-cpp98",n.createElement(l.Z,null,"deprecated in C++98")),c.set("deprecated-cpp03",n.createElement(l.Z,null,"deprecated in C++03")),c.set("deprecated-cpp11",n.createElement(l.Z,null,"deprecated in C++11")),c.set("deprecated-cpp14",n.createElement(l.Z,null,"deprecated in C++14")),c.set("deprecated-cpp17",n.createElement(l.Z,null,"deprecated in C++17")),c.set("deprecated-cpp20",n.createElement(l.Z,null,"deprecated in C++20")),c.set("deprecated-cpp23",n.createElement(l.Z,null,"deprecated in C++23")),c.set("until-cpp98",n.createElement(l.Z,null,"until C++98")),c.set("until-cpp03",n.createElement(l.Z,null,"until C++03")),c.set("until-cpp11",n.createElement(l.Z,null,"until C++11")),c.set("until-cpp14",n.createElement(l.Z,null,"until C++14")),c.set("until-cpp17",n.createElement(l.Z,null,"until C++17")),c.set("until-cpp20",n.createElement(l.Z,null,"until C++20")),c.set("until-cpp23",n.createElement(l.Z,null,"until C++23")),c.set("since-cpp98",n.createElement(l.Z,null,"since C++98")),c.set("since-cpp03",n.createElement(l.Z,null,"since C++03")),c.set("since-cpp11",n.createElement(l.Z,null,"since C++11")),c.set("since-cpp14",n.createElement(l.Z,null,"since C++14")),c.set("since-cpp17",n.createElement(l.Z,null,"since C++17")),c.set("since-cpp20",n.createElement(l.Z,null,"since C++20")),c.set("since-cpp23",n.createElement(l.Z,null,"since C++23")),c.set("removed-",n.createElement(l.Z,null,"deleted")),c.set("removed-cpp98",n.createElement(l.Z,null,"removed in C++98")),c.set("removed-cpp03",n.createElement(l.Z,null,"removed in C++03")),c.set("removed-cpp11",n.createElement(l.Z,null,"removed in C++11")),c.set("removed-cpp14",n.createElement(l.Z,null,"removed in C++14")),c.set("removed-cpp17",n.createElement(l.Z,null,"removed in C++17")),c.set("removed-cpp20",n.createElement(l.Z,null,"removed in C++20")),c.set("removed-cpp23",n.createElement(l.Z,null,"removed in C++23"))},72412:(e,t,a)=>{function n(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}a.d(t,{Z:()=>n})},90601:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11",id:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11",title:"overload-1-since-cpp11",description:"noexcept specification:",source:"@site/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11.mdx",sourceDirName:"std/algo/ordinary/_codes/swap/noexcept-specification",slug:"/std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-1-since-cpp11.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#"},"noexcept")," specification:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"noexcept(\n    std::is_nothrow_move_constructible<T>::value &&\n    std::is_nothrow_move_assignable<T>::value\n)\n")))}d.isMDXComponent=!0},60313:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17",id:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17",title:"overload-2-since-cpp17",description:"noexcept specification:",source:"@site/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/swap/noexcept-specification",slug:"/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-since-cpp17.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#"},"noexcept")," specification:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"noexcept(std::is_nothrow_swappable_v<T2>)\n")))}d.isMDXComponent=!0},17478:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17",id:"std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17",title:"overload-2-until-cpp17",description:"noexcept specification:",source:"@site/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17.mdx",sourceDirName:"std/algo/ordinary/_codes/swap/noexcept-specification",slug:"/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/noexcept-specification/overload-2-until-cpp17.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#"},"noexcept")," specification:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"noexcept(\n  noexcept(swap(*a, *b))\n)\n")),(0,l.kt)("p",null,"The lookup for the identifier swap in the exception specification finds this function template in addition to anything found by the usual lookup rules, making the exception specification equivalent to C++17 ",(0,l.kt)("a",{parentName:"p",href:"#"},(0,l.kt)("inlineCode",{parentName:"a"},"std::is_nothrow_swappable")),"."))}d.isMDXComponent=!0},15054:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/since-cpp11",id:"std/algo/ordinary/_codes/swap/since-cpp11",title:"since-cpp11",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/swap/since-cpp11.mdx",sourceDirName:"std/algo/ordinary/_codes/swap",slug:"/std/algo/ordinary/_codes/swap/since-cpp11",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/since-cpp11",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/since-cpp11.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class T >\nvoid swap( T& a, T& b ) noexcept(/* see below */);\n\n// (2)\ntemplate< class T2, std::size_t N >\nvoid swap( T2 (&a)[N], T2 (&b)[N] ) noexcept(/* see below */);\n")))}d.isMDXComponent=!0},91767:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/since-cpp20",id:"std/algo/ordinary/_codes/swap/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/swap/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/swap",slug:"/std/algo/ordinary/_codes/swap/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class T >\nconstexpr void swap( T& a, T& b ) noexcept(/* see below */);\n\n// (2)\ntemplate< class T2, std::size_t N >\nconstexpr void swap( T2 (&a)[N], T2 (&b)[N] ) noexcept(/* see below */);\n")))}d.isMDXComponent=!0},40922:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=a(87462),l=(a(67294),a(3905));const s={},o=void 0,p={unversionedId:"std/algo/ordinary/_codes/swap/until-cpp11",id:"std/algo/ordinary/_codes/swap/until-cpp11",title:"until-cpp11",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/swap/until-cpp11.mdx",sourceDirName:"std/algo/ordinary/_codes/swap",slug:"/std/algo/ordinary/_codes/swap/until-cpp11",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/swap/until-cpp11",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/swap/until-cpp11.mdx",tags:[],version:"current",frontMatter:{}},r={},i=[],c={toc:i};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class T >\nvoid swap( T& a, T& b );\n\n// (2)\ntemplate< class T2, std::size_t N >\nvoid swap( T2 (&a)[N], T2 (&b)[N] );\n")))}d.isMDXComponent=!0},84263:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>b,default:()=>N,frontMatter:()=>g,metadata:()=>w,toc:()=>x});var n=a(87462),l=a(67294),s=a(3905),o=a(55059),p=a(22307),r=a(99801),i=a(18510),c=a(99372),d=a(14064),m=a(40922),u=a(15054),k=a(91767),h=a(90601),y=a(60313),f=a(17478);const g={title:"swap algorithm",sidebar_label:"swap(  )",description:"swap algorithm C++ documentation",hide_title:!0,tags:["algorithm","swap"],cppreference_origin_rel:"w/cpp/algorithm/swap"},b=void 0,w={unversionedId:"std/algo/ordinary/swap",id:"std/algo/ordinary/swap",title:"swap algorithm",description:"swap algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/swap.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/swap",permalink:"/CppLangNet/docs/std/algo/ordinary/swap",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/swap.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"swap",permalink:"/CppLangNet/docs/tags/swap"}],version:"current",frontMatter:{title:"swap algorithm",sidebar_label:"swap(  )",description:"swap algorithm C++ documentation",hide_title:!0,tags:["algorithm","swap"],cppreference_origin_rel:"w/cpp/algorithm/swap"},sidebar:"defaultSidebar",previous:{title:"ranges::unique_copy(  )",permalink:"/CppLangNet/docs/std/algo/ranges/unique_copy"},next:{title:"copy(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/copy"}},v={},x=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Specializations",id:"specializations",level:3},{value:"Examples",id:"examples",level:3}],S={toc:x};function N(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},S,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stdswap-algorithm"},"std::swap() algorithm"),(0,s.kt)(r.Z,{content:{"since-cpp20":(0,s.kt)(k.default,{mdxType:"Signature_SinceCpp20"}),"since-cpp11":(0,s.kt)(u.default,{mdxType:"Signature_SinceCpp11"}),"until-cpp11":(0,s.kt)(m.default,{mdxType:"Signature_UntilCpp11"})},mdxType:"SwitchView"}),(0,s.kt)("p",null,"Exchanges the given values."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")," Swaps the values ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,s.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"},"This overload does not participate in overload resolution unless ",(0,s.kt)("code",null,"std::is_move_constructible_v<T> && std::is_move_assignable_v<T>")," is ",(0,s.kt)("code",null,"true"),"."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")," Swaps the arrays ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"b"),". In effect calls ",(0,s.kt)("inlineCode",{parentName:"p"},"std::swap_ranges(a, a + N, b)"),"."),(0,s.kt)("admonition",{parentName:"li",title:"Overload Resolution",type:"important"},(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"},"This overload does not participate in overload resolution unless ",(0,s.kt)("code",null,"std::is_swappable_v<T2>")," is ",(0,s.kt)("code",null,"true"),".")))),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)(o.ZP,{mdxType:"SymbolTable"},(0,s.kt)(o.mN,{none:!0,noLink:!0,name:(0,s.kt)(l.Fragment,null," ",(0,s.kt)("code",null,"a")," ",(0,s.kt)("br",null)," ",(0,s.kt)("code",null,"b")," "),mdxType:"Symbol"},"The values to be swapped.")),(0,s.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,s.kt)(o.ZP,{mdxType:"SymbolTable"},(0,s.kt)(o.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"T"),mdxType:"Symbol"},(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," ",(0,s.kt)("a",{href:"/docs/named_req/MoveConstructible"},"MoveConstructible"),", ",(0,s.kt)("a",{href:"/docs/named_req/MoveAssignable"},"MoveAssignable")," ")," ",(0,s.kt)("br",null),(0,s.kt)(c.OS,{v:"cpp11",mdxType:"Until"}," ",(0,s.kt)("a",{href:"/docs/named_req/CopyConstructible"},"CopyConstructible"),", ",(0,s.kt)("a",{href:"/docs/named_req/CopyAssignable"},"CopyAssignable")," ")),(0,s.kt)(o.mN,{none:!0,noLink:!0,name:(0,s.kt)("code",null,"T2"),mdxType:"Symbol"},(0,s.kt)("a",{href:"/docs/named_req/Swappable"},"Swappable"))),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"(none)")),(0,s.kt)("h3",{id:"complexity"},"Complexity"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"(1)")," - Constant."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"(1)")," - Linear in ",(0,s.kt)("inlineCode",{parentName:"li"},"N"),".")),(0,s.kt)("h3",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,"Before C++11 no exceptions were thrown."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(1)")),(0,s.kt)(r.Z,{content:{"since-cpp11":(0,s.kt)(h.default,{mdxType:"NoexceptSpecification_Overload1_SinceCpp11"})},mdxType:"SwitchView"})),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(2)")),(0,s.kt)(r.Z,{content:{"since-cpp17":(0,s.kt)(y.default,{mdxType:"NoexceptSpecification_Overload2_SinceCpp17"}),"until-cpp17":(0,s.kt)(f.default,{mdxType:"NoexceptSpecification_Overload2_UntilCpp17"})},mdxType:"SwitchView"}))),(0,s.kt)("p",null,"The overloads with a template parameter named ",(0,s.kt)("inlineCode",{parentName:"p"},"ExecutionPolicy")," report errors as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If execution of a function invoked as part of the algorithm throws an exception and ",(0,s.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy")," is one of the ",(0,s.kt)("a",{parentName:"li",href:"#"},(0,s.kt)("strong",{parentName:"a"},"standard policies")),", ",(0,s.kt)("a",{parentName:"li",href:"#"},(0,s.kt)("inlineCode",{parentName:"a"},"std::terminate"))," is called.\nFor none other ",(0,s.kt)("inlineCode",{parentName:"li"},"ExecutionPolicy"),", the behavior is ",(0,s.kt)(i.Z,{title:(0,s.kt)(d.ZP,{mdxType:"Term_ImplementationDefined"}),mdxType:"Tooltip"},(0,s.kt)("strong",{parentName:"li"},"implementation-defined")),"."),(0,s.kt)("li",{parentName:"ul"},"If the algorithm fails to allocate memory, ",(0,s.kt)("inlineCode",{parentName:"li"},"std::bad_alloc")," is thrown.")),(0,s.kt)("h3",{id:"specializations"},"Specializations"),(0,s.kt)(r.Z,{content:{"until-cpp20":(0,s.kt)(l.Fragment,null,"std::swap may be specialized in namespace std for program-defined types, but such specializations are not found by ",(0,s.kt)("a",{href:"#"},"ADL")," (the namespace std is not the associated namespace for the program-defined type).")},mdxType:"SwitchView"}),(0,s.kt)("p",null,"The expected way to make a program-defined type swappable is to provide a non-member function swap in the same namespace as the type: see ",(0,s.kt)("a",{parentName:"p",href:"/docs/named_req/Swappable"},"Swappable")," for details."),(0,s.kt)("p",null,"The following overloads are already provided by the standard library:"),(0,s.kt)(o.ZP,{mdxType:"SymbolTable"},(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::pair)")),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::pair")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::tuple)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::tuple")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::shader_ptr)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::shader_ptr")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::weak_ptr)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::weak_ptr")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unique_ptr)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unique_ptr")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::function)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::function")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::basic_string)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_string")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::array)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::array")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::deque)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::deque")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::forward_list)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::forward_list")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::list)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::list")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::vector)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::vector")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::map)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::map")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::multimap)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::multimap")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::set)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::set")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(l.Fragment,null," std::swap",(0,s.kt)("small",null,"(std::multiset)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::multiset")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unordered_map)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unordered_map")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unordered_multimap)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unordered_multimap")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unordered_set)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unordered_set")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unordered_multiset)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unordered_multiset")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::queue)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::queue")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::priority_queue)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::priority_queue")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::stack)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::stack")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::valarray)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::valarray")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_stringbuf)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_stringbuf")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_istringstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_istringstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_ostringstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_ostringstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_stringstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_stringstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_filebuf)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_filebuf")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_ifstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_ifstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_ofstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_ofstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_fstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_fstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp20",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_syncbuf)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_syncbuf")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_spanbuf)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_spanbuf")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_ispanstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_ispanstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_ospanstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_ospanstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_spanstream)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_spanstream")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_regex)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_regex")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::match_results)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::match_results")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::thread)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::thread")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::unique_lock)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::unique_lock")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp14",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::shared_lock)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::shared_lock")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::promise)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::promise")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp11",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::packaged_task)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::packaged_task")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::optional)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::optional")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::any)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::any")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::variant)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::variant")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"}," std::swap",(0,s.kt)("small",null,"(std::basic_stacktrace)")," "),mdxType:"Symbol"},"Specializes the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::basic_stacktrace")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp17",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::filesystem::path)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::filesystem::path")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::expected)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::expected")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp20",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::jthread)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::jthread")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp23",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::move_only_function)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::move_only_function")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp20",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::stop_source)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::stop_source")),(0,s.kt)(o.mN,{none:!0,name:(0,s.kt)(c.U6,{v:"cpp20",mdxType:"Since"}," swap",(0,s.kt)("small",null,"(std::stop_token)")," "),mdxType:"Symbol"},"Specializes (hidden friend) the ",(0,s.kt)("a",{href:"#"},(0,s.kt)("code",null,"std::swap"))," algorithm for ",(0,s.kt)("code",null,"std::stop_token"))),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)(p.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <algorithm>\n#include <iostream>\n\nnamespace Ns\n{\n    class A\n    {\n        int id {};\n\n        friend void swap(A& lhs, A& rhs)\n        {\n            std::cout << \"swap(\" << lhs << \", \" << rhs << \")\\n\";\n            std::swap(lhs.id, rhs.id);\n        }\n\n        friend std::ostream& operator<<(std::ostream& os, A const& a)\n        {\n            return os << \"A::id=\" << a.id;\n        }\n\n    public:\n        A(int i) : id {i} {}\n        A(A const&) = delete;\n        A& operator = (A const&) = delete;\n    };\n}\n\nint main()\n{\n    int a = 5, b = 3;\n    std::cout << a << ' ' << b << '\\n';\n    std::swap(a, b);\n    std::cout << a << ' ' << b << '\\n';\n\n    Ns::A p {6}, q {9};\n    std::cout << p << ' ' << q << '\\n';\n//  std::swap(p, q); // error, type requirements are not satisfied\n    swap(p, q);      // OK, ADL finds the appropriate friend `swap`\n    std::cout << p << ' ' << q << '\\n';\n}\n"))),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"5 3\n3 5\nA::id=6 A::id=9\nswap(A::id=6, A::id=9)\nA::id=9 A::id=6\n")))))}N.isMDXComponent=!0}}]);