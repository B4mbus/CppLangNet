"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[30678],{98088:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("b",null,"Undefined behaviour")," is a property of a program that's incorrect, but likely compiles. It is incorrect in a way, that the error is only invoked in certain conditions at runtime.",(0,r.kt)("p",null,"Common cases include: ",(0,r.kt)("strong",{parentName:"p"},"out of bounds access"),", ",(0,r.kt)("strong",{parentName:"p"},"reading uninitialized objects"),", ",(0,r.kt)("strong",{parentName:"p"},"dangling pointers/references")," or ",(0,r.kt)("strong",{parentName:"p"},"signed overflow"),"."))}i.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),r=n(67294),l=n(86010),i=n(12466),s=n(76775),o=n(91980),c=n(67392),p=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,c]=f({queryString:n,groupId:a}),[u,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=o??u;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),k(e)}),[c,k,l]),tabValues:l}}var h=n(72389);const g="tabList__CuJ",v="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==s&&(u(t),o(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",v,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function _(e){const t=k(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",g)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function N(e){const t=(0,h.Z)();return r.createElement(_,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(87462),r=n(67294);const l="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,r.createElement("div",(0,a.Z)({className:l,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(74866),l=n(85162),i=n(99372),s=n(72412);const o={};function c(e){const t=e.content||{};return a.createElement(r.Z,null,Object.entries(t).map(((e,t)=>{let[n,c]=e;return c.value||c.simplified||c.detailed?a.createElement(l.Z,{value:n,label:i.gJ.get(n),default:c.default||0==t},c.simplified?a.createElement(a.Fragment,null,a.createElement(r.Z,{groupId:"view_mode",className:o.smallTabs},a.createElement(l.Z,{value:"simplified",label:"Simplified",default:!0},(0,s.Z)(c.simplified)),a.createElement(l.Z,{value:"detailed",label:"Detailed"},(0,s.Z)(c.detailed)))):c.value):a.createElement(l.Z,{value:n,label:i.gJ.get(n),default:0==t},(0,s.Z)(c))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>p,ZP:()=>c});var a=n(67294),r=n(72412);const l={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var i=n(98839);const s={None:{Order:0,ShortName:"",FullName:"",Style:l.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:l.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:l.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:l.accessPrivate}},o=e=>e.none?s.None:e.pub||e.public?s.Public:e.prot||e.protected?s.Protected:e.priv||e.private?s.Private:s.Public;function c(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>o(e).Order<o(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:l.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function p(e){a.useContext(i.z);let t=(0,r.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const s=e.linkName||e.autoLink;!e.noLink&&s&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const c=(e,t,n)=>!0===e?a.createElement("span",{className:l[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:l.symbolProp},(e=>{const t=o(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),c(e.static,"modStatic","static"),c(e.constexpr,"modConstexpr","constexpr"),c(e.const,"modConst","const"),c(e.volatile,"modVolatile","volatile"),c(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:l.symbolName},t),a.createElement("td",{className:l.symbolDesc},(0,r.Z)(n)))}p.isMDXComponent=!0,c.isMDXComponent=!0,c.Symbol=p},18510:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),r=n(44996),l=n(34386),i=n(72412);const s="TooltipContent_Lvru",o="TooltipTitle_ukF2";function c(e){let{url:t,title:n,maxWidth:c,children:p}=e;let u=c||"clamp(250px, 25vw, 800px)";"string"==typeof u&&u.endsWith("vw")&&(u=`clamp(250px, ${u}, 800px)`);const d="function"==typeof n?a.createElement(n):n,m=(t||"").startsWith("/")?(0,r.Z)(t):t,f=t?a.createElement("a",{href:m,target:"_blank",rel:"noreferrer"},p):p;return a.createElement(l.Z,{componentsProps:{tooltip:{style:{maxWidth:u}}},title:a.createElement("span",{className:o},(0,i.Z)(d)),placement:"top",arrow:!0},a.createElement("span",{className:s},f))}c.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>p,eH:()=>f,U6:()=>d,OS:()=>m});var a=n(67294),r=n(95999);const l="markedText_c6kK",i="since_c1Q3",s="until_jXK6",o="removed_A_Kf",c="versionNumber_BiUX",p=new Map;function u(e){let{children:t,className:n}=e;return a.createElement("span",{className:l+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(u,{className:i},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(u,{className:s},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return a.createElement(u,{className:o},t,"\xa0",a.createElement("span",{className:c},a.createElement("small",null,"(",p.get(`removed-${n}`),")")))}p.set("cpp98","C++98"),p.set("cpp03","C++03"),p.set("cpp11","C++11"),p.set("cpp14","C++14"),p.set("cpp17","C++17"),p.set("cpp20","C++20"),p.set("cpp23","C++23"),p.set("deprecated-",a.createElement(r.Z,null,"deprecated")),p.set("deprecated-cpp98",a.createElement(r.Z,null,"deprecated in C++98")),p.set("deprecated-cpp03",a.createElement(r.Z,null,"deprecated in C++03")),p.set("deprecated-cpp11",a.createElement(r.Z,null,"deprecated in C++11")),p.set("deprecated-cpp14",a.createElement(r.Z,null,"deprecated in C++14")),p.set("deprecated-cpp17",a.createElement(r.Z,null,"deprecated in C++17")),p.set("deprecated-cpp20",a.createElement(r.Z,null,"deprecated in C++20")),p.set("deprecated-cpp23",a.createElement(r.Z,null,"deprecated in C++23")),p.set("until-cpp98",a.createElement(r.Z,null,"until C++98")),p.set("until-cpp03",a.createElement(r.Z,null,"until C++03")),p.set("until-cpp11",a.createElement(r.Z,null,"until C++11")),p.set("until-cpp14",a.createElement(r.Z,null,"until C++14")),p.set("until-cpp17",a.createElement(r.Z,null,"until C++17")),p.set("until-cpp20",a.createElement(r.Z,null,"until C++20")),p.set("until-cpp23",a.createElement(r.Z,null,"until C++23")),p.set("since-cpp98",a.createElement(r.Z,null,"since C++98")),p.set("since-cpp03",a.createElement(r.Z,null,"since C++03")),p.set("since-cpp11",a.createElement(r.Z,null,"since C++11")),p.set("since-cpp14",a.createElement(r.Z,null,"since C++14")),p.set("since-cpp17",a.createElement(r.Z,null,"since C++17")),p.set("since-cpp20",a.createElement(r.Z,null,"since C++20")),p.set("since-cpp23",a.createElement(r.Z,null,"since C++23")),p.set("removed-",a.createElement(r.Z,null,"deleted")),p.set("removed-cpp98",a.createElement(r.Z,null,"removed in C++98")),p.set("removed-cpp03",a.createElement(r.Z,null,"removed in C++03")),p.set("removed-cpp11",a.createElement(r.Z,null,"removed in C++11")),p.set("removed-cpp14",a.createElement(r.Z,null,"removed in C++14")),p.set("removed-cpp17",a.createElement(r.Z,null,"removed in C++17")),p.set("removed-cpp20",a.createElement(r.Z,null,"removed in C++20")),p.set("removed-cpp23",a.createElement(r.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},72883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,s={unversionedId:"std/algo/ordinary/_codes/partial_sum/since-cpp20",id:"std/algo/ordinary/_codes/partial_sum/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/partial_sum/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/partial_sum",slug:"/std/algo/ordinary/_codes/partial_sum/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/partial_sum/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/partial_sum/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt, class OutputIt >\nconstexpr OutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first );\n\n// (2)\ntemplate< class InputIt, class OutputIt, class BinaryOperation >\nconstexpr OutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first, BinaryOperation op );\n")))}u.isMDXComponent=!0},62357:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,s={unversionedId:"std/algo/ordinary/_codes/partial_sum/until-cpp20",id:"std/algo/ordinary/_codes/partial_sum/until-cpp20",title:"until-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/partial_sum/until-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/partial_sum",slug:"/std/algo/ordinary/_codes/partial_sum/until-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/partial_sum/until-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/partial_sum/until-cpp20.mdx",tags:[],version:"current",frontMatter:{}},o={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt, class OutputIt >\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first );\n\n// (2)\ntemplate< class InputIt, class OutputIt, class BinaryOperation >\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first, BinaryOperation op );\n")))}u.isMDXComponent=!0},69823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>f,default:()=>_,frontMatter:()=>m,metadata:()=>k,toc:()=>g});var a=n(87462),r=n(67294),l=n(3905),i=n(55059),s=n(22307),o=n(99801),c=n(18510),p=n(99372),u=n(98088),d=n(72883);n(62357);const m={title:"partial_sum algorithm",sidebar_label:"partial_sum(  )",description:"partial_sum algorithm C++ documentation",hide_title:!0,tags:["algorithm","partial_sum","reduce","fold"],cppreference_origin_rel:"w/cpp/algorithm/partial_sum"},f=void 0,k={unversionedId:"std/algo/ordinary/partial_sum",id:"std/algo/ordinary/partial_sum",title:"partial_sum algorithm",description:"partial_sum algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/partial_sum.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/partial_sum",permalink:"/CppLangNet/docs/std/algo/ordinary/partial_sum",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/partial_sum.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"partial_sum",permalink:"/CppLangNet/docs/tags/partial-sum"},{label:"reduce",permalink:"/CppLangNet/docs/tags/reduce"},{label:"fold",permalink:"/CppLangNet/docs/tags/fold"}],version:"current",frontMatter:{title:"partial_sum algorithm",sidebar_label:"partial_sum(  )",description:"partial_sum algorithm C++ documentation",hide_title:!0,tags:["algorithm","partial_sum","reduce","fold"],cppreference_origin_rel:"w/cpp/algorithm/partial_sum"},sidebar:"defaultSidebar",previous:{title:"adjacent_difference(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/adjacent_difference"},next:{title:"reduce(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/reduce"}},h={},g=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],v=(y="Signatue_UntilCpp20",function(e){return console.warn("Component "+y+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var y;const b={toc:g};function _(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stdpartial_sum-algorithm"},"std::partial_sum() algorithm"),(0,l.kt)(o.Z,{content:{"since-cpp20":(0,l.kt)(d.default,{mdxType:"Signature_SinceCpp20"}),"until-cpp20":(0,l.kt)(v,{mdxType:"Signatue_UntilCpp20"})},mdxType:"SwitchView"}),(0,l.kt)("p",null,"If [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") is not empty, computes the partial sums of the elements in its subranges and writes the sums to the range beginning at ",(0,l.kt)("inlineCode",{parentName:"p"},"d_first"),", ",(0,l.kt)(p.U6,{v:"cpp11",mdxType:"Since"},"both applying ",(0,l.kt)("a",{href:"#"},(0,l.kt)("code",null,"std::move"))," to their operands on the left hand side"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(1)")," Uses ",(0,l.kt)("inlineCode",{parentName:"p"},"operator+")," to sum up the elements. Equivalent to:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::iterator_traits<InputIt>::value_type acc = *first;\n*d_first = acc;\n\nacc = std::move(acc) + *(first + 1);\n*(d_first + 1) = acc;\n\nacc = std::move(acc) + *(first + 2);\n*(d_first + 2) = acc;\n\nacc = std::move(acc) + *(first + 3);\n*(d_first + 3) = acc;\n// ...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(2)")," Uses the given binary function op. Equivalent to:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::iterator_traits<InputIt>::value_type acc = *first;\n*d_first = acc;\n\nacc = op(std::move(acc), *(first + 1));\n*(d_first + 1) = acc;\n\nacc = op(std::move(acc), *(first + 2));\n*(d_first + 2) = acc;\n\nacc = op(std::move(acc), *(first + 3));\n*(d_first + 3) = acc;\n// ...\n")))),(0,l.kt)("admonition",{title:"Undefined Behaviour",type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"If ",(0,l.kt)("inlineCode",{parentName:"p"},"op")," invalidates any iterators (including the end iterators) or modifies any elements of the range involved, the ",(0,l.kt)(c.Z,{title:(0,l.kt)(u.ZP,{mdxType:"Term_UndefinedBehaviour"}),mdxType:"Tooltip"},"behavior is undefined"),".")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)(i.ZP,{mdxType:"SymbolTable"},(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)(r.Fragment,null," ",(0,l.kt)("code",null,"first")," ",(0,l.kt)("br",null)," ",(0,l.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to fold."),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"init"),mdxType:"Symbol"},"Initial value of the fold."),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"op"),mdxType:"Symbol"},(0,l.kt)("p",null,"Binary operation function object that will be applied.\nThe signature of the function should be equivalent to the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"}," Ret fun(const Type1 &a, const Type2 &b);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,l.kt)("inlineCode",{parentName:"li"},"const&"),"."),(0,l.kt)("li",{parentName:"ul"},"The type ",(0,l.kt)("inlineCode",{parentName:"li"},"Type1")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"std::iterator_traits<InputIt>::value_type")," can be implicitly converted to it."),(0,l.kt)("li",{parentName:"ul"},"The type ",(0,l.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt")," can be dereferenced and then implicitly converted to  it."),(0,l.kt)("li",{parentName:"ul"},"The type ",(0,l.kt)("inlineCode",{parentName:"li"},"Ret")," must be such that an object of type ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt")," can be dereferenced and assigned a value of it's type.")))),(0,l.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,l.kt)(i.ZP,{mdxType:"SymbolTable"},(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"InputIt"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator")),(0,l.kt)(i.mN,{none:!0,noLink:!0,name:(0,l.kt)("code",null,"OutputIt"),mdxType:"Symbol"},(0,l.kt)("a",{href:"/docs/named_req/LegacyOutputIterator"},"LegacyOutputIterator"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"InputIt"),"'s value type must be constructible from ",(0,l.kt)("inlineCode",{parentName:"li"},"*first"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"acc")," must be writable to ",(0,l.kt)("inlineCode",{parentName:"li"},"d_first"),".")),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"Iterator to the element past the last element written, or ",(0,l.kt)("inlineCode",{parentName:"p"},"d_first")," if [",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"last"),") is empty."),(0,l.kt)("h3",{id:"complexity"},"Complexity"),(0,l.kt)("p",null,"Given ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"std::distance(first, last) - 1"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(1)")," Exactly ",(0,l.kt)("inlineCode",{parentName:"li"},"N")," applications of ",(0,l.kt)("inlineCode",{parentName:"li"},"operator+"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"(2)")," Exactly ",(0,l.kt)("inlineCode",{parentName:"li"},"N")," applications of the binary function ",(0,l.kt)("inlineCode",{parentName:"li"},"op"),".")),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"(none)")),(0,l.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"partial_sum(1)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt, class OutputIt>\nconstexpr // since C++20\nOutputIt partial_sum(InputIt first, InputIt last, OutputIt d_first)\n{\n    if (first == last)\n        return d_first;\n\n    typename std::iterator_traits<InputIt>::value_type sum = *first;\n    *d_first = sum;\n\n    while (++first != last)\n    {\n        sum = std::move(sum) + *first; // std::move since C++11\n        *++d_first = sum;\n    }\n\n    return ++d_first;\n\n    // or, since C++14:\n    // return std::partial_sum(first, last, d_first, std::plus<>());\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"partial_sum(2)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt, class OutputIt, class BinaryOperation>\nconstexpr // since C++20\nOutputIt partial_sum(InputIt first, InputIt last, OutputIt d_first, BinaryOperation op)\n{\n    if (first == last)\n        return d_first;\n\n    typename std::iterator_traits<InputIt>::value_type acc = *first;\n    *d_first = acc;\n\n    while (++first != last)\n    {\n        acc = op(std::move(acc), *first); // std::move since C++11\n        *++d_first = acc;\n    }\n\n    return ++d_first;\n}\n"))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"acc")," was introduced because of the resolution of ",(0,l.kt)("a",{parentName:"p",href:"https://cplusplus.github.io/LWG/issue539"},"LWG issue 539"),"."),(0,l.kt)("p",null,"The reason of using ",(0,l.kt)("inlineCode",{parentName:"p"},"acc")," rather than directly calculating the differences is because the semantic of the latter is confusing if the following types mismatch:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The value type of ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt")),(0,l.kt)("li",{parentName:"ul"},"The writable type(s) of ",(0,l.kt)("inlineCode",{parentName:"li"},"OutputIt")),(0,l.kt)("li",{parentName:"ul"},"The types of the parameters of ",(0,l.kt)("inlineCode",{parentName:"li"},"operator-")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"op")),(0,l.kt)("li",{parentName:"ul"},"The return type of ",(0,l.kt)("inlineCode",{parentName:"li"},"operator-")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"op"))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"acc")," serves as the intermediate object to cache values of the iterated elements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Its type is the value type of ",(0,l.kt)("inlineCode",{parentName:"li"},"InputIt")),(0,l.kt)("li",{parentName:"ul"},"The value written to ",(0,l.kt)("inlineCode",{parentName:"li"},"d_first")," (which is the return value of ",(0,l.kt)("inlineCode",{parentName:"li"},"operator-")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"op"),") is assigned to it"),(0,l.kt)("li",{parentName:"ul"},"Its value is passed to ",(0,l.kt)("inlineCode",{parentName:"li"},"operator-")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"op"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"enum not_int { x = 1, y = 2 };\n\nchar i_array[4] = {100, 100, 100, 100};\nnot_int e_array[4] = {x, x, y, y};\nint  o_array[4];\n\n// OK: uses operator+(char, char) and assigns char values to int array\nstd::partial_sum(i_array, i_array + 4, o_array);\n\n// Error: cannot assign not_int values to int array\nstd::partial_sum(e_array, e_array + 4, o_array);\n\n// OK: performs conversions when needed\n// 1. creates `acc` of type char (the value type)\n// 2. the char arguments are used for long multiplication (char -> long)\n// 3. the long product is assigned to `acc` (long -> char)\n// 4. `acc` is assigned to an element of `o_array` (char -> int)\n// 5. go back to step 2 to process the remaining elements in the input range\nstd::partial_sum(i_array, i_array + 4, o_array, std::multiplies<long>{});\n")),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(s.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},'#include <functional>\n#include <iostream>\n#include <iterator>\n#include <numeric>\n#include <vector>\n\nint main()\n{\n    std::vector<int> v(10, 2); // v = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}\n\n    std::cout << "The first " << v.size() << " even numbers are: ";\n    // write the result to the cout stream\n    std::partial_sum(v.cbegin(), v.cend(), std::ostream_iterator<int>(std::cout, " "));\n    std::cout << \'\\n\';\n\n    // write the result back to the vector v\n    std::partial_sum(v.cbegin(), v.cend(),\n                     v.begin(), std::multiplies<int>());\n\n    std::cout << "The first " << v.size() << " powers of 2 are: ";\n    for (int n : v)\n        std::cout << n << \' \';\n    std::cout << \'\\n\';\n}\n'))),(0,l.kt)("div",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"The first 10 even numbers are: 2 4 6 8 10 12 14 16 18 20 \nThe first 10 powers of 2 are: 2 4 8 16 32 64 128 256 512 1024\n")))))}_.isMDXComponent=!0}}]);