"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[73825],{98088:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),l=(n(67294),n(3905));const r={toc:[]};function i(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("b",null,"Undefined behaviour")," is a property of a program that's incorrect, but likely compiles. It is incorrect in a way, that the error is only invoked in certain conditions at runtime.",(0,l.kt)("p",null,"Common cases include: ",(0,l.kt)("strong",{parentName:"p"},"out of bounds access"),", ",(0,l.kt)("strong",{parentName:"p"},"reading uninitialized objects"),", ",(0,l.kt)("strong",{parentName:"p"},"dangling pointers/references")," or ",(0,l.kt)("strong",{parentName:"p"},"signed overflow"),"."))}i.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),l=n(86010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),l=n(67294),r=n(86010),i=n(12466),o=n(76775),c=n(91980),s=n(67392),u=n(50012);function p(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:l}}=e;return{value:t,label:n,attributes:a,default:l}}))}function d(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[i,o]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,s]=f({queryString:n,groupId:a}),[p,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,l.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),v=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:i,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),g(e)}),[s,g,r]),tabValues:r}}var v=n(72389);const k="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:o,selectValue:c,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=s[n].value;a!==o&&(p(t),c(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,r.Z)("tabs__item",h,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=g(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",k)},l.createElement(y,(0,a.Z)({},e,t)),l.createElement(b,(0,a.Z)({},e,t)))}function C(e){const t=(0,v.Z)();return l.createElement(N,(0,a.Z)({key:String(t)},e))}},98839:(e,t,n)=>{n.d(t,{z:()=>a});const a=n(67294).createContext({name:"Unknown",folder:"unknown"})},22307:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(87462),l=n(67294);const r="columns_Terr";function i(e){const t=e.style||{};t.gap=e.spacing||20,e.columns?t.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):t.gridTemplateColumns="repeat(2, 1fr)";const n={...e};return delete n.columns,delete n.spacing,delete n.breakAt,l.createElement("div",(0,a.Z)({className:r,"data-break-at":e.breakAt??"md"},n,{style:t}),e.children)}i.isMDXComponent=!0},99801:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),l=n(74866),r=n(85162),i=n(99372),o=n(72412);const c={};function s(e){const t=e.content||{};return a.createElement(l.Z,null,Object.entries(t).map(((e,t)=>{let[n,s]=e;return s.value||s.simplified||s.detailed?a.createElement(r.Z,{value:n,label:i.gJ.get(n),default:s.default||0==t},s.simplified?a.createElement(a.Fragment,null,a.createElement(l.Z,{groupId:"view_mode",className:c.smallTabs},a.createElement(r.Z,{value:"simplified",label:"Simplified",default:!0},(0,o.Z)(s.simplified)),a.createElement(r.Z,{value:"detailed",label:"Detailed"},(0,o.Z)(s.detailed)))):s.value):a.createElement(r.Z,{value:n,label:i.gJ.get(n),default:0==t},(0,o.Z)(s))})))}},55059:(e,t,n)=>{n.d(t,{mN:()=>u,ZP:()=>s});var a=n(67294),l=n(72412);const r={symbolTable:"symbolTable_yosy",symbolName:"symbolName__gUy",symbolDesc:"symbolDesc_wDaQ",symbolProp:"symbolProp_oAcv",accessPublic:"accessPublic_LfqG",accessProtected:"accessProtected_bDL6",accessPrivate:"accessPrivate_Ab5O",modStatic:"modStatic_ZSC5",modConstexpr:"modConstexpr_iypt",modConst:"modConst_osuL",modVolatile:"modVolatile_ePYM",modVirtual:"modVirtual_jNz7"};var i=n(98839);const o={None:{Order:0,ShortName:"",FullName:"",Style:r.accessPublic},Public:{Order:1,ShortName:"pub",FullName:"public",Style:r.accessPublic},Protected:{Order:2,ShortName:"prot",FullName:"protected",Style:r.accessProtected},Private:{Order:3,ShortName:"priv",FullName:"private",Style:r.accessPrivate}},c=e=>e.none?o.None:e.pub||e.public?o.Public:e.prot||e.protected?o.Protected:e.priv||e.private?o.Private:o.Public;function s(e){return(t=>{if(0===t.length)return null;const n=t.sort(((e,t)=>c(e).Order<c(t).Order));return a.createElement("table",{"data-no-traits":`${e.noTraits||"false"}`,className:r.symbolTable},a.createElement("tbody",null,n))})(a.Children.toArray(e.children))}function u(e){a.useContext(i.z);let t=(0,l.Z)(e.name),n=null;e.desc?n=e.desc:e.children&&(n=e.children);const o=e.linkName||e.autoLink;!e.noLink&&o&&(t=a.createElement("a",{href:e.link||`${e.linkName||e.name}`},t));const s=(e,t,n)=>!0===e?a.createElement("span",{className:r[t]},n):null;return a.createElement("tr",null,!e.none&&a.createElement("td",{className:r.symbolProp},(e=>{const t=c(e);return a.createElement("span",{className:t.Style},t.ShortName)})(e),s(e.static,"modStatic","static"),s(e.constexpr,"modConstexpr","constexpr"),s(e.const,"modConst","const"),s(e.volatile,"modVolatile","volatile"),s(e.virtual,"modVirtual","virtual")),a.createElement("td",{className:r.symbolName},t),a.createElement("td",{className:r.symbolDesc},(0,l.Z)(n)))}u.isMDXComponent=!0,s.isMDXComponent=!0,s.Symbol=u},18510:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),l=n(44996),r=n(34386),i=n(72412);const o="TooltipContent_Lvru",c="TooltipTitle_ukF2";function s(e){let{url:t,title:n,maxWidth:s,children:u}=e;let p=s||"clamp(250px, 25vw, 800px)";"string"==typeof p&&p.endsWith("vw")&&(p=`clamp(250px, ${p}, 800px)`);const d="function"==typeof n?a.createElement(n):n,m=(t||"").startsWith("/")?(0,l.Z)(t):t,f=t?a.createElement("a",{href:m,target:"_blank",rel:"noreferrer"},u):u;return a.createElement(r.Z,{componentsProps:{tooltip:{style:{maxWidth:p}}},title:a.createElement("span",{className:c},(0,i.Z)(d)),placement:"top",arrow:!0},a.createElement("span",{className:o},f))}s.isMDXComponent=!0},99372:(e,t,n)=>{n.d(t,{gJ:()=>u,eH:()=>f,U6:()=>d,OS:()=>m});var a=n(67294),l=n(95999);const r="markedText_c6kK",i="since_c1Q3",o="until_jXK6",c="removed_A_Kf",s="versionNumber_BiUX",u=new Map;function p(e){let{children:t,className:n}=e;return a.createElement("span",{className:r+(n?" "+n:"")},t)}function d(e){let{children:t,v:n}=e;return a.createElement(p,{className:i},t,"\xa0",a.createElement("span",{className:s},a.createElement("small",null,"(",u.get(`since-${n}`),")")))}function m(e){let{children:t,v:n}=e;return a.createElement(p,{className:o},t,"\xa0",a.createElement("span",{className:s},a.createElement("small",null,"(",u.get(`until-${n}`),")")))}function f(e){let{children:t,v:n}=e;return a.createElement(p,{className:c},t,"\xa0",a.createElement("span",{className:s},a.createElement("small",null,"(",u.get(`removed-${n}`),")")))}u.set("cpp98","C++98"),u.set("cpp03","C++03"),u.set("cpp11","C++11"),u.set("cpp14","C++14"),u.set("cpp17","C++17"),u.set("cpp20","C++20"),u.set("cpp23","C++23"),u.set("deprecated-",a.createElement(l.Z,null,"deprecated")),u.set("deprecated-cpp98",a.createElement(l.Z,null,"deprecated in C++98")),u.set("deprecated-cpp03",a.createElement(l.Z,null,"deprecated in C++03")),u.set("deprecated-cpp11",a.createElement(l.Z,null,"deprecated in C++11")),u.set("deprecated-cpp14",a.createElement(l.Z,null,"deprecated in C++14")),u.set("deprecated-cpp17",a.createElement(l.Z,null,"deprecated in C++17")),u.set("deprecated-cpp20",a.createElement(l.Z,null,"deprecated in C++20")),u.set("deprecated-cpp23",a.createElement(l.Z,null,"deprecated in C++23")),u.set("until-cpp98",a.createElement(l.Z,null,"until C++98")),u.set("until-cpp03",a.createElement(l.Z,null,"until C++03")),u.set("until-cpp11",a.createElement(l.Z,null,"until C++11")),u.set("until-cpp14",a.createElement(l.Z,null,"until C++14")),u.set("until-cpp17",a.createElement(l.Z,null,"until C++17")),u.set("until-cpp20",a.createElement(l.Z,null,"until C++20")),u.set("until-cpp23",a.createElement(l.Z,null,"until C++23")),u.set("since-cpp98",a.createElement(l.Z,null,"since C++98")),u.set("since-cpp03",a.createElement(l.Z,null,"since C++03")),u.set("since-cpp11",a.createElement(l.Z,null,"since C++11")),u.set("since-cpp14",a.createElement(l.Z,null,"since C++14")),u.set("since-cpp17",a.createElement(l.Z,null,"since C++17")),u.set("since-cpp20",a.createElement(l.Z,null,"since C++20")),u.set("since-cpp23",a.createElement(l.Z,null,"since C++23")),u.set("removed-",a.createElement(l.Z,null,"deleted")),u.set("removed-cpp98",a.createElement(l.Z,null,"removed in C++98")),u.set("removed-cpp03",a.createElement(l.Z,null,"removed in C++03")),u.set("removed-cpp11",a.createElement(l.Z,null,"removed in C++11")),u.set("removed-cpp14",a.createElement(l.Z,null,"removed in C++14")),u.set("removed-cpp17",a.createElement(l.Z,null,"removed in C++17")),u.set("removed-cpp20",a.createElement(l.Z,null,"removed in C++20")),u.set("removed-cpp23",a.createElement(l.Z,null,"removed in C++23"))},72412:(e,t,n)=>{function a(e){return"object"!=typeof e||Array.isArray(e)||void 0!==e.type?e:e.props.children}n.d(t,{Z:()=>a})},25154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),l=(n(67294),n(3905));const r={},i=void 0,o={unversionedId:"std/algo/ordinary/_codes/accumulate/since-cpp20",id:"std/algo/ordinary/_codes/accumulate/since-cpp20",title:"since-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/accumulate/since-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/accumulate",slug:"/std/algo/ordinary/_codes/accumulate/since-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/accumulate/since-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/accumulate/since-cpp20.mdx",tags:[],version:"current",frontMatter:{}},c={},s=[],u={toc:s};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt, class T >\nconstexpr T accumulate( InputIt first, InputIt last, T init );\n\n// (2)\ntemplate< class InputIt, class T, class BinaryOperation >\nconstexpr T accumulate( InputIt first, InputIt last, T init, BinaryOperation op );\n")))}p.isMDXComponent=!0},37454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),l=(n(67294),n(3905));const r={},i=void 0,o={unversionedId:"std/algo/ordinary/_codes/accumulate/until-cpp20",id:"std/algo/ordinary/_codes/accumulate/until-cpp20",title:"until-cpp20",description:"",source:"@site/content/docs/std/algo/ordinary/_codes/accumulate/until-cpp20.mdx",sourceDirName:"std/algo/ordinary/_codes/accumulate",slug:"/std/algo/ordinary/_codes/accumulate/until-cpp20",permalink:"/CppLangNet/docs/std/algo/ordinary/_codes/accumulate/until-cpp20",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/_codes/accumulate/until-cpp20.mdx",tags:[],version:"current",frontMatter:{}},c={},s=[],u={toc:s};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// (1)\ntemplate< class InputIt, class T >\nT accumulate( InputIt first, InputIt last, T init );\n\n// (2)\ntemplate< class InputIt, class T, class BinaryOperation >\nT accumulate( InputIt first, InputIt last, T init, BinaryOperation op );\n")))}p.isMDXComponent=!0},63252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>f,default:()=>N,frontMatter:()=>m,metadata:()=>g,toc:()=>k});var a=n(87462),l=n(67294),r=n(3905),i=n(55059),o=n(22307),c=n(99801),s=n(18510),u=n(99372),p=n(98088),d=n(25154);n(37454);const m={title:"accumulate algorithm",sidebar_label:"accumulate(  )",description:"accumulate algorithm C++ documentation",hide_title:!0,tags:["algorithm","accumulate","reduce","fold"],cppreference_origin_rel:"w/cpp/algorithm/accumulate"},f=void 0,g={unversionedId:"std/algo/ordinary/accumulate",id:"std/algo/ordinary/accumulate",title:"accumulate algorithm",description:"accumulate algorithm C++ documentation",source:"@site/content/docs/std/algo/ordinary/accumulate.mdx",sourceDirName:"std/algo/ordinary",slug:"/std/algo/ordinary/accumulate",permalink:"/CppLangNet/docs/std/algo/ordinary/accumulate",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/docs/std/algo/ordinary/accumulate.mdx",tags:[{label:"algorithm",permalink:"/CppLangNet/docs/tags/algorithm"},{label:"accumulate",permalink:"/CppLangNet/docs/tags/accumulate"},{label:"reduce",permalink:"/CppLangNet/docs/tags/reduce"},{label:"fold",permalink:"/CppLangNet/docs/tags/fold"}],version:"current",frontMatter:{title:"accumulate algorithm",sidebar_label:"accumulate(  )",description:"accumulate algorithm C++ documentation",hide_title:!0,tags:["algorithm","accumulate","reduce","fold"],cppreference_origin_rel:"w/cpp/algorithm/accumulate"},sidebar:"defaultSidebar",previous:{title:"iota(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/iota"},next:{title:"inner_product(  )",permalink:"/CppLangNet/docs/std/algo/ordinary/inner_product"}},v={},k=[{value:"Parameters",id:"parameters",level:3},{value:"Type requirements",id:"type-requirements",level:4},{value:"Return value",id:"return-value",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Possible implementation",id:"possible-implementation",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:3}],h=(y="Signatue_UntilCpp20",function(e){return console.warn("Component "+y+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var y;const b={toc:k};function N(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"stdaccumulate-algorithm"},"std::accumulate() algorithm"),(0,r.kt)(c.Z,{content:{"since-cpp20":(0,r.kt)(d.default,{mdxType:"Signature_SinceCpp20"}),"until-cpp20":(0,r.kt)(h,{mdxType:"Signatue_UntilCpp20"})},mdxType:"SwitchView"}),(0,r.kt)("p",null,"Computes the sum of the given value ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," and the elements in the ange [",(0,r.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last"),")."),(0,r.kt)("p",null,"Initializes the accumulator ",(0,r.kt)("inlineCode",{parentName:"p"},"acc")," (of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),") with the initial value ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," and then modifies it with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(1)"),(0,r.kt)(u.OS,{v:"cpp20",mdxType:"Until"},(0,r.kt)("code",null,"acc = acc + *i")),(0,r.kt)(u.U6,{v:"cpp20",mdxType:"Since"},(0,r.kt)("code",null,"acc = std::move(acc) + *i"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(2)"),(0,r.kt)(u.OS,{v:"cpp20",mdxType:"Until"},(0,r.kt)("code",null,"acc = op(acc, *i)")),(0,r.kt)(u.U6,{v:"cpp20",mdxType:"Since"},(0,r.kt)("code",null,"acc = op(std::move(acc), *i)")))),(0,r.kt)("p",null,"for every iterator ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," in the range [",(0,r.kt)("inlineCode",{parentName:"p"},"first"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"last"),") in order."),(0,r.kt)("admonition",{title:"Undefined Behaviour",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"op")," invalidates any iterators (including the end iterators) or modifies any elements of the range involved, the ",(0,r.kt)(s.Z,{title:(0,r.kt)(p.ZP,{mdxType:"Term_UndefinedBehaviour"}),mdxType:"Tooltip"},"behavior is undefined"),".")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)(i.ZP,{mdxType:"SymbolTable"},(0,r.kt)(i.mN,{none:!0,noLink:!0,name:(0,r.kt)(l.Fragment,null," ",(0,r.kt)("code",null,"first")," ",(0,r.kt)("br",null)," ",(0,r.kt)("code",null,"last")," "),mdxType:"Symbol"},"The range of elements to fold."),(0,r.kt)(i.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"init"),mdxType:"Symbol"},"Initial value of the fold."),(0,r.kt)(i.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"op"),mdxType:"Symbol"},(0,r.kt)("p",null,"Binary operation function object that will be applied.\nThe signature of the function should be equivalent to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"}," Ret fun(const Type1 &a, const Type2 &b);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The signature does not need to have ",(0,r.kt)("inlineCode",{parentName:"li"},"const&"),"."),(0,r.kt)("li",{parentName:"ul"},"The type ",(0,r.kt)("inlineCode",{parentName:"li"},"Type1")," must be such that an object of type ",(0,r.kt)("inlineCode",{parentName:"li"},"T")," can be implicitly converted to it."),(0,r.kt)("li",{parentName:"ul"},"The type ",(0,r.kt)("inlineCode",{parentName:"li"},"Type2")," must be such that an object of type ",(0,r.kt)("inlineCode",{parentName:"li"},"InputIt")," can be dereferenced and then implicitly converted to it."),(0,r.kt)("li",{parentName:"ul"},"The type ",(0,r.kt)("inlineCode",{parentName:"li"},"Ret")," must be such that an object of type ",(0,r.kt)("inlineCode",{parentName:"li"},"T")," can be assigned a value of it's type.")))),(0,r.kt)("h4",{id:"type-requirements"},"Type requirements"),(0,r.kt)(i.ZP,{mdxType:"SymbolTable"},(0,r.kt)(i.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"InputIt"),mdxType:"Symbol"},(0,r.kt)("a",{href:"/docs/named_req/LegacyInputIterator"},"LegacyInputIterator")),(0,r.kt)(i.mN,{none:!0,noLink:!0,name:(0,r.kt)("code",null,"T"),mdxType:"Symbol"},(0,r.kt)("a",{href:"/docs/named_req/CopyAssignable"},"CopyAssignable")," ",(0,r.kt)("br",null),(0,r.kt)("a",{href:"/docs/named_req/CopyConstructible"},"CopyConstructible"))),(0,r.kt)("h3",{id:"return-value"},"Return value"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acc")," after all modifications."),(0,r.kt)("h3",{id:"complexity"},"Complexity"),(0,r.kt)("p",null,"Exactly ",(0,r.kt)("inlineCode",{parentName:"p"},"last - first")," increments and assignments."),(0,r.kt)("h3",{id:"exceptions"},"Exceptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"(none)")),(0,r.kt)("h3",{id:"possible-implementation"},"Possible implementation"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"accumulate(1)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt, class T>\nconstexpr // since C++20\nT accumulate(InputIt first, InputIt last, T init)\n{\n    for (; first != last; ++first)\n        init = std::move(init) + *first; // std::move since C++20\n\n    return init;\n}\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"accumulate(2)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template<class InputIt, class T, class BinaryOperation>\nconstexpr // since C++20\nT accumulate(InputIt first, InputIt last, T init, BinaryOperation op)\n{\n    for (; first != last; ++first)\n        init = op(std::move(init), *first); // std::move since C++20\n\n    return init;\n}\n"))),(0,r.kt)("h3",{id:"notes"},"Notes"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#"},(0,r.kt)("inlineCode",{parentName:"a"},"std::accumulate"))," performs a left fold. In order to perform a right fold, one must reverse the order of the arguments to the binary operator, and use reverse iterators."),(0,r.kt)("p",null,"If left to type inference, ",(0,r.kt)("inlineCode",{parentName:"p"},"op")," operates on values of the same type as ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," which can result in unwanted casting of the iterator elements.",(0,r.kt)("br",{parentName:"p"}),"\n","For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"std::accumulate(v.begin(), v.end(), 0)")," likely does not give the result one wishes for when ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"std::vector<double>"),"."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)(o.Z,{columns:["8fr","4fr"],mdxType:"Columns"},(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Main.cpp' showLineNumbers",title:"'Main.cpp'",showLineNumbers:!0},"#include <functional>\n#include <iostream>\n#include <numeric>\n#include <string>\n#include <vector>\n\nint main()\n{\n    std::vector<int> v {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n    int sum = std::accumulate(v.begin(), v.end(), 0);\n    int product = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>());\n\n    auto dash_fold = [](std::string a, int b)\n    {\n        return std::move(a) + '-' + std::to_string(b);\n    };\n\n    std::string s = std::accumulate(std::next(v.begin()), v.end(),\n                                    std::to_string(v[0]), // start with first element\n                                    dash_fold);\n\n    // Right fold using reverse iterators\n    std::string rs = std::accumulate(std::next(v.rbegin()), v.rend(),\n                                     std::to_string(v.back()), // start with last element\n                                     dash_fold);\n\n    std::cout << \"sum: \" << sum << '\\n'\n              << \"product: \" << product << '\\n'\n              << \"dash-separated string: \" << s << '\\n'\n              << \"dash-separated string (right-folded): \" << rs << '\\n';\n}\n"))),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output"',title:'"Output"'},"sum: 55\nproduct: 3628800\ndash-separated string: 1-2-3-4-5-6-7-8-9-10\ndash-separated string (right-folded): 10-9-8-7-6-5-4-3-2-1\n")))))}N.isMDXComponent=!0}}]);