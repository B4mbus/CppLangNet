"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[62597],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),u=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?o.createElement(f,r(r({ref:n},c),{},{components:t})):o.createElement(f,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var u=2;u<i;u++)r[u]=t[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},18162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var o=t(87462),a=(t(67294),t(3905));const i={title:"Conditions \xbb Examples",description:"Lesson: examples of conditions in C++",tags:["condition","if","else","else-if","compound","bool","boolean","examples"],hide_title:!0},r="Conditions \xbb Examples",s={unversionedId:"course/basics/conditions/examples",id:"course/basics/conditions/examples",title:"Conditions \xbb Examples",description:"Lesson: examples of conditions in C++",source:"@site/content/learn/course/basics/conditions/examples.mdx",sourceDirName:"course/basics/conditions",slug:"/course/basics/conditions/examples",permalink:"/CppLangNet/learn/course/basics/conditions/examples",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/conditions/examples.mdx",tags:[{label:"condition",permalink:"/CppLangNet/learn/tags/condition"},{label:"if",permalink:"/CppLangNet/learn/tags/if"},{label:"else",permalink:"/CppLangNet/learn/tags/else"},{label:"else-if",permalink:"/CppLangNet/learn/tags/else-if"},{label:"compound",permalink:"/CppLangNet/learn/tags/compound"},{label:"bool",permalink:"/CppLangNet/learn/tags/bool"},{label:"boolean",permalink:"/CppLangNet/learn/tags/boolean"},{label:"examples",permalink:"/CppLangNet/learn/tags/examples"}],version:"current",frontMatter:{title:"Conditions \xbb Examples",description:"Lesson: examples of conditions in C++",tags:["condition","if","else","else-if","compound","bool","boolean","examples"],hide_title:!0},sidebar:"defaultSidebar",previous:{title:"Conditions \xbb Tips and style",permalink:"/CppLangNet/learn/course/basics/conditions/tips"},next:{title:"Conditions \xbb Common problems",permalink:"/CppLangNet/learn/course/basics/conditions/common-problems"}},l={},u=[{value:"Driver&#39;s license oracle",id:"drivers-license-oracle",level:2},{value:"Interactive boolean logic calculator",id:"interactive-boolean-logic-calculator",level:2},{value:"Computing properties of numbers",id:"computing-properties-of-numbers",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"conditions--examples"},"Conditions \xbb Examples"),(0,a.kt)("h2",{id:"drivers-license-oracle"},"Driver's license oracle"),(0,a.kt)("p",null,"This example was developed throughout the entire ",(0,a.kt)("a",{parentName:"p",href:"learn/course/basics/conditions/intro/"},"Conditions lesson"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main() {\n    std::cout << "Welcome to the Driver\'s License Oracle 5500\\n";\n\n    int yearOfBirth;\n    std::cout << "Please enter your year of birth: ";\n    std::cin >> yearOfBirth;\n\n    int numCrashes;\n    std::cout << "Please enter the number of crashes you have had: \\n";\n    std::cin >> numCrashes;\n\n    char licenseClass = \'X\'; // X is chosen as a default value to signal if we miss one of our cases\n    std::string illegalReason;\n\n    if (numCrashes < 2) {\n        // Year 2022 at the moment of writing this lesson\n        int age = 2022 - yearOfBirth;\n\n        if ((age >= 18 and age <= 21) or (age >= 51 and age <= 64)) {\n            licenseClass = \'C\';\n        } else if (age >= 22 and age <= 30) {\n            licenseClass = \'B\';\n        } else if (age >= 31 and age <= 50) {\n            licenseClass = \'A\';\n        } else {\n            illegalReason = "you are not between 18 and 64 years old";\n        }\n    } else {\n        illegalReason = "you have " + std::to_string(numCrashes) + " accidents";\n    }\n\n    if (licenseClass != \'X\') {\n        std::cout << "You can legally get a Class " << licenseClass << " driver\'s license\\n";\n    } else {\n        std::cout << "You cannot legally get a driver\'s license because " << illegalReason << "\\n";\n    }\n}\n')),(0,a.kt)("h2",{id:"interactive-boolean-logic-calculator"},"Interactive boolean logic calculator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <iomanip>\n#include <string>\n\nint main() {\n    // Ask for the two boolean inputs\n    std::cout << "Welcome to the Boolean Logic Calculator!\\n"\n              << "Please enter two values of either true or false exactly:\\n";\n    \n    bool inputA;\n    bool inputB;\n\n    // Use std::boolalpha to accept input as either "true" or "false"\n    std::cin >> std::boolalpha >> inputA >> inputB;\n\n    // Ask for the operation\n    std::cout << "\\n\\nNow enter a logical operation.\\n"\n              << "Valid options are AND, NAND, OR, NOR, XOR, XNOR (exactly):\\n";\n\n    std::string op;\n    std::cin >> op;\n\n    // Now compute the result based on op\n    bool result;\n\n    if (op == "AND") {\n        result = inputA and inputB;\n    } else if (op == "NAND") {\n        result = not (inputA and inputB);\n    } else if (op == "OR") {\n        result = inputA or inputB;\n    } else if (op == "NOR") {\n        result = not (inputA or inputB);\n    } else if (op == "XOR") {\n        result = inputA != inputB; // XOR is equivalent to "not equal" for booleans\n    } else if (op == "XNOR") {\n        result = inputA == inputB; // XNOR is equivalent to "equals" for booleans\n    } else {\n        std::cout << "Error! Invalid choice. Quitting.";\n        \n        // Using a return statement here to gracefully end the main function,\n        // which in turn quits the program.\n        // The 1 signifies a failure to the operating system.\n        // You will learn more about returns in the Functions chapter.\n        return 1;\n    }\n\n    std::cout << std::boolalpha; // Set output to show as true/false for booleans\n    std::cout << "\\n\\nThe answer of " << inputA << " " << op << " " << inputB << " is " << result;\n}\n')),(0,a.kt)("h2",{id:"computing-properties-of-numbers"},"Computing properties of numbers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main() {\n    int value1;\n    bool isValue1Even;\n\n    std::cout << "Input a number: ";\n    std::cin >> value1;\n\n    // Compute the parity (even vs odd) of the number\n    if (value1 % 2 == 0) {\n        isValue1Even = true;\n        \n        std::cout << "Your number is even!\\n";\n        if (value1 == 0) {\n            // Many people are confused by the parity of zero\n            std::cout << "But does zero count as an even number?\\n";\n        }\n    } else {\n        isValue1Even = false;\n        std::cout << "Your number is odd!\\n";\n    }\n\n    // Compute the sign of the number\n    if (value1 > 0) {\n        std::cout << "Your number is positive!\\n";\n    } else if (value1 < 0) {\n        std::cout << "Your number is negative!\\n";\n    } else {\n        std::cout << "Zero is neither positive nor negative.\\n";\n    }\n\n    // Ask the user for a second number to compare\n    int value2;\n\n    std::cout << "\\nNow, input a number again: ";\n    std::cin >> value2;\n\n    // Compute the relative magnitude of the second number compared to the first\n    if (value1 != value2) {\n        std::cout << "You entered a different number... ";\n\n        if (value1 > value2) {\n            std::cout << "And it was smaller than the previous one!\\n";\n        } else {\n            std::cout << "And it was bigger than the previous one!\\n";\n        }\n    } else {\n        std::cout << "You entered the same number!\\n";\n    }\n\n    // Now check for the "special property"\n    // Your numbers are special if they are both even and their difference is divisible by seven\n    int diff = value1 - value2;\n    bool isValue2Even = value2 % 2 == 0;\n\n    if (isValue1Even && isValue2Even && (diff % 7 == 0)) {\n        std::cout << "Your numbers are special!";\n    }\n}\n')))}p.isMDXComponent=!0}}]);