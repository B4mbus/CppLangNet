"use strict";(self.webpackChunkcpp_lang_net=self.webpackChunkcpp_lang_net||[]).push([[1628],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},51058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),o=t(22307);const l={title:"References (I)",description:"Lesson: references basics in C++ language",tags:["reference","pointer","memory"],hide_title:!0},i="References",s={unversionedId:"course/basics/references",id:"course/basics/references",title:"References (I)",description:"Lesson: references basics in C++ language",source:"@site/content/learn/course/basics/references.mdx",sourceDirName:"course/basics",slug:"/course/basics/references",permalink:"/CppLangNet/learn/course/basics/references",draft:!1,editUrl:"https://github.com/Cpp4You/CppLangNet/edit/main/content/learn/course/basics/references.mdx",tags:[{label:"reference",permalink:"/CppLangNet/learn/tags/reference"},{label:"pointer",permalink:"/CppLangNet/learn/tags/pointer"},{label:"memory",permalink:"/CppLangNet/learn/tags/memory"}],version:"current",frontMatter:{title:"References (I)",description:"Lesson: references basics in C++ language",tags:["reference","pointer","memory"],hide_title:!0},sidebar:"defaultSidebar",previous:{title:"Inheritance",permalink:"/CppLangNet/learn/course/basics/inheritance"},next:{title:"Methods",permalink:"/CppLangNet/learn/course/basics/methods/"}},c={},p=[{value:"Motivations",id:"motivations",level:2},{value:"Using references",id:"using-references",level:2},{value:"Pass by reference",id:"pass-by-reference",level:2},{value:"Modifying elements in a range-based for loop",id:"modifying-elements-in-a-range-based-for-loop",level:2}],u={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"references"},"References"),(0,a.kt)("p",null,"This lesson will show you how you can access variables indirectly with references."),(0,a.kt)("h2",{id:"motivations"},"Motivations"),(0,a.kt)("p",null,"Let's say that you have a function that doubles the parameter."),(0,a.kt)(o.Z,{spacing:40,columns:["7fr","4fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid doubleNumber(int num) \n{\n    num = num * 2;\n}\n\nint main()\n{\n    int x = 5;\n    doubleNumber(x); \n    std::cout << x;\n}\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output (console)"',title:'"Output','(console)"':!0},"5\n")))),(0,a.kt)("p",null,"But this will not work,\nbecause only the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is written into ",(0,a.kt)("inlineCode",{parentName:"p"},"num"),"."),(0,a.kt)("p",null,"This is where references come into play."),(0,a.kt)("h2",{id:"using-references"},"Using references"),(0,a.kt)("p",null,"You can create a reference by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," to the type of the variable you want to refer to."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int var = 5;\nint& ref = var; // ref is a int reference that refers to var\n")),(0,a.kt)("p",null,"Now, if you modify ",(0,a.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," will also be modified because ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," ",(0,a.kt)("strong",{parentName:"p"},"is")," ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"ref = 23;\nstd::cout << var; // Prints out 23\n")),(0,a.kt)("h2",{id:"pass-by-reference"},"Pass by reference"),(0,a.kt)("p",null,"Now let's see how we can use references to solve our issue."),(0,a.kt)("p",null,"We just need to make the function take a ",(0,a.kt)("inlineCode",{parentName:"p"},"int reference")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,a.kt)(o.Z,{spacing:40,columns:["7fr","4fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid doubleNumber(int &num) \n{\n    num = num * 2;\n}\n\nint main()\n{\n    int x = 5;\n    doubleNumber(x);\n}\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output (console)"',title:'"Output','(console)"':!0},"10\n")))),(0,a.kt)("p",null,"Now the the function ",(0,a.kt)("inlineCode",{parentName:"p"},"doubleNumber")," takes a reference,\n",(0,a.kt)("inlineCode",{parentName:"p"},"num")," will become whatever variable is passed into the function.\nThis means when we modify num (which has become ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"), we also indirectly modify ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,a.kt)("h2",{id:"modifying-elements-in-a-range-based-for-loop"},"Modifying elements in a range-based for loop"),(0,a.kt)("p",null,"A similar problem can be seen in range-based for loops.\nSince references ",(0,a.kt)("strong",{parentName:"p"},"become")," the variable that it is referring to,\nwe can use it to access the elements in our arrays."),(0,a.kt)("p",null,"Here is a simple array"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<int> arr = {2, 4, 6};\n")),(0,a.kt)("p",null,"Let's say we want to add 5 to each element,\nIt's possible to do that one by one, but it becomes annoying and long if the array is big. ",(0,a.kt)("br",null),"\nSo loops will come to our rescue!"),(0,a.kt)(o.Z,{spacing:40,columns:["7fr","4fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int x : arr) \n{\n    x = x + 5;\n}\nstd::cout << arr[0];\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output (console)"',title:'"Output','(console)"':!0},"2\n")))),(0,a.kt)("p",null,"But the code above will unfortunately not work.\nThis is because only the value of the element is being copied into ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),",\nnot the element itself."),(0,a.kt)("p",null,"This is where we can use references,\nthey can make the actual element of the array be copied into ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,a.kt)(o.Z,{spacing:40,columns:["7fr","4fr"],mdxType:"Columns"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int& x : arr) \n{\n    x = x + 5;\n}\nstd::cout << arr[0];\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:'title="Output (console)"',title:'"Output','(console)"':!0},"7\n")))),"Now each each element of the array has successfully increased by five.",(0,a.kt)("admonition",{title:"Use references accordingly",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You should only use references for when you actually need to modify the variable.\nDon't use references if you just need the value.")))}m.isMDXComponent=!0},22307:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(87462),a=t(67294);const o="columns_Terr";function l(e){const n=e.style||{};n.gap=e.spacing||20,e.columns?n.gridTemplateColumns=e.columns.map((e=>`${e}`)).join(" "):n.gridTemplateColumns="repeat(2, 1fr)";const t={...e};return delete t.columns,delete t.spacing,delete t.breakAt,a.createElement("div",(0,r.Z)({className:o,"data-break-at":e.breakAt??"md"},t,{style:n}),e.children)}l.isMDXComponent=!0}}]);